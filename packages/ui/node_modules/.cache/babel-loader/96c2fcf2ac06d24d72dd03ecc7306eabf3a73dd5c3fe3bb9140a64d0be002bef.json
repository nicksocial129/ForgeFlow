{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMlabeledtrMixin = exports.CommonMtrMixin = void 0;\nfunction CommonMtrMixin(Base) {\n  return function (_super) {\n    __extends(class_1, _super);\n    function class_1() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(class_1.prototype, \"fixesPWidth\", {\n      get: function () {\n        return false;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(class_1.prototype, \"numCells\", {\n      get: function () {\n        return this.childNodes.length;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(class_1.prototype, \"labeled\", {\n      get: function () {\n        return false;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(class_1.prototype, \"tableCells\", {\n      get: function () {\n        return this.childNodes;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    class_1.prototype.getChild = function (i) {\n      return this.childNodes[i];\n    };\n    class_1.prototype.getChildBBoxes = function () {\n      return this.childNodes.map(function (cell) {\n        return cell.getBBox();\n      });\n    };\n    class_1.prototype.stretchChildren = function (HD) {\n      var e_1, _a, e_2, _b, e_3, _c;\n      if (HD === void 0) {\n        HD = null;\n      }\n      var stretchy = [];\n      var children = this.labeled ? this.childNodes.slice(1) : this.childNodes;\n      try {\n        for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {\n          var mtd = children_1_1.value;\n          var child = mtd.childNodes[0];\n          if (child.canStretch(1)) {\n            stretchy.push(child);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      var count = stretchy.length;\n      var nodeCount = this.childNodes.length;\n      if (count && nodeCount > 1) {\n        if (HD === null) {\n          var H = 0,\n            D = 0;\n          var all = count > 1 && count === nodeCount;\n          try {\n            for (var children_2 = __values(children), children_2_1 = children_2.next(); !children_2_1.done; children_2_1 = children_2.next()) {\n              var mtd = children_2_1.value;\n              var child = mtd.childNodes[0];\n              var noStretch = child.stretch.dir === 0;\n              if (all || noStretch) {\n                var _d = child.getBBox(noStretch),\n                  h = _d.h,\n                  d = _d.d;\n                if (h > H) {\n                  H = h;\n                }\n                if (d > D) {\n                  D = d;\n                }\n              }\n            }\n          } catch (e_2_1) {\n            e_2 = {\n              error: e_2_1\n            };\n          } finally {\n            try {\n              if (children_2_1 && !children_2_1.done && (_b = children_2.return)) _b.call(children_2);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n          }\n          HD = [H, D];\n        }\n        try {\n          for (var stretchy_1 = __values(stretchy), stretchy_1_1 = stretchy_1.next(); !stretchy_1_1.done; stretchy_1_1 = stretchy_1.next()) {\n            var child = stretchy_1_1.value;\n            child.coreMO().getStretchedVariant(HD);\n          }\n        } catch (e_3_1) {\n          e_3 = {\n            error: e_3_1\n          };\n        } finally {\n          try {\n            if (stretchy_1_1 && !stretchy_1_1.done && (_c = stretchy_1.return)) _c.call(stretchy_1);\n          } finally {\n            if (e_3) throw e_3.error;\n          }\n        }\n      }\n    };\n    return class_1;\n  }(Base);\n}\nexports.CommonMtrMixin = CommonMtrMixin;\nfunction CommonMlabeledtrMixin(Base) {\n  return function (_super) {\n    __extends(class_2, _super);\n    function class_2() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(class_2.prototype, \"numCells\", {\n      get: function () {\n        return Math.max(0, this.childNodes.length - 1);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(class_2.prototype, \"labeled\", {\n      get: function () {\n        return true;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(class_2.prototype, \"tableCells\", {\n      get: function () {\n        return this.childNodes.slice(1);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    class_2.prototype.getChild = function (i) {\n      return this.childNodes[i + 1];\n    };\n    class_2.prototype.getChildBBoxes = function () {\n      return this.childNodes.slice(1).map(function (cell) {\n        return cell.getBBox();\n      });\n    };\n    return class_2;\n  }(Base);\n}\nexports.CommonMlabeledtrMixin = CommonMlabeledtrMixin;","map":{"version":3,"names":["CommonMtrMixin","Base","_super","__extends","class_1","Object","defineProperty","prototype","get","childNodes","length","getChild","i","getChildBBoxes","map","cell","getBBox","stretchChildren","HD","stretchy","children","labeled","slice","children_1","__values","children_1_1","next","done","mtd","value","child","canStretch","push","count","nodeCount","H","D","all","children_2","children_2_1","noStretch","stretch","dir","_d","h","d","stretchy_1","stretchy_1_1","coreMO","getStretchedVariant","exports","CommonMlabeledtrMixin","class_2","Math","max"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/output/common/Wrappers/mtr.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CcommonMtr wrapper mixin for the MmlMtr object\n *                and CommonMlabeledtr wrapper mixin for MmlMlabeledtr\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AnyWrapper, WrapperConstructor, Constructor} from '../Wrapper.js';\nimport {CommonMo} from './mo.js';\nimport {BBox} from '../../../util/BBox.js';\nimport {DIRECTION} from '../FontData.js';\n\n/*****************************************************************/\n/**\n * The CommonMtr interface\n *\n * @template C  The class for table cells\n */\nexport interface CommonMtr<C extends AnyWrapper> extends AnyWrapper {\n\n  /**\n   * The number of mtd's in the mtr\n   */\n  readonly numCells: number;\n\n  /**\n   * True if this is a labeled row\n   */\n  readonly labeled: boolean;\n\n  /**\n   * The child nodes that are part of the table (no label node)\n   */\n  readonly tableCells: C[];\n\n  /**\n   * @override;\n   */\n  childNodes: C[];\n\n  /**\n   * @param {number} i   The index of the child to get (skipping labels)\n   * @return {C}         The ith child node wrapper\n   */\n  getChild(i: number): C;\n\n  /**\n   * @return {BBox[]}  An array of the bounding boxes for the mtd's in the row\n   */\n  getChildBBoxes(): BBox[];\n\n  /**\n   * Handle vertical stretching of cells to match height of\n   *  other cells in the row.\n   *\n   * @param {number[]=} HD   The total height and depth for the row [H, D]\n   *\n   * If this isn't specified, the maximum height and depth is computed.\n   */\n  stretchChildren(HD?: number[]): void;\n\n}\n\n/**\n * Shorthand for the CommonMtr constructor\n *\n * @template C  The class for table cells\n */\nexport type MtrConstructor<C extends AnyWrapper> = Constructor<CommonMtr<C>>;\n\n/*****************************************************************/\n/**\n * The CommonMtr wrapper for the MmlMtr object\n *\n * @template C  The class for table cells\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMtrMixin<\n  C extends AnyWrapper,\n  T extends WrapperConstructor\n>(Base: T): MtrConstructor<C> & T {\n\n  return class extends Base {\n\n    /**\n     * @override\n     */\n    get fixesPWidth() {\n      return false;\n    }\n\n    /**\n     * @return {number}   The number of mtd's in the mtr\n     */\n    get numCells(): number {\n      return this.childNodes.length;\n    }\n\n    /**\n     * @return {boolean}   True if this is a labeled row\n     */\n    get labeled(): boolean {\n      return false;\n    }\n\n    /**\n     * @return {C[]}  The child nodes that are part of the table (no label node)\n     */\n    get tableCells(): C[] {\n      return this.childNodes;\n    }\n\n    /**\n     * @param {number} i   The index of the child to get (skipping labels)\n     * @return {C}         The ith child node wrapper\n     */\n    public getChild(i: number): C {\n      return this.childNodes[i];\n    }\n\n    /**\n     * @return {BBox[]}  An array of the bounding boxes for the mtd's in the row\n     */\n    public getChildBBoxes(): BBox[] {\n      return this.childNodes.map(cell => cell.getBBox());\n    }\n\n    /**\n     * Handle vertical stretching of cells to match height of\n     *  other cells in the row.\n     *\n     * @param {number[]} HD   The total height and depth for the row [H, D]\n     *\n     * If this isn't specified, the maximum height and depth is computed.\n     */\n    public stretchChildren(HD: number[] = null) {\n      let stretchy: AnyWrapper[] = [];\n      let children = (this.labeled ? this.childNodes.slice(1) : this.childNodes);\n      //\n      //  Locate and count the stretchy children\n      //\n      for (const mtd of children) {\n        const child = mtd.childNodes[0];\n        if (child.canStretch(DIRECTION.Vertical)) {\n          stretchy.push(child);\n        }\n      }\n      let count = stretchy.length;\n      let nodeCount = this.childNodes.length;\n      if (count && nodeCount > 1) {\n        if (HD === null) {\n          let H = 0, D = 0;\n          //\n          //  If all the children are stretchy, find the largest one,\n          //  otherwise, find the height and depth of the non-stretchy\n          //  children.\n          //\n          let all = (count > 1 && count === nodeCount);\n          for (const mtd of children) {\n            const child = mtd.childNodes[0];\n            const noStretch = (child.stretch.dir === DIRECTION.None);\n            if (all || noStretch) {\n              const {h, d} = child.getBBox(noStretch);\n              if (h > H) {\n                H = h;\n              }\n              if (d > D) {\n                D = d;\n              }\n            }\n          }\n          HD = [H, D];\n        }\n        //\n        //  Stretch the stretchable children\n        //\n        for (const child of stretchy) {\n          (child.coreMO() as CommonMo).getStretchedVariant(HD);\n        }\n      }\n    }\n\n  };\n\n}\n\n/*****************************************************************/\n/**\n * The CommonMlabeledtr interface\n *\n * @template C  The class for table cells\n */\nexport interface CommonMlabeledtr<C extends AnyWrapper> extends CommonMtr<C> {\n}\n\n/**\n * Shorthand for the CommonMlabeledtr constructor\n *\n * @template C  The class for table cells\n */\nexport type MlabeledtrConstructor<C extends AnyWrapper> = Constructor<CommonMlabeledtr<C>>;\n\n/*****************************************************************/\n/**\n * The CommonMlabeledtr wrapper mixin for the MmlMlabeledtr object\n *\n * @template C  The class for table cells\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMlabeledtrMixin<\n  C extends AnyWrapper,\n  T extends MtrConstructor<C>\n>(Base: T): MlabeledtrConstructor<C> & T {\n\n  return class extends Base {\n\n    /**\n     * @override\n     */\n    get numCells() {\n      //\n      //  Don't include the label mtd\n      //\n      return Math.max(0, this.childNodes.length - 1);\n    }\n\n    /**\n     * @override\n     */\n    get labeled() {\n      return true;\n    }\n\n    /**\n     * @override\n     */\n    get tableCells() {\n      return this.childNodes.slice(1) as C[];\n    }\n\n    /**\n     * @override\n     */\n    public getChild(i: number) {\n      return this.childNodes[i + 1] as C;\n    }\n\n    /**\n     * @override\n     */\n    public getChildBBoxes() {\n      //\n      //  Don't include the label mtd\n      //\n      return this.childNodes.slice(1).map(cell => cell.getBBox());\n    }\n\n  };\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}