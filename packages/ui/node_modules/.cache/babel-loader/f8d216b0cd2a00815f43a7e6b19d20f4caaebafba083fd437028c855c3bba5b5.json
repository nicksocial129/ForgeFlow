{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMglyphMixin = void 0;\nfunction CommonMglyphMixin(Base) {\n  return function (_super) {\n    __extends(class_1, _super);\n    function class_1() {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var _this = _super.apply(this, __spreadArray([], __read(args), false)) || this;\n      _this.getParameters();\n      return _this;\n    }\n    class_1.prototype.getParameters = function () {\n      var _a = this.node.attributes.getList('width', 'height', 'valign', 'src', 'index'),\n        width = _a.width,\n        height = _a.height,\n        valign = _a.valign,\n        src = _a.src,\n        index = _a.index;\n      if (src) {\n        this.width = width === 'auto' ? 1 : this.length2em(width);\n        this.height = height === 'auto' ? 1 : this.length2em(height);\n        this.valign = this.length2em(valign || '0');\n      } else {\n        var text = String.fromCodePoint(parseInt(index));\n        var mmlFactory = this.node.factory;\n        this.charWrapper = this.wrap(mmlFactory.create('text').setText(text));\n        this.charWrapper.parent = this;\n      }\n    };\n    class_1.prototype.computeBBox = function (bbox, _recompute) {\n      if (_recompute === void 0) {\n        _recompute = false;\n      }\n      if (this.charWrapper) {\n        bbox.updateFrom(this.charWrapper.getBBox());\n      } else {\n        bbox.w = this.width;\n        bbox.h = this.height + this.valign;\n        bbox.d = -this.valign;\n      }\n    };\n    return class_1;\n  }(Base);\n}\nexports.CommonMglyphMixin = CommonMglyphMixin;","map":{"version":3,"names":["CommonMglyphMixin","Base","_super","__extends","class_1","args","_i","arguments","length","_this","apply","__spreadArray","__read","getParameters","prototype","_a","node","attributes","getList","width","height","valign","src","index","length2em","text","String","fromCodePoint","parseInt","mmlFactory","factory","charWrapper","wrap","create","setText","parent","computeBBox","bbox","_recompute","updateFrom","getBBox","w","h","d","exports"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/output/common/Wrappers/mglyph.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CommonMglyph wrapper mixin for the MmlMglyph object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AnyWrapper, WrapperConstructor, Constructor} from '../Wrapper.js';\nimport {CommonTextNode} from './TextNode.js';\nimport {TextNode} from '../../../core/MmlTree/MmlNode.js';\nimport {BBox} from '../../../util/BBox.js';\n\n/*****************************************************************/\n/**\n * The CommonMglyph interface\n */\nexport interface CommonMglyph extends AnyWrapper {\n  /**\n   * The image's width converted to em's\n   */\n  width: number;\n  /**\n   * The image's height converted to em's\n   */\n  height: number;\n  /*\n   * The image's valign values converted to em's\n   */\n  valign: number;\n\n  /**\n   * TextNode used for deprecated fontfamily/index use case\n   */\n  charWrapper: CommonTextNode;\n\n  /**\n   * Obtain the width, height, and valign.\n   * Note:  Currently, the width and height must be specified explicitly, or they default to 1em\n   *   Since loading the image may be asynchronous, it would require a restart.\n   *   A future extension could implement this either by subclassing this object, or\n   *   perhaps as a post-filter on the MathML input jax that adds the needed dimensions\n   */\n  getParameters(): void;\n}\n\n/**\n * Shorthand for the CommonMglyph constructor\n */\nexport type MglyphConstructor = Constructor<CommonMglyph>;\n\n/*****************************************************************/\n/**\n * The CommonMglyph wrapper mixin for the MmlMglyph object\n *\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMglyphMixin<T extends WrapperConstructor>(Base: T): MglyphConstructor & T {\n\n  return class extends Base {\n\n    /**\n     * @override\n     */\n    public width: number;\n    /**\n     * @override\n     */\n    public height: number;\n    /**\n     * @override\n     */\n    public valign: number;\n\n    /**\n     * @override\n     */\n    public charWrapper: CommonTextNode;\n\n    /**\n     * @override\n     * @constructor\n     */\n    constructor(...args: any[]) {\n      super(...args);\n      this.getParameters();\n    }\n\n    /**\n     * @override\n     */\n    public getParameters() {\n      const {width, height, valign, src, index} =\n        this.node.attributes.getList('width', 'height', 'valign', 'src', 'index');\n      if (src) {\n        this.width = (width === 'auto' ? 1 : this.length2em(width));\n        this.height = (height === 'auto' ? 1 : this.length2em(height));\n        this.valign = this.length2em(valign || '0');\n      } else {\n        const text = String.fromCodePoint(parseInt(index as string));\n        const mmlFactory = this.node.factory;\n        this.charWrapper = this.wrap((mmlFactory.create('text') as TextNode).setText(text));\n        this.charWrapper.parent = this as any as AnyWrapper;\n      }\n    }\n\n    /**\n     * @override\n     */\n    public computeBBox(bbox: BBox, _recompute: boolean = false) {\n      if (this.charWrapper) {\n        bbox.updateFrom(this.charWrapper.getBBox());\n      } else {\n        bbox.w = this.width;\n        bbox.h = this.height + this.valign;\n        bbox.d = -this.valign;\n      }\n    }\n\n  };\n\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEA,SAAgBA,iBAAiBA,CAA+BC,IAAO;EAErE,iBAAAC,MAAA;IAAqBC,SAAA,CAAAC,OAAA,EAAAF,MAAA;IAwBnB,SAAAE,QAAA;MAAY,IAAAC,IAAA;WAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;QAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;MAAZ,IAAAG,KAAA,GAAAP,MAAA,CAAAQ,KAAA,OAAAC,aAAA,KAAAC,MAAA,CACWP,IAAI;MACbI,KAAI,CAACI,aAAa,EAAE;;IACtB;IAKOT,OAAA,CAAAU,SAAA,CAAAD,aAAa,GAApB;MACQ,IAAAE,EAAA,GACJ,IAAI,CAACC,IAAI,CAACC,UAAU,CAACC,OAAO,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC;QADpEC,KAAK,GAAAJ,EAAA,CAAAI,KAAA;QAAEC,MAAM,GAAAL,EAAA,CAAAK,MAAA;QAAEC,MAAM,GAAAN,EAAA,CAAAM,MAAA;QAAEC,GAAG,GAAAP,EAAA,CAAAO,GAAA;QAAEC,KAAK,GAAAR,EAAA,CAAAQ,KACmC;MAC3E,IAAID,GAAG,EAAE;QACP,IAAI,CAACH,KAAK,GAAIA,KAAK,KAAK,MAAM,GAAG,CAAC,GAAG,IAAI,CAACK,SAAS,CAACL,KAAK,CAAE;QAC3D,IAAI,CAACC,MAAM,GAAIA,MAAM,KAAK,MAAM,GAAG,CAAC,GAAG,IAAI,CAACI,SAAS,CAACJ,MAAM,CAAE;QAC9D,IAAI,CAACC,MAAM,GAAG,IAAI,CAACG,SAAS,CAACH,MAAM,IAAI,GAAG,CAAC;OAC5C,MAAM;QACL,IAAMI,IAAI,GAAGC,MAAM,CAACC,aAAa,CAACC,QAAQ,CAACL,KAAe,CAAC,CAAC;QAC5D,IAAMM,UAAU,GAAG,IAAI,CAACb,IAAI,CAACc,OAAO;QACpC,IAAI,CAACC,WAAW,GAAG,IAAI,CAACC,IAAI,CAAEH,UAAU,CAACI,MAAM,CAAC,MAAM,CAAc,CAACC,OAAO,CAACT,IAAI,CAAC,CAAC;QACnF,IAAI,CAACM,WAAW,CAACI,MAAM,GAAG,IAAyB;;IAEvD,CAAC;IAKM/B,OAAA,CAAAU,SAAA,CAAAsB,WAAW,GAAlB,UAAmBC,IAAU,EAAEC,UAA2B;MAA3B,IAAAA,UAAA;QAAAA,UAAA,QAA2B;MAAA;MACxD,IAAI,IAAI,CAACP,WAAW,EAAE;QACpBM,IAAI,CAACE,UAAU,CAAC,IAAI,CAACR,WAAW,CAACS,OAAO,EAAE,CAAC;OAC5C,MAAM;QACLH,IAAI,CAACI,CAAC,GAAG,IAAI,CAACtB,KAAK;QACnBkB,IAAI,CAACK,CAAC,GAAG,IAAI,CAACtB,MAAM,GAAG,IAAI,CAACC,MAAM;QAClCgB,IAAI,CAACM,CAAC,GAAG,CAAC,IAAI,CAACtB,MAAM;;IAEzB,CAAC;IAEH,OAAAjB,OAAC;EAAD,CAAC,CA5DoBH,IAAI;AA8D3B;AAhEA2C,OAAA,CAAA5C,iBAAA,GAAAA,iBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}