{"ast":null,"code":"import{useEffect,useRef,useState,useCallback,useContext}from'react';import ReactFlow,{addEdge,Controls,Background,useNodesState,useEdgesState}from'reactflow';import'reactflow/dist/style.css';import{useDispatch,useSelector}from'react-redux';import{useNavigate,useLocation}from'react-router-dom';import{usePrompt}from'../../utils/usePrompt';import{REMOVE_DIRTY,SET_DIRTY,SET_CHATFLOW,enqueueSnackbar as enqueueSnackbarAction,closeSnackbar as closeSnackbarAction}from'store/actions';import{omit,cloneDeep}from'lodash';// material-ui\nimport{Toolbar,Box,AppBar,Button}from'@mui/material';import{useTheme}from'@mui/material/styles';// project imports\nimport CanvasNode from'./CanvasNode';import ButtonEdge from'./ButtonEdge';import CanvasHeader from'./CanvasHeader';import AddNodes from'./AddNodes';import ConfirmDialog from'ui-component/dialog/ConfirmDialog';import{ChatPopUp}from'views/chatmessage/ChatPopUp';import{VectorStorePopUp}from'views/vectorstore/VectorStorePopUp';import{flowContext}from'store/context/ReactFlowContext';// API\nimport nodesApi from'api/nodes';import chatflowsApi from'api/chatflows';// Hooks\nimport useApi from'hooks/useApi';import useConfirm from'hooks/useConfirm';// icons\nimport{IconX}from'@tabler/icons';// utils\nimport{getUniqueNodeId,initNode,getEdgeLabelName,rearrangeToolsOrdering,getUpsertDetails}from'utils/genericHelper';import useNotifier from'utils/useNotifier';// const\nimport{FLOWISE_CREDENTIAL_ID}from'store/constant';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const nodeTypes={customNode:CanvasNode};const edgeTypes={buttonedge:ButtonEdge};// ==============================|| CANVAS ||============================== //\nconst Canvas=()=>{const theme=useTheme();const navigate=useNavigate();const{state}=useLocation();const templateFlowData=state?state.templateFlowData:'';const URLpath=document.location.pathname.toString().split('/');const chatflowId=URLpath[URLpath.length-1]==='canvas'?'':URLpath[URLpath.length-1];const{confirm}=useConfirm();const dispatch=useDispatch();const canvas=useSelector(state=>state.canvas);const[canvasDataStore,setCanvasDataStore]=useState(canvas);const[chatflow,setChatflow]=useState(null);const{reactFlowInstance,setReactFlowInstance}=useContext(flowContext);// ==============================|| Snackbar ||============================== //\nuseNotifier();const enqueueSnackbar=function(){return dispatch(enqueueSnackbarAction(...arguments));};const closeSnackbar=function(){return dispatch(closeSnackbarAction(...arguments));};// ==============================|| ReactFlow ||============================== //\nconst[nodes,setNodes,onNodesChange]=useNodesState();const[edges,setEdges,onEdgesChange]=useEdgesState();const[selectedNode,setSelectedNode]=useState(null);const[isUpsertButtonEnabled,setIsUpsertButtonEnabled]=useState(false);const reactFlowWrapper=useRef(null);// ==============================|| Chatflow API ||============================== //\nconst getNodesApi=useApi(nodesApi.getAllNodes);const createNewChatflowApi=useApi(chatflowsApi.createNewChatflow);const testChatflowApi=useApi(chatflowsApi.testChatflow);const updateChatflowApi=useApi(chatflowsApi.updateChatflow);const getSpecificChatflowApi=useApi(chatflowsApi.getSpecificChatflow);// ==============================|| Events & Actions ||============================== //\nconst onConnect=params=>{const newEdge={...params,type:'buttonedge',id:\"\".concat(params.source,\"-\").concat(params.sourceHandle,\"-\").concat(params.target,\"-\").concat(params.targetHandle),data:{label:getEdgeLabelName(params.sourceHandle)}};const targetNodeId=params.targetHandle.split('-')[0];const sourceNodeId=params.sourceHandle.split('-')[0];const targetInput=params.targetHandle.split('-')[2];setNodes(nds=>nds.map(node=>{if(node.id===targetNodeId){setTimeout(()=>setDirty(),0);let value;const inputAnchor=node.data.inputAnchors.find(ancr=>ancr.name===targetInput);const inputParam=node.data.inputParams.find(param=>param.name===targetInput);if(inputAnchor&&inputAnchor.list){const newValues=node.data.inputs[targetInput]||[];if(targetInput==='tools'){rearrangeToolsOrdering(newValues,sourceNodeId);}else{newValues.push(\"{{\".concat(sourceNodeId,\".data.instance}}\"));}value=newValues;}else if(inputParam&&inputParam.acceptVariable){value=node.data.inputs[targetInput]||'';}else{value=\"{{\".concat(sourceNodeId,\".data.instance}}\");}node.data={...node.data,inputs:{...node.data.inputs,[targetInput]:value}};}return node;}));setEdges(eds=>addEdge(newEdge,eds));};const handleLoadFlow=file=>{try{const flowData=JSON.parse(file);const nodes=flowData.nodes||[];setNodes(nodes);setEdges(flowData.edges||[]);setDirty();}catch(e){console.error(e);}};const handleDeleteFlow=async()=>{const confirmPayload={title:\"Delete\",description:\"Delete chatflow \".concat(chatflow.name,\"?\"),confirmButtonName:'Delete',cancelButtonName:'Cancel'};const isConfirmed=await confirm(confirmPayload);if(isConfirmed){try{await chatflowsApi.deleteChatflow(chatflow.id);localStorage.removeItem(\"\".concat(chatflow.id,\"_INTERNAL\"));navigate('/');}catch(error){const errorData=error.response.data||\"\".concat(error.response.status,\": \").concat(error.response.statusText);enqueueSnackbar({message:errorData,options:{key:new Date().getTime()+Math.random(),variant:'error',persist:true,action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});}}};const handleSaveFlow=chatflowName=>{if(reactFlowInstance){const nodes=reactFlowInstance.getNodes().map(node=>{const nodeData=cloneDeep(node.data);if(Object.prototype.hasOwnProperty.call(nodeData.inputs,FLOWISE_CREDENTIAL_ID)){nodeData.credential=nodeData.inputs[FLOWISE_CREDENTIAL_ID];nodeData.inputs=omit(nodeData.inputs,[FLOWISE_CREDENTIAL_ID]);}node.data={...nodeData,selected:false};return node;});const rfInstanceObject=reactFlowInstance.toObject();rfInstanceObject.nodes=nodes;const flowData=JSON.stringify(rfInstanceObject);if(!chatflow.id){const newChatflowBody={name:chatflowName,deployed:false,isPublic:false,flowData};createNewChatflowApi.request(newChatflowBody);}else{const updateBody={name:chatflowName,flowData};updateChatflowApi.request(chatflow.id,updateBody);}}};// eslint-disable-next-line\nconst onNodeClick=useCallback((event,clickedNode)=>{setSelectedNode(clickedNode);setNodes(nds=>nds.map(node=>{if(node.id===clickedNode.id){node.data={...node.data,selected:true};}else{node.data={...node.data,selected:false};}return node;}));});const onDragOver=useCallback(event=>{event.preventDefault();event.dataTransfer.dropEffect='move';},[]);const onDrop=useCallback(event=>{event.preventDefault();const reactFlowBounds=reactFlowWrapper.current.getBoundingClientRect();let nodeData=event.dataTransfer.getData('application/reactflow');// check if the dropped element is valid\nif(typeof nodeData==='undefined'||!nodeData){return;}nodeData=JSON.parse(nodeData);const position=reactFlowInstance.project({x:event.clientX-reactFlowBounds.left-100,y:event.clientY-reactFlowBounds.top-50});const newNodeId=getUniqueNodeId(nodeData,reactFlowInstance.getNodes());const newNode={id:newNodeId,position,type:'customNode',data:initNode(nodeData,newNodeId)};setSelectedNode(newNode);setNodes(nds=>nds.concat(newNode).map(node=>{if(node.id===newNode.id){node.data={...node.data,selected:true};}else{node.data={...node.data,selected:false};}return node;}));setTimeout(()=>setDirty(),0);},// eslint-disable-next-line\n[reactFlowInstance]);const saveChatflowSuccess=()=>{dispatch({type:REMOVE_DIRTY});enqueueSnackbar({message:'Chatflow saved',options:{key:new Date().getTime()+Math.random(),variant:'success',action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});};const errorFailed=message=>{enqueueSnackbar({message,options:{key:new Date().getTime()+Math.random(),variant:'error',persist:true,action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});};const setDirty=()=>{dispatch({type:SET_DIRTY});};const checkIfUpsertAvailable=(nodes,edges)=>{const upsertNodeDetails=getUpsertDetails(nodes,edges);if(upsertNodeDetails.length)setIsUpsertButtonEnabled(true);else setIsUpsertButtonEnabled(false);};// ==============================|| useEffect ||============================== //\n// Get specific chatflow successful\nuseEffect(()=>{if(getSpecificChatflowApi.data){const chatflow=getSpecificChatflowApi.data;const initialFlow=chatflow.flowData?JSON.parse(chatflow.flowData):[];setNodes(initialFlow.nodes||[]);setEdges(initialFlow.edges||[]);dispatch({type:SET_CHATFLOW,chatflow});}else if(getSpecificChatflowApi.error){const error=getSpecificChatflowApi.error;const errorData=error.response.data||\"\".concat(error.response.status,\": \").concat(error.response.statusText);errorFailed(\"Failed to retrieve chatflow: \".concat(errorData));}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[getSpecificChatflowApi.data,getSpecificChatflowApi.error]);// Create new chatflow successful\nuseEffect(()=>{if(createNewChatflowApi.data){const chatflow=createNewChatflowApi.data;dispatch({type:SET_CHATFLOW,chatflow});saveChatflowSuccess();window.history.replaceState(null,null,\"/canvas/\".concat(chatflow.id));}else if(createNewChatflowApi.error){const error=createNewChatflowApi.error;const errorData=error.response.data||\"\".concat(error.response.status,\": \").concat(error.response.statusText);errorFailed(\"Failed to save chatflow: \".concat(errorData));}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[createNewChatflowApi.data,createNewChatflowApi.error]);// Update chatflow successful\nuseEffect(()=>{if(updateChatflowApi.data){dispatch({type:SET_CHATFLOW,chatflow:updateChatflowApi.data});saveChatflowSuccess();}else if(updateChatflowApi.error){const error=updateChatflowApi.error;const errorData=error.response.data||\"\".concat(error.response.status,\": \").concat(error.response.statusText);errorFailed(\"Failed to save chatflow: \".concat(errorData));}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[updateChatflowApi.data,updateChatflowApi.error]);// Test chatflow failed\nuseEffect(()=>{if(testChatflowApi.error){enqueueSnackbar({message:'Test chatflow failed',options:{key:new Date().getTime()+Math.random(),variant:'error',persist:true,action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[testChatflowApi.error]);useEffect(()=>{setChatflow(canvasDataStore.chatflow);if(canvasDataStore.chatflow){const flowData=canvasDataStore.chatflow.flowData?JSON.parse(canvasDataStore.chatflow.flowData):[];checkIfUpsertAvailable(flowData.nodes||[],flowData.edges||[]);}},[canvasDataStore.chatflow]);// Initialization\nuseEffect(()=>{if(chatflowId){getSpecificChatflowApi.request(chatflowId);}else{if(localStorage.getItem('duplicatedFlowData')){handleLoadFlow(localStorage.getItem('duplicatedFlowData'));setTimeout(()=>localStorage.removeItem('duplicatedFlowData'),0);}else{setNodes([]);setEdges([]);}dispatch({type:SET_CHATFLOW,chatflow:{name:'Untitled chatflow'}});}getNodesApi.request();// Clear dirty state before leaving and remove any ongoing test triggers and webhooks\nreturn()=>{setTimeout(()=>dispatch({type:REMOVE_DIRTY}),0);};// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);useEffect(()=>{setCanvasDataStore(canvas);},[canvas]);useEffect(()=>{function handlePaste(e){const pasteData=e.clipboardData.getData('text');//TODO: prevent paste event when input focused, temporary fix: catch chatflow syntax\nif(pasteData.includes('{\"nodes\":[')&&pasteData.includes('],\"edges\":[')){handleLoadFlow(pasteData);}}window.addEventListener('paste',handlePaste);return()=>{window.removeEventListener('paste',handlePaste);};// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);useEffect(()=>{if(templateFlowData&&templateFlowData.includes('\"nodes\":[')&&templateFlowData.includes('],\"edges\":[')){handleLoadFlow(templateFlowData);}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[templateFlowData]);usePrompt('You have unsaved changes! Do you want to navigate away?',canvasDataStore.isDirty);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(AppBar,{enableColorOnDark:true,position:\"fixed\",color:\"inherit\",elevation:1,sx:{bgcolor:theme.palette.background.default},children:/*#__PURE__*/_jsx(Toolbar,{children:/*#__PURE__*/_jsx(CanvasHeader,{chatflow:chatflow,handleSaveFlow:handleSaveFlow,handleDeleteFlow:handleDeleteFlow,handleLoadFlow:handleLoadFlow})})}),/*#__PURE__*/_jsx(Box,{sx:{pt:'70px',height:'100vh',width:'100%'},children:/*#__PURE__*/_jsx(\"div\",{className:\"reactflow-parent-wrapper\",children:/*#__PURE__*/_jsx(\"div\",{className:\"reactflow-wrapper\",ref:reactFlowWrapper,children:/*#__PURE__*/_jsxs(ReactFlow,{nodes:nodes,edges:edges,onNodesChange:onNodesChange,onNodeClick:onNodeClick,onEdgesChange:onEdgesChange,onDrop:onDrop,onDragOver:onDragOver,onNodeDragStop:setDirty,nodeTypes:nodeTypes,edgeTypes:edgeTypes,onConnect:onConnect,onInit:setReactFlowInstance,fitView:true,deleteKeyCode:canvas.canvasDialogShow?null:['Backspace','Delete'],minZoom:0.1,children:[/*#__PURE__*/_jsx(Controls,{style:{display:'flex',flexDirection:'row',left:'50%',transform:'translate(-50%, -50%)'}}),/*#__PURE__*/_jsx(Background,{color:\"#aaa\",gap:16}),/*#__PURE__*/_jsx(AddNodes,{nodesData:getNodesApi.data,node:selectedNode}),isUpsertButtonEnabled&&/*#__PURE__*/_jsx(VectorStorePopUp,{chatflowid:chatflowId}),/*#__PURE__*/_jsx(ChatPopUp,{chatflowid:chatflowId})]})})})}),/*#__PURE__*/_jsx(ConfirmDialog,{})]})});};export default Canvas;","map":{"version":3,"names":["useEffect","useRef","useState","useCallback","useContext","ReactFlow","addEdge","Controls","Background","useNodesState","useEdgesState","useDispatch","useSelector","useNavigate","useLocation","usePrompt","REMOVE_DIRTY","SET_DIRTY","SET_CHATFLOW","enqueueSnackbar","enqueueSnackbarAction","closeSnackbar","closeSnackbarAction","omit","cloneDeep","Toolbar","Box","AppBar","Button","useTheme","CanvasNode","ButtonEdge","CanvasHeader","AddNodes","ConfirmDialog","ChatPopUp","VectorStorePopUp","flowContext","nodesApi","chatflowsApi","useApi","useConfirm","IconX","getUniqueNodeId","initNode","getEdgeLabelName","rearrangeToolsOrdering","getUpsertDetails","useNotifier","FLOWISE_CREDENTIAL_ID","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","nodeTypes","customNode","edgeTypes","buttonedge","Canvas","theme","navigate","state","templateFlowData","URLpath","document","location","pathname","toString","split","chatflowId","length","confirm","dispatch","canvas","canvasDataStore","setCanvasDataStore","chatflow","setChatflow","reactFlowInstance","setReactFlowInstance","arguments","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","isUpsertButtonEnabled","setIsUpsertButtonEnabled","reactFlowWrapper","getNodesApi","getAllNodes","createNewChatflowApi","createNewChatflow","testChatflowApi","testChatflow","updateChatflowApi","updateChatflow","getSpecificChatflowApi","getSpecificChatflow","onConnect","params","newEdge","type","id","concat","source","sourceHandle","target","targetHandle","data","label","targetNodeId","sourceNodeId","targetInput","nds","map","node","setTimeout","setDirty","value","inputAnchor","inputAnchors","find","ancr","name","inputParam","inputParams","param","list","newValues","inputs","push","acceptVariable","eds","handleLoadFlow","file","flowData","JSON","parse","e","console","error","handleDeleteFlow","confirmPayload","title","description","confirmButtonName","cancelButtonName","isConfirmed","deleteChatflow","localStorage","removeItem","errorData","response","status","statusText","message","options","key","Date","getTime","Math","random","variant","persist","action","style","color","onClick","children","handleSaveFlow","chatflowName","getNodes","nodeData","Object","prototype","hasOwnProperty","call","credential","selected","rfInstanceObject","toObject","stringify","newChatflowBody","deployed","isPublic","request","updateBody","onNodeClick","event","clickedNode","onDragOver","preventDefault","dataTransfer","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","getData","position","project","x","clientX","left","y","clientY","top","newNodeId","newNode","saveChatflowSuccess","errorFailed","checkIfUpsertAvailable","upsertNodeDetails","initialFlow","window","history","replaceState","getItem","handlePaste","pasteData","clipboardData","includes","addEventListener","removeEventListener","isDirty","enableColorOnDark","elevation","sx","bgcolor","palette","background","default","pt","height","width","className","ref","onNodeDragStop","onInit","fitView","deleteKeyCode","canvasDialogShow","minZoom","display","flexDirection","transform","gap","nodesData","chatflowid"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/packages/ui/src/views/canvas/index.js"],"sourcesContent":["import { useEffect, useRef, useState, useCallback, useContext } from 'react'\nimport ReactFlow, { addEdge, Controls, Background, useNodesState, useEdgesState } from 'reactflow'\nimport 'reactflow/dist/style.css'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { usePrompt } from '../../utils/usePrompt'\nimport {\n    REMOVE_DIRTY,\n    SET_DIRTY,\n    SET_CHATFLOW,\n    enqueueSnackbar as enqueueSnackbarAction,\n    closeSnackbar as closeSnackbarAction\n} from 'store/actions'\nimport { omit, cloneDeep } from 'lodash'\n\n// material-ui\nimport { Toolbar, Box, AppBar, Button } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\n// project imports\nimport CanvasNode from './CanvasNode'\nimport ButtonEdge from './ButtonEdge'\nimport CanvasHeader from './CanvasHeader'\nimport AddNodes from './AddNodes'\nimport ConfirmDialog from 'ui-component/dialog/ConfirmDialog'\nimport { ChatPopUp } from 'views/chatmessage/ChatPopUp'\nimport { VectorStorePopUp } from 'views/vectorstore/VectorStorePopUp'\nimport { flowContext } from 'store/context/ReactFlowContext'\n\n// API\nimport nodesApi from 'api/nodes'\nimport chatflowsApi from 'api/chatflows'\n\n// Hooks\nimport useApi from 'hooks/useApi'\nimport useConfirm from 'hooks/useConfirm'\n\n// icons\nimport { IconX } from '@tabler/icons'\n\n// utils\nimport { getUniqueNodeId, initNode, getEdgeLabelName, rearrangeToolsOrdering, getUpsertDetails } from 'utils/genericHelper'\nimport useNotifier from 'utils/useNotifier'\n\n// const\nimport { FLOWISE_CREDENTIAL_ID } from 'store/constant'\n\nconst nodeTypes = { customNode: CanvasNode }\nconst edgeTypes = { buttonedge: ButtonEdge }\n\n// ==============================|| CANVAS ||============================== //\n\nconst Canvas = () => {\n    const theme = useTheme()\n    const navigate = useNavigate()\n\n    const { state } = useLocation()\n    const templateFlowData = state ? state.templateFlowData : ''\n\n    const URLpath = document.location.pathname.toString().split('/')\n    const chatflowId = URLpath[URLpath.length - 1] === 'canvas' ? '' : URLpath[URLpath.length - 1]\n\n    const { confirm } = useConfirm()\n\n    const dispatch = useDispatch()\n    const canvas = useSelector((state) => state.canvas)\n    const [canvasDataStore, setCanvasDataStore] = useState(canvas)\n    const [chatflow, setChatflow] = useState(null)\n\n    const { reactFlowInstance, setReactFlowInstance } = useContext(flowContext)\n\n    // ==============================|| Snackbar ||============================== //\n\n    useNotifier()\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    // ==============================|| ReactFlow ||============================== //\n\n    const [nodes, setNodes, onNodesChange] = useNodesState()\n    const [edges, setEdges, onEdgesChange] = useEdgesState()\n\n    const [selectedNode, setSelectedNode] = useState(null)\n    const [isUpsertButtonEnabled, setIsUpsertButtonEnabled] = useState(false)\n\n    const reactFlowWrapper = useRef(null)\n\n    // ==============================|| Chatflow API ||============================== //\n\n    const getNodesApi = useApi(nodesApi.getAllNodes)\n    const createNewChatflowApi = useApi(chatflowsApi.createNewChatflow)\n    const testChatflowApi = useApi(chatflowsApi.testChatflow)\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\n    const getSpecificChatflowApi = useApi(chatflowsApi.getSpecificChatflow)\n\n    // ==============================|| Events & Actions ||============================== //\n\n    const onConnect = (params) => {\n        const newEdge = {\n            ...params,\n            type: 'buttonedge',\n            id: `${params.source}-${params.sourceHandle}-${params.target}-${params.targetHandle}`,\n            data: { label: getEdgeLabelName(params.sourceHandle) }\n        }\n\n        const targetNodeId = params.targetHandle.split('-')[0]\n        const sourceNodeId = params.sourceHandle.split('-')[0]\n        const targetInput = params.targetHandle.split('-')[2]\n\n        setNodes((nds) =>\n            nds.map((node) => {\n                if (node.id === targetNodeId) {\n                    setTimeout(() => setDirty(), 0)\n                    let value\n                    const inputAnchor = node.data.inputAnchors.find((ancr) => ancr.name === targetInput)\n                    const inputParam = node.data.inputParams.find((param) => param.name === targetInput)\n\n                    if (inputAnchor && inputAnchor.list) {\n                        const newValues = node.data.inputs[targetInput] || []\n                        if (targetInput === 'tools') {\n                            rearrangeToolsOrdering(newValues, sourceNodeId)\n                        } else {\n                            newValues.push(`{{${sourceNodeId}.data.instance}}`)\n                        }\n                        value = newValues\n                    } else if (inputParam && inputParam.acceptVariable) {\n                        value = node.data.inputs[targetInput] || ''\n                    } else {\n                        value = `{{${sourceNodeId}.data.instance}}`\n                    }\n                    node.data = {\n                        ...node.data,\n                        inputs: {\n                            ...node.data.inputs,\n                            [targetInput]: value\n                        }\n                    }\n                }\n                return node\n            })\n        )\n\n        setEdges((eds) => addEdge(newEdge, eds))\n    }\n\n    const handleLoadFlow = (file) => {\n        try {\n            const flowData = JSON.parse(file)\n            const nodes = flowData.nodes || []\n\n            setNodes(nodes)\n            setEdges(flowData.edges || [])\n            setDirty()\n        } catch (e) {\n            console.error(e)\n        }\n    }\n\n    const handleDeleteFlow = async () => {\n        const confirmPayload = {\n            title: `Delete`,\n            description: `Delete chatflow ${chatflow.name}?`,\n            confirmButtonName: 'Delete',\n            cancelButtonName: 'Cancel'\n        }\n        const isConfirmed = await confirm(confirmPayload)\n\n        if (isConfirmed) {\n            try {\n                await chatflowsApi.deleteChatflow(chatflow.id)\n                localStorage.removeItem(`${chatflow.id}_INTERNAL`)\n                navigate('/')\n            } catch (error) {\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n                enqueueSnackbar({\n                    message: errorData,\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'error',\n                        persist: true,\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n            }\n        }\n    }\n\n    const handleSaveFlow = (chatflowName) => {\n        if (reactFlowInstance) {\n            const nodes = reactFlowInstance.getNodes().map((node) => {\n                const nodeData = cloneDeep(node.data)\n                if (Object.prototype.hasOwnProperty.call(nodeData.inputs, FLOWISE_CREDENTIAL_ID)) {\n                    nodeData.credential = nodeData.inputs[FLOWISE_CREDENTIAL_ID]\n                    nodeData.inputs = omit(nodeData.inputs, [FLOWISE_CREDENTIAL_ID])\n                }\n                node.data = {\n                    ...nodeData,\n                    selected: false\n                }\n                return node\n            })\n\n            const rfInstanceObject = reactFlowInstance.toObject()\n            rfInstanceObject.nodes = nodes\n            const flowData = JSON.stringify(rfInstanceObject)\n\n            if (!chatflow.id) {\n                const newChatflowBody = {\n                    name: chatflowName,\n                    deployed: false,\n                    isPublic: false,\n                    flowData\n                }\n                createNewChatflowApi.request(newChatflowBody)\n            } else {\n                const updateBody = {\n                    name: chatflowName,\n                    flowData\n                }\n                updateChatflowApi.request(chatflow.id, updateBody)\n            }\n        }\n    }\n\n    // eslint-disable-next-line\n    const onNodeClick = useCallback((event, clickedNode) => {\n        setSelectedNode(clickedNode)\n        setNodes((nds) =>\n            nds.map((node) => {\n                if (node.id === clickedNode.id) {\n                    node.data = {\n                        ...node.data,\n                        selected: true\n                    }\n                } else {\n                    node.data = {\n                        ...node.data,\n                        selected: false\n                    }\n                }\n\n                return node\n            })\n        )\n    })\n\n    const onDragOver = useCallback((event) => {\n        event.preventDefault()\n        event.dataTransfer.dropEffect = 'move'\n    }, [])\n\n    const onDrop = useCallback(\n        (event) => {\n            event.preventDefault()\n            const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect()\n            let nodeData = event.dataTransfer.getData('application/reactflow')\n\n            // check if the dropped element is valid\n            if (typeof nodeData === 'undefined' || !nodeData) {\n                return\n            }\n\n            nodeData = JSON.parse(nodeData)\n\n            const position = reactFlowInstance.project({\n                x: event.clientX - reactFlowBounds.left - 100,\n                y: event.clientY - reactFlowBounds.top - 50\n            })\n\n            const newNodeId = getUniqueNodeId(nodeData, reactFlowInstance.getNodes())\n\n            const newNode = {\n                id: newNodeId,\n                position,\n                type: 'customNode',\n                data: initNode(nodeData, newNodeId)\n            }\n\n            setSelectedNode(newNode)\n            setNodes((nds) =>\n                nds.concat(newNode).map((node) => {\n                    if (node.id === newNode.id) {\n                        node.data = {\n                            ...node.data,\n                            selected: true\n                        }\n                    } else {\n                        node.data = {\n                            ...node.data,\n                            selected: false\n                        }\n                    }\n\n                    return node\n                })\n            )\n            setTimeout(() => setDirty(), 0)\n        },\n\n        // eslint-disable-next-line\n        [reactFlowInstance]\n    )\n\n    const saveChatflowSuccess = () => {\n        dispatch({ type: REMOVE_DIRTY })\n        enqueueSnackbar({\n            message: 'Chatflow saved',\n            options: {\n                key: new Date().getTime() + Math.random(),\n                variant: 'success',\n                action: (key) => (\n                    <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                        <IconX />\n                    </Button>\n                )\n            }\n        })\n    }\n\n    const errorFailed = (message) => {\n        enqueueSnackbar({\n            message,\n            options: {\n                key: new Date().getTime() + Math.random(),\n                variant: 'error',\n                persist: true,\n                action: (key) => (\n                    <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                        <IconX />\n                    </Button>\n                )\n            }\n        })\n    }\n\n    const setDirty = () => {\n        dispatch({ type: SET_DIRTY })\n    }\n\n    const checkIfUpsertAvailable = (nodes, edges) => {\n        const upsertNodeDetails = getUpsertDetails(nodes, edges)\n        if (upsertNodeDetails.length) setIsUpsertButtonEnabled(true)\n        else setIsUpsertButtonEnabled(false)\n    }\n\n    // ==============================|| useEffect ||============================== //\n\n    // Get specific chatflow successful\n    useEffect(() => {\n        if (getSpecificChatflowApi.data) {\n            const chatflow = getSpecificChatflowApi.data\n            const initialFlow = chatflow.flowData ? JSON.parse(chatflow.flowData) : []\n            setNodes(initialFlow.nodes || [])\n            setEdges(initialFlow.edges || [])\n            dispatch({ type: SET_CHATFLOW, chatflow })\n        } else if (getSpecificChatflowApi.error) {\n            const error = getSpecificChatflowApi.error\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            errorFailed(`Failed to retrieve chatflow: ${errorData}`)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getSpecificChatflowApi.data, getSpecificChatflowApi.error])\n\n    // Create new chatflow successful\n    useEffect(() => {\n        if (createNewChatflowApi.data) {\n            const chatflow = createNewChatflowApi.data\n            dispatch({ type: SET_CHATFLOW, chatflow })\n            saveChatflowSuccess()\n            window.history.replaceState(null, null, `/canvas/${chatflow.id}`)\n        } else if (createNewChatflowApi.error) {\n            const error = createNewChatflowApi.error\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            errorFailed(`Failed to save chatflow: ${errorData}`)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [createNewChatflowApi.data, createNewChatflowApi.error])\n\n    // Update chatflow successful\n    useEffect(() => {\n        if (updateChatflowApi.data) {\n            dispatch({ type: SET_CHATFLOW, chatflow: updateChatflowApi.data })\n            saveChatflowSuccess()\n        } else if (updateChatflowApi.error) {\n            const error = updateChatflowApi.error\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            errorFailed(`Failed to save chatflow: ${errorData}`)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [updateChatflowApi.data, updateChatflowApi.error])\n\n    // Test chatflow failed\n    useEffect(() => {\n        if (testChatflowApi.error) {\n            enqueueSnackbar({\n                message: 'Test chatflow failed',\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [testChatflowApi.error])\n\n    useEffect(() => {\n        setChatflow(canvasDataStore.chatflow)\n        if (canvasDataStore.chatflow) {\n            const flowData = canvasDataStore.chatflow.flowData ? JSON.parse(canvasDataStore.chatflow.flowData) : []\n            checkIfUpsertAvailable(flowData.nodes || [], flowData.edges || [])\n        }\n    }, [canvasDataStore.chatflow])\n\n    // Initialization\n    useEffect(() => {\n        if (chatflowId) {\n            getSpecificChatflowApi.request(chatflowId)\n        } else {\n            if (localStorage.getItem('duplicatedFlowData')) {\n                handleLoadFlow(localStorage.getItem('duplicatedFlowData'))\n                setTimeout(() => localStorage.removeItem('duplicatedFlowData'), 0)\n            } else {\n                setNodes([])\n                setEdges([])\n            }\n            dispatch({\n                type: SET_CHATFLOW,\n                chatflow: {\n                    name: 'Untitled chatflow'\n                }\n            })\n        }\n\n        getNodesApi.request()\n\n        // Clear dirty state before leaving and remove any ongoing test triggers and webhooks\n        return () => {\n            setTimeout(() => dispatch({ type: REMOVE_DIRTY }), 0)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        setCanvasDataStore(canvas)\n    }, [canvas])\n\n    useEffect(() => {\n        function handlePaste(e) {\n            const pasteData = e.clipboardData.getData('text')\n            //TODO: prevent paste event when input focused, temporary fix: catch chatflow syntax\n            if (pasteData.includes('{\"nodes\":[') && pasteData.includes('],\"edges\":[')) {\n                handleLoadFlow(pasteData)\n            }\n        }\n\n        window.addEventListener('paste', handlePaste)\n\n        return () => {\n            window.removeEventListener('paste', handlePaste)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        if (templateFlowData && templateFlowData.includes('\"nodes\":[') && templateFlowData.includes('],\"edges\":[')) {\n            handleLoadFlow(templateFlowData)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [templateFlowData])\n\n    usePrompt('You have unsaved changes! Do you want to navigate away?', canvasDataStore.isDirty)\n\n    return (\n        <>\n            <Box>\n                <AppBar\n                    enableColorOnDark\n                    position='fixed'\n                    color='inherit'\n                    elevation={1}\n                    sx={{\n                        bgcolor: theme.palette.background.default\n                    }}\n                >\n                    <Toolbar>\n                        <CanvasHeader\n                            chatflow={chatflow}\n                            handleSaveFlow={handleSaveFlow}\n                            handleDeleteFlow={handleDeleteFlow}\n                            handleLoadFlow={handleLoadFlow}\n                        />\n                    </Toolbar>\n                </AppBar>\n                <Box sx={{ pt: '70px', height: '100vh', width: '100%' }}>\n                    <div className='reactflow-parent-wrapper'>\n                        <div className='reactflow-wrapper' ref={reactFlowWrapper}>\n                            <ReactFlow\n                                nodes={nodes}\n                                edges={edges}\n                                onNodesChange={onNodesChange}\n                                onNodeClick={onNodeClick}\n                                onEdgesChange={onEdgesChange}\n                                onDrop={onDrop}\n                                onDragOver={onDragOver}\n                                onNodeDragStop={setDirty}\n                                nodeTypes={nodeTypes}\n                                edgeTypes={edgeTypes}\n                                onConnect={onConnect}\n                                onInit={setReactFlowInstance}\n                                fitView\n                                deleteKeyCode={canvas.canvasDialogShow ? null : ['Backspace', 'Delete']}\n                                minZoom={0.1}\n                            >\n                                <Controls\n                                    style={{\n                                        display: 'flex',\n                                        flexDirection: 'row',\n                                        left: '50%',\n                                        transform: 'translate(-50%, -50%)'\n                                    }}\n                                />\n                                <Background color='#aaa' gap={16} />\n                                <AddNodes nodesData={getNodesApi.data} node={selectedNode} />\n                                {isUpsertButtonEnabled && <VectorStorePopUp chatflowid={chatflowId} />}\n                                <ChatPopUp chatflowid={chatflowId} />\n                            </ReactFlow>\n                        </div>\n                    </div>\n                </Box>\n                <ConfirmDialog />\n            </Box>\n        </>\n    )\n}\n\nexport default Canvas\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}