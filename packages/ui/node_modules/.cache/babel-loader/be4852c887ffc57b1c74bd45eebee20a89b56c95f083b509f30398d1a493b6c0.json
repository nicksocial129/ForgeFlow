{"ast":null,"code":"import{createPortal}from'react-dom';import{useNavigate}from'react-router-dom';import{useState,useEffect}from'react';import{useDispatch}from'react-redux';import{Tabs,Tab,Dialog,DialogContent,DialogTitle,Box,Accordion,AccordionSummary,AccordionDetails,Typography}from'@mui/material';import{CopyBlock,atomOneDark}from'react-code-blocks';import ExpandMoreIcon from'@mui/icons-material/ExpandMore';// Project import\nimport{Dropdown}from'ui-component/dropdown/Dropdown';import ShareChatbot from'./ShareChatbot';import EmbedChat from'./EmbedChat';import Configuration from'./Configuration';// Const\nimport{baseURL}from'store/constant';import{SET_CHATFLOW}from'store/actions';// Images\nimport pythonSVG from'assets/images/python.svg';import javascriptSVG from'assets/images/javascript.svg';import cURLSVG from'assets/images/cURL.svg';import EmbedSVG from'assets/images/embed.svg';import ShareChatbotSVG from'assets/images/sharing.png';import settingsSVG from'assets/images/settings.svg';import{IconBulb}from'@tabler/icons';// API\nimport apiKeyApi from'api/apikey';import chatflowsApi from'api/chatflows';import configApi from'api/config';// Hooks\nimport useApi from'hooks/useApi';import{CheckboxInput}from'ui-component/checkbox/Checkbox';import{TableViewOnly}from'ui-component/table/Table';// Helpers\nimport{unshiftFiles,getConfigExamplesForJS,getConfigExamplesForPython,getConfigExamplesForCurl}from'utils/genericHelper';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function TabPanel(props){const{children,value,index,...other}=props;return/*#__PURE__*/_jsx(\"div\",{role:\"tabpanel\",hidden:value!==index,id:\"attachment-tabpanel-\".concat(index),\"aria-labelledby\":\"attachment-tab-\".concat(index),...other,children:value===index&&/*#__PURE__*/_jsx(Box,{sx:{p:1},children:children})});}function a11yProps(index){return{id:\"attachment-tab-\".concat(index),'aria-controls':\"attachment-tabpanel-\".concat(index)};}const APICodeDialog=_ref=>{var _ref2,_dialogProps$chatflow;let{show,dialogProps,onCancel}=_ref;const portalElement=document.getElementById('portal');const navigate=useNavigate();const dispatch=useDispatch();const codes=['Embed','Python','JavaScript','cURL','Share Chatbot','Configuration'];const[value,setValue]=useState(0);const[keyOptions,setKeyOptions]=useState([]);const[apiKeys,setAPIKeys]=useState([]);const[chatflowApiKeyId,setChatflowApiKeyId]=useState('');const[selectedApiKey,setSelectedApiKey]=useState({});const[checkboxVal,setCheckbox]=useState(false);const[nodeConfig,setNodeConfig]=useState({});const[nodeConfigExpanded,setNodeConfigExpanded]=useState({});const getAllAPIKeysApi=useApi(apiKeyApi.getAllAPIKeys);const updateChatflowApi=useApi(chatflowsApi.updateChatflow);const getIsChatflowStreamingApi=useApi(chatflowsApi.getIsChatflowStreaming);const getConfigApi=useApi(configApi.getConfig);const onCheckBoxChanged=newVal=>{setCheckbox(newVal);if(newVal){getConfigApi.request(dialogProps.chatflowid);}};const onApiKeySelected=keyValue=>{if(keyValue==='addnewkey'){navigate('/apikey');return;}setChatflowApiKeyId(keyValue);setSelectedApiKey(apiKeys.find(key=>key.id===keyValue));const updateBody={apikeyid:keyValue};updateChatflowApi.request(dialogProps.chatflowid,updateBody);};const groupByNodeLabel=function(nodes){let isFilter=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;const accordianNodes={};const result=nodes.reduce(function(r,a){r[a.node]=r[a.node]||[];r[a.node].push(a);accordianNodes[a.node]=isFilter?true:false;return r;},Object.create(null));setNodeConfig(result);setNodeConfigExpanded(accordianNodes);};const handleAccordionChange=nodeLabel=>(event,isExpanded)=>{const accordianNodes={...nodeConfigExpanded};accordianNodes[nodeLabel]=isExpanded;setNodeConfigExpanded(accordianNodes);};useEffect(()=>{if(updateChatflowApi.data){dispatch({type:SET_CHATFLOW,chatflow:updateChatflowApi.data});}},[updateChatflowApi.data,dispatch]);useEffect(()=>{if(getConfigApi.data){groupByNodeLabel(getConfigApi.data);}},[getConfigApi.data]);const handleChange=(event,newValue)=>{setValue(newValue);};const getCode=codeLang=>{if(codeLang==='Python'){return\"import requests\\n\\nAPI_URL = \\\"\".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\"\\\"\\n\\ndef query(payload):\\n    response = requests.post(API_URL, json=payload)\\n    return response.json()\\n    \\noutput = query({\\n    \\\"question\\\": \\\"Hey, how are you?\\\",\\n})\\n\");}else if(codeLang==='JavaScript'){return\"async function query(data) {\\n    const response = await fetch(\\n        \\\"\".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\"\\\",\\n        {\\n            method: \\\"POST\\\",\\n            headers: {\\n                \\\"Content-Type\\\": \\\"application/json\\\"\\n            },\\n            body: JSON.stringify(data)\\n        }\\n    );\\n    const result = await response.json();\\n    return result;\\n}\\n\\nquery({\\\"question\\\": \\\"Hey, how are you?\\\"}).then((response) => {\\n    console.log(response);\\n});\\n\");}else if(codeLang==='cURL'){return\"curl \".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\" \\\\\\n     -X POST \\\\\\n     -d '{\\\"question\\\": \\\"Hey, how are you?\\\"}' \\\\\\n     -H \\\"Content-Type: application/json\\\"\");}return'';};const getCodeWithAuthorization=codeLang=>{if(codeLang==='Python'){return\"import requests\\n\\nAPI_URL = \\\"\".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\"\\\"\\nheaders = {\\\"Authorization\\\": \\\"Bearer \").concat(selectedApiKey===null||selectedApiKey===void 0?void 0:selectedApiKey.apiKey,\"\\\"}\\n\\ndef query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.json()\\n    \\noutput = query({\\n    \\\"question\\\": \\\"Hey, how are you?\\\",\\n})\\n\");}else if(codeLang==='JavaScript'){return\"async function query(data) {\\n    const response = await fetch(\\n        \\\"\".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\"\\\",\\n        {\\n            headers: {\\n                Authorization: \\\"Bearer \").concat(selectedApiKey===null||selectedApiKey===void 0?void 0:selectedApiKey.apiKey,\"\\\",\\n                \\\"Content-Type\\\": \\\"application/json\\\"\\n            },\\n            method: \\\"POST\\\",\\n            body: JSON.stringify(data)\\n        }\\n    );\\n    const result = await response.json();\\n    return result;\\n}\\n\\nquery({\\\"question\\\": \\\"Hey, how are you?\\\"}).then((response) => {\\n    console.log(response);\\n});\\n\");}else if(codeLang==='cURL'){return\"curl \".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\" \\\\\\n     -X POST \\\\\\n     -d '{\\\"question\\\": \\\"Hey, how are you?\\\"}' \\\\\\n     -H \\\"Content-Type: application/json\\\" \\\\\\n     -H \\\"Authorization: Bearer \").concat(selectedApiKey===null||selectedApiKey===void 0?void 0:selectedApiKey.apiKey,\"\\\"\");}return'';};const getLang=codeLang=>{if(codeLang==='Python'){return'python';}else if(codeLang==='JavaScript'){return'javascript';}else if(codeLang==='cURL'){return'bash';}return'python';};const getSVG=codeLang=>{if(codeLang==='Python'){return pythonSVG;}else if(codeLang==='JavaScript'){return javascriptSVG;}else if(codeLang==='Embed'){return EmbedSVG;}else if(codeLang==='cURL'){return cURLSVG;}else if(codeLang==='Share Chatbot'){return ShareChatbotSVG;}else if(codeLang==='Configuration'){return settingsSVG;}return pythonSVG;};// ----------------------------CONFIG FORM DATA --------------------------//\nconst getConfigCodeWithFormData=(codeLang,configData)=>{if(codeLang==='Python'){configData=unshiftFiles(configData);let fileType=configData[0].type;if(fileType.includes(','))fileType=fileType.split(',')[0];return\"import requests\\n\\nAPI_URL = \\\"\".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\"\\\"\\n\\n# use form data to upload files\\nform_data = {\\n    \\\"files\\\": \",\"('example\".concat(fileType,\"', open('example\").concat(fileType,\"', 'rb'))\"),\"\\n}\\nbody_data = {\").concat(getConfigExamplesForPython(configData,'formData'),\"}\\n\\ndef query(form_data):\\n    response = requests.post(API_URL, files=form_data, data=body_data)\\n    return response.json()\\n\\noutput = query(form_data)\\n\");}else if(codeLang==='JavaScript'){return\"// use FormData to upload files\\nlet formData = new FormData();\\n\".concat(getConfigExamplesForJS(configData,'formData'),\"\\nasync function query(formData) {\\n    const response = await fetch(\\n        \\\"\").concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\"\\\",\\n        {\\n            method: \\\"POST\\\",\\n            body: formData\\n        }\\n    );\\n    const result = await response.json();\\n    return result;\\n}\\n\\nquery(formData).then((response) => {\\n    console.log(response);\\n});\\n\");}else if(codeLang==='cURL'){return\"curl \".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\" \\\\\\n     -X POST \\\\\").concat(getConfigExamplesForCurl(configData,'formData'),\" \\\\\\n     -H \\\"Content-Type: multipart/form-data\\\"\");}return'';};// ----------------------------CONFIG FORM DATA with AUTH--------------------------//\nconst getConfigCodeWithFormDataWithAuth=(codeLang,configData)=>{if(codeLang==='Python'){configData=unshiftFiles(configData);let fileType=configData[0].type;if(fileType.includes(','))fileType=fileType.split(',')[0];return\"import requests\\n\\nAPI_URL = \\\"\".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\"\\\"\\nheaders = {\\\"Authorization\\\": \\\"Bearer \").concat(selectedApiKey===null||selectedApiKey===void 0?void 0:selectedApiKey.apiKey,\"\\\"}\\n\\n# use form data to upload files\\nform_data = {\\n    \\\"files\\\": \",\"('example\".concat(fileType,\"', open('example\").concat(fileType,\"', 'rb'))\"),\"\\n}\\nbody_data = {\").concat(getConfigExamplesForPython(configData,'formData'),\"}\\n\\ndef query(form_data):\\n    response = requests.post(API_URL, headers=headers, files=form_data, data=body_data)\\n    return response.json()\\n\\noutput = query(form_data)\\n\");}else if(codeLang==='JavaScript'){return\"// use FormData to upload files\\nlet formData = new FormData();\\n\".concat(getConfigExamplesForJS(configData,'formData'),\"\\nasync function query(formData) {\\n    const response = await fetch(\\n        \\\"\").concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\"\\\",\\n        {\\n            headers: { Authorization: \\\"Bearer \").concat(selectedApiKey===null||selectedApiKey===void 0?void 0:selectedApiKey.apiKey,\"\\\" },\\n            method: \\\"POST\\\",\\n            body: formData\\n        }\\n    );\\n    const result = await response.json();\\n    return result;\\n}\\n\\nquery(formData).then((response) => {\\n    console.log(response);\\n});\\n\");}else if(codeLang==='cURL'){return\"curl \".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\" \\\\\\n     -X POST \\\\\").concat(getConfigExamplesForCurl(configData,'formData'),\" \\\\\\n     -H \\\"Content-Type: multipart/form-data\\\" \\\\\\n     -H \\\"Authorization: Bearer \").concat(selectedApiKey===null||selectedApiKey===void 0?void 0:selectedApiKey.apiKey,\"\\\"\");}return'';};// ----------------------------CONFIG JSON--------------------------//\nconst getConfigCode=(codeLang,configData)=>{if(codeLang==='Python'){return\"import requests\\n\\nAPI_URL = \\\"\".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\"\\\"\\n\\ndef query(payload):\\n    response = requests.post(API_URL, json=payload)\\n    return response.json()\\n\\noutput = query({\\n    \\\"question\\\": \\\"Hey, how are you?\\\",\\n    \\\"overrideConfig\\\": {\").concat(getConfigExamplesForPython(configData,'json'),\"\\n    }\\n})\\n\");}else if(codeLang==='JavaScript'){return\"async function query(data) {\\n    const response = await fetch(\\n        \\\"\".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\"\\\",\\n        {\\n            method: \\\"POST\\\",\\n            headers: {\\n                \\\"Content-Type\\\": \\\"application/json\\\"\\n            },\\n            body: JSON.stringify(data)\\n        }\\n    );\\n    const result = await response.json();\\n    return result;\\n}\\n\\nquery({\\n  \\\"question\\\": \\\"Hey, how are you?\\\",\\n  \\\"overrideConfig\\\": {\").concat(getConfigExamplesForJS(configData,'json'),\"\\n  }\\n}).then((response) => {\\n    console.log(response);\\n});\\n\");}else if(codeLang==='cURL'){return\"curl \".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\" \\\\\\n     -X POST \\\\\\n     -d '{\\\"question\\\": \\\"Hey, how are you?\\\", \\\"overrideConfig\\\": {\").concat(getConfigExamplesForCurl(configData,'json'),\"}' \\\\\\n     -H \\\"Content-Type: application/json\\\"\");}return'';};// ----------------------------CONFIG JSON with AUTH--------------------------//\nconst getConfigCodeWithAuthorization=(codeLang,configData)=>{if(codeLang==='Python'){return\"import requests\\n\\nAPI_URL = \\\"\".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\"\\\"\\nheaders = {\\\"Authorization\\\": \\\"Bearer \").concat(selectedApiKey===null||selectedApiKey===void 0?void 0:selectedApiKey.apiKey,\"\\\"}\\n\\ndef query(payload):\\n    response = requests.post(API_URL, headers=headers, json=payload)\\n    return response.json()\\n\\noutput = query({\\n    \\\"question\\\": \\\"Hey, how are you?\\\",\\n    \\\"overrideConfig\\\": {\").concat(getConfigExamplesForPython(configData,'json'),\"\\n    }\\n})\\n\");}else if(codeLang==='JavaScript'){return\"async function query(data) {\\n    const response = await fetch(\\n        \\\"\".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\"\\\",\\n        {\\n            headers: {\\n                Authorization: \\\"Bearer \").concat(selectedApiKey===null||selectedApiKey===void 0?void 0:selectedApiKey.apiKey,\"\\\",\\n                \\\"Content-Type\\\": \\\"application/json\\\"\\n            },\\n            method: \\\"POST\\\",\\n            body: JSON.stringify(data)\\n        }\\n    );\\n    const result = await response.json();\\n    return result;\\n}\\n\\nquery({\\n  \\\"question\\\": \\\"Hey, how are you?\\\",\\n  \\\"overrideConfig\\\": {\").concat(getConfigExamplesForJS(configData,'json'),\"\\n  }\\n}).then((response) => {\\n    console.log(response);\\n});\\n\");}else if(codeLang==='cURL'){return\"curl \".concat(baseURL,\"/api/v1/prediction/\").concat(dialogProps.chatflowid,\" \\\\\\n     -X POST \\\\\\n     -d '{\\\"question\\\": \\\"Hey, how are you?\\\", \\\"overrideConfig\\\": {\").concat(getConfigExamplesForCurl(configData,'json'),\"}' \\\\\\n     -H \\\"Content-Type: application/json\\\" \\\\\\n     -H \\\"Authorization: Bearer \").concat(selectedApiKey===null||selectedApiKey===void 0?void 0:selectedApiKey.apiKey,\"\\\"\");}return'';};const getMultiConfigCodeWithFormData=codeLang=>{if(codeLang==='Python'){return\"body_data = {\\n    \\\"openAIApiKey[chatOpenAI_0]\\\": \\\"sk-my-openai-1st-key\\\",\\n    \\\"openAIApiKey[openAIEmbeddings_0]\\\": \\\"sk-my-openai-2nd-key\\\"\\n}\";}else if(codeLang==='JavaScript'){return\"formData.append(\\\"openAIApiKey[chatOpenAI_0]\\\", \\\"sk-my-openai-1st-key\\\")\\nformData.append(\\\"openAIApiKey[openAIEmbeddings_0]\\\", \\\"sk-my-openai-2nd-key\\\")\";}else if(codeLang==='cURL'){return\"-F \\\"openAIApiKey[chatOpenAI_0]=sk-my-openai-1st-key\\\" \\\\\\n-F \\\"openAIApiKey[openAIEmbeddings_0]=sk-my-openai-2nd-key\\\" \\\\\";}};const getMultiConfigCode=()=>{return\"{\\n    \\\"overrideConfig\\\": {\\n        \\\"openAIApiKey\\\": {\\n            \\\"chatOpenAI_0\\\": \\\"sk-my-openai-1st-key\\\",\\n            \\\"openAIEmbeddings_0\\\": \\\"sk-my-openai-2nd-key\\\"\\n        }\\n    }\\n}\";};useEffect(()=>{if(getAllAPIKeysApi.data){const options=[{label:'No Authorization',name:''}];for(const key of getAllAPIKeysApi.data){options.push({label:key.keyName,name:key.id});}options.push({label:'- Add New Key -',name:'addnewkey'});setKeyOptions(options);setAPIKeys(getAllAPIKeysApi.data);if(dialogProps.chatflowApiKeyId){setChatflowApiKeyId(dialogProps.chatflowApiKeyId);setSelectedApiKey(getAllAPIKeysApi.data.find(key=>key.id===dialogProps.chatflowApiKeyId));}}},[dialogProps,getAllAPIKeysApi.data]);useEffect(()=>{if(show){getAllAPIKeysApi.request();getIsChatflowStreamingApi.request(dialogProps.chatflowid);}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[show]);const component=show?/*#__PURE__*/_jsxs(Dialog,{open:show,fullWidth:true,maxWidth:\"md\",onClose:onCancel,\"aria-labelledby\":\"alert-dialog-title\",\"aria-describedby\":\"alert-dialog-description\",children:[/*#__PURE__*/_jsx(DialogTitle,{sx:{fontSize:'1rem'},id:\"alert-dialog-title\",children:dialogProps.title}),/*#__PURE__*/_jsxs(DialogContent,{children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'row',alignItems:'center'},children:[/*#__PURE__*/_jsx(\"div\",{style:{flex:80},children:/*#__PURE__*/_jsx(Tabs,{value:value,onChange:handleChange,\"aria-label\":\"tabs\",children:codes.map((codeLang,index)=>/*#__PURE__*/_jsx(Tab,{icon:/*#__PURE__*/_jsx(\"img\",{style:{objectFit:'cover',height:15,width:'auto'},src:getSVG(codeLang),alt:\"code\"}),iconPosition:\"start\",label:codeLang,...a11yProps(index)},index))})}),/*#__PURE__*/_jsx(\"div\",{style:{flex:20},children:/*#__PURE__*/_jsx(Dropdown,{name:\"SelectKey\",disableClearable:true,options:keyOptions,onSelect:newValue=>onApiKeySelected(newValue),value:(_ref2=(_dialogProps$chatflow=dialogProps.chatflowApiKeyId)!==null&&_dialogProps$chatflow!==void 0?_dialogProps$chatflow:chatflowApiKeyId)!==null&&_ref2!==void 0?_ref2:'Choose an API key'})})]}),/*#__PURE__*/_jsx(\"div\",{style:{marginTop:10}}),codes.map((codeLang,index)=>{var _getIsChatflowStreami;return/*#__PURE__*/_jsxs(TabPanel,{value:value,index:index,children:[(codeLang==='Embed'||codeLang==='Share Chatbot')&&chatflowApiKeyId&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"p\",{children:\"You cannot use API key while embedding/sharing chatbot.\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Please select \",/*#__PURE__*/_jsx(\"b\",{children:\"\\\"No Authorization\\\"\"}),\" from the dropdown at the top right corner.\"]})]}),codeLang==='Embed'&&!chatflowApiKeyId&&/*#__PURE__*/_jsx(EmbedChat,{chatflowid:dialogProps.chatflowid}),codeLang!=='Embed'&&codeLang!=='Share Chatbot'&&codeLang!=='Configuration'&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(CopyBlock,{theme:atomOneDark,text:chatflowApiKeyId?getCodeWithAuthorization(codeLang):getCode(codeLang),language:getLang(codeLang),showLineNumbers:false,wrapLines:true}),/*#__PURE__*/_jsx(CheckboxInput,{label:\"Show Input Config\",value:checkboxVal,onChange:onCheckBoxChanged}),checkboxVal&&getConfigApi.data&&getConfigApi.data.length>0&&/*#__PURE__*/_jsxs(_Fragment,{children:[Object.keys(nodeConfig).sort().map(nodeLabel=>/*#__PURE__*/_jsxs(Accordion,{expanded:nodeConfigExpanded[nodeLabel]||false,onChange:handleAccordionChange(nodeLabel),disableGutters:true,children:[/*#__PURE__*/_jsx(AccordionSummary,{expandIcon:/*#__PURE__*/_jsx(ExpandMoreIcon,{}),\"aria-controls\":\"nodes-accordian-\".concat(nodeLabel),id:\"nodes-accordian-header-\".concat(nodeLabel),children:/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'row',alignItems:'center'},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",children:nodeLabel}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',flexDirection:'row',width:'max-content',borderRadius:15,background:'rgb(254,252,191)',padding:5,paddingLeft:10,paddingRight:10,marginLeft:10},children:/*#__PURE__*/_jsx(\"span\",{style:{color:'rgb(116,66,16)',fontSize:'0.825rem'},children:nodeConfig[nodeLabel][0].nodeId})})]})}),/*#__PURE__*/_jsx(AccordionDetails,{children:/*#__PURE__*/_jsx(TableViewOnly,{rows:nodeConfig[nodeLabel].map(obj=>{// eslint-disable-next-line\nconst{node,nodeId,...rest}=obj;return rest;}),columns:Object.keys(nodeConfig[nodeLabel][0]).slice(-3)})})]},nodeLabel)),/*#__PURE__*/_jsx(CopyBlock,{theme:atomOneDark,text:chatflowApiKeyId?dialogProps.isFormDataRequired?getConfigCodeWithFormDataWithAuth(codeLang,getConfigApi.data):getConfigCodeWithAuthorization(codeLang,getConfigApi.data):dialogProps.isFormDataRequired?getConfigCodeWithFormData(codeLang,getConfigApi.data):getConfigCode(codeLang,getConfigApi.data),language:getLang(codeLang),showLineNumbers:false,wrapLines:true}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'column',borderRadius:10,background:'#d8f3dc',padding:10,marginTop:10,marginBottom:10},children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'row',alignItems:'center'},children:[/*#__PURE__*/_jsx(IconBulb,{size:30,color:\"#2d6a4f\"}),/*#__PURE__*/_jsx(\"span\",{style:{color:'#2d6a4f',marginLeft:10,fontWeight:500},children:\"You can also specify multiple values for a config parameter by specifying the node id\"})]}),/*#__PURE__*/_jsx(\"div\",{style:{padding:10},children:/*#__PURE__*/_jsx(CopyBlock,{theme:atomOneDark,text:dialogProps.isFormDataRequired?getMultiConfigCodeWithFormData(codeLang):getMultiConfigCode(),language:getLang(codeLang),showLineNumbers:false,wrapLines:true})})]})]}),((_getIsChatflowStreami=getIsChatflowStreamingApi.data)===null||_getIsChatflowStreami===void 0?void 0:_getIsChatflowStreami.isStreaming)&&/*#__PURE__*/_jsxs(\"p\",{children:[\"Read\\xA0\",/*#__PURE__*/_jsx(\"a\",{rel:\"noreferrer\",target:\"_blank\",href:\"https://docs.flowiseai.com/how-to-use#streaming\",children:\"here\"}),\"\\xA0on how to stream response back to application\"]})]}),codeLang==='Share Chatbot'&&!chatflowApiKeyId&&/*#__PURE__*/_jsx(ShareChatbot,{isSessionMemory:dialogProps.isSessionMemory}),codeLang==='Configuration'&&/*#__PURE__*/_jsx(Configuration,{})]},index);})]})]}):null;return/*#__PURE__*/createPortal(component,portalElement);};export default APICodeDialog;","map":{"version":3,"names":["createPortal","useNavigate","useState","useEffect","useDispatch","Tabs","Tab","Dialog","DialogContent","DialogTitle","Box","Accordion","AccordionSummary","AccordionDetails","Typography","CopyBlock","atomOneDark","ExpandMoreIcon","Dropdown","ShareChatbot","EmbedChat","Configuration","baseURL","SET_CHATFLOW","pythonSVG","javascriptSVG","cURLSVG","EmbedSVG","ShareChatbotSVG","settingsSVG","IconBulb","apiKeyApi","chatflowsApi","configApi","useApi","CheckboxInput","TableViewOnly","unshiftFiles","getConfigExamplesForJS","getConfigExamplesForPython","getConfigExamplesForCurl","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","TabPanel","props","children","value","index","other","role","hidden","id","concat","sx","p","a11yProps","APICodeDialog","_ref","_ref2","_dialogProps$chatflow","show","dialogProps","onCancel","portalElement","document","getElementById","navigate","dispatch","codes","setValue","keyOptions","setKeyOptions","apiKeys","setAPIKeys","chatflowApiKeyId","setChatflowApiKeyId","selectedApiKey","setSelectedApiKey","checkboxVal","setCheckbox","nodeConfig","setNodeConfig","nodeConfigExpanded","setNodeConfigExpanded","getAllAPIKeysApi","getAllAPIKeys","updateChatflowApi","updateChatflow","getIsChatflowStreamingApi","getIsChatflowStreaming","getConfigApi","getConfig","onCheckBoxChanged","newVal","request","chatflowid","onApiKeySelected","keyValue","find","key","updateBody","apikeyid","groupByNodeLabel","nodes","isFilter","arguments","length","undefined","accordianNodes","result","reduce","r","a","node","push","Object","create","handleAccordionChange","nodeLabel","event","isExpanded","data","type","chatflow","handleChange","newValue","getCode","codeLang","getCodeWithAuthorization","apiKey","getLang","getSVG","getConfigCodeWithFormData","configData","fileType","includes","split","getConfigCodeWithFormDataWithAuth","getConfigCode","getConfigCodeWithAuthorization","getMultiConfigCodeWithFormData","getMultiConfigCode","options","label","name","keyName","component","open","fullWidth","maxWidth","onClose","fontSize","title","style","display","flexDirection","alignItems","flex","onChange","map","icon","objectFit","height","width","src","alt","iconPosition","disableClearable","onSelect","marginTop","_getIsChatflowStreami","theme","text","language","showLineNumbers","wrapLines","keys","sort","expanded","disableGutters","expandIcon","variant","borderRadius","background","padding","paddingLeft","paddingRight","marginLeft","color","nodeId","rows","obj","rest","columns","slice","isFormDataRequired","marginBottom","size","fontWeight","isStreaming","rel","target","href","isSessionMemory"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/packages/ui/src/views/chatflows/APICodeDialog.js"],"sourcesContent":["import { createPortal } from 'react-dom'\nimport { useNavigate } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport {\n    Tabs,\n    Tab,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    Box,\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n    Typography\n} from '@mui/material'\nimport { CopyBlock, atomOneDark } from 'react-code-blocks'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\n// Project import\nimport { Dropdown } from 'ui-component/dropdown/Dropdown'\nimport ShareChatbot from './ShareChatbot'\nimport EmbedChat from './EmbedChat'\nimport Configuration from './Configuration'\n\n// Const\nimport { baseURL } from 'store/constant'\nimport { SET_CHATFLOW } from 'store/actions'\n\n// Images\nimport pythonSVG from 'assets/images/python.svg'\nimport javascriptSVG from 'assets/images/javascript.svg'\nimport cURLSVG from 'assets/images/cURL.svg'\nimport EmbedSVG from 'assets/images/embed.svg'\nimport ShareChatbotSVG from 'assets/images/sharing.png'\nimport settingsSVG from 'assets/images/settings.svg'\nimport { IconBulb } from '@tabler/icons'\n\n// API\nimport apiKeyApi from 'api/apikey'\nimport chatflowsApi from 'api/chatflows'\nimport configApi from 'api/config'\n\n// Hooks\nimport useApi from 'hooks/useApi'\nimport { CheckboxInput } from 'ui-component/checkbox/Checkbox'\nimport { TableViewOnly } from 'ui-component/table/Table'\n\n// Helpers\nimport { unshiftFiles, getConfigExamplesForJS, getConfigExamplesForPython, getConfigExamplesForCurl } from 'utils/genericHelper'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`attachment-tabpanel-${index}`}\n            aria-labelledby={`attachment-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\n        </div>\n    )\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired\n}\n\nfunction a11yProps(index) {\n    return {\n        id: `attachment-tab-${index}`,\n        'aria-controls': `attachment-tabpanel-${index}`\n    }\n}\n\nconst APICodeDialog = ({ show, dialogProps, onCancel }) => {\n    const portalElement = document.getElementById('portal')\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    const codes = ['Embed', 'Python', 'JavaScript', 'cURL', 'Share Chatbot', 'Configuration']\n    const [value, setValue] = useState(0)\n    const [keyOptions, setKeyOptions] = useState([])\n    const [apiKeys, setAPIKeys] = useState([])\n    const [chatflowApiKeyId, setChatflowApiKeyId] = useState('')\n    const [selectedApiKey, setSelectedApiKey] = useState({})\n    const [checkboxVal, setCheckbox] = useState(false)\n    const [nodeConfig, setNodeConfig] = useState({})\n    const [nodeConfigExpanded, setNodeConfigExpanded] = useState({})\n\n    const getAllAPIKeysApi = useApi(apiKeyApi.getAllAPIKeys)\n    const updateChatflowApi = useApi(chatflowsApi.updateChatflow)\n    const getIsChatflowStreamingApi = useApi(chatflowsApi.getIsChatflowStreaming)\n    const getConfigApi = useApi(configApi.getConfig)\n\n    const onCheckBoxChanged = (newVal) => {\n        setCheckbox(newVal)\n        if (newVal) {\n            getConfigApi.request(dialogProps.chatflowid)\n        }\n    }\n\n    const onApiKeySelected = (keyValue) => {\n        if (keyValue === 'addnewkey') {\n            navigate('/apikey')\n            return\n        }\n        setChatflowApiKeyId(keyValue)\n        setSelectedApiKey(apiKeys.find((key) => key.id === keyValue))\n        const updateBody = {\n            apikeyid: keyValue\n        }\n        updateChatflowApi.request(dialogProps.chatflowid, updateBody)\n    }\n\n    const groupByNodeLabel = (nodes, isFilter = false) => {\n        const accordianNodes = {}\n        const result = nodes.reduce(function (r, a) {\n            r[a.node] = r[a.node] || []\n            r[a.node].push(a)\n            accordianNodes[a.node] = isFilter ? true : false\n            return r\n        }, Object.create(null))\n        setNodeConfig(result)\n        setNodeConfigExpanded(accordianNodes)\n    }\n\n    const handleAccordionChange = (nodeLabel) => (event, isExpanded) => {\n        const accordianNodes = { ...nodeConfigExpanded }\n        accordianNodes[nodeLabel] = isExpanded\n        setNodeConfigExpanded(accordianNodes)\n    }\n\n    useEffect(() => {\n        if (updateChatflowApi.data) {\n            dispatch({ type: SET_CHATFLOW, chatflow: updateChatflowApi.data })\n        }\n    }, [updateChatflowApi.data, dispatch])\n\n    useEffect(() => {\n        if (getConfigApi.data) {\n            groupByNodeLabel(getConfigApi.data)\n        }\n    }, [getConfigApi.data])\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue)\n    }\n\n    const getCode = (codeLang) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\n\ndef query(payload):\n    response = requests.post(API_URL, json=payload)\n    return response.json()\n    \noutput = query({\n    \"question\": \"Hey, how are you?\",\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\"question\": \"Hey, how are you?\"}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\"}' \\\\\n     -H \"Content-Type: application/json\"`\n        }\n        return ''\n    }\n\n    const getCodeWithAuthorization = (codeLang) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\nheaders = {\"Authorization\": \"Bearer ${selectedApiKey?.apiKey}\"}\n\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\n    \noutput = query({\n    \"question\": \"Hey, how are you?\",\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            headers: {\n                Authorization: \"Bearer ${selectedApiKey?.apiKey}\",\n                \"Content-Type\": \"application/json\"\n            },\n            method: \"POST\",\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\"question\": \"Hey, how are you?\"}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\"}' \\\\\n     -H \"Content-Type: application/json\" \\\\\n     -H \"Authorization: Bearer ${selectedApiKey?.apiKey}\"`\n        }\n        return ''\n    }\n\n    const getLang = (codeLang) => {\n        if (codeLang === 'Python') {\n            return 'python'\n        } else if (codeLang === 'JavaScript') {\n            return 'javascript'\n        } else if (codeLang === 'cURL') {\n            return 'bash'\n        }\n        return 'python'\n    }\n\n    const getSVG = (codeLang) => {\n        if (codeLang === 'Python') {\n            return pythonSVG\n        } else if (codeLang === 'JavaScript') {\n            return javascriptSVG\n        } else if (codeLang === 'Embed') {\n            return EmbedSVG\n        } else if (codeLang === 'cURL') {\n            return cURLSVG\n        } else if (codeLang === 'Share Chatbot') {\n            return ShareChatbotSVG\n        } else if (codeLang === 'Configuration') {\n            return settingsSVG\n        }\n        return pythonSVG\n    }\n\n    // ----------------------------CONFIG FORM DATA --------------------------//\n\n    const getConfigCodeWithFormData = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            configData = unshiftFiles(configData)\n            let fileType = configData[0].type\n            if (fileType.includes(',')) fileType = fileType.split(',')[0]\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\n\n# use form data to upload files\nform_data = {\n    \"files\": ${`('example${fileType}', open('example${fileType}', 'rb'))`}\n}\nbody_data = {${getConfigExamplesForPython(configData, 'formData')}}\n\ndef query(form_data):\n    response = requests.post(API_URL, files=form_data, data=body_data)\n    return response.json()\n\noutput = query(form_data)\n`\n        } else if (codeLang === 'JavaScript') {\n            return `// use FormData to upload files\nlet formData = new FormData();\n${getConfigExamplesForJS(configData, 'formData')}\nasync function query(formData) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            method: \"POST\",\n            body: formData\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery(formData).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\${getConfigExamplesForCurl(configData, 'formData')} \\\\\n     -H \"Content-Type: multipart/form-data\"`\n        }\n        return ''\n    }\n\n    // ----------------------------CONFIG FORM DATA with AUTH--------------------------//\n\n    const getConfigCodeWithFormDataWithAuth = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            configData = unshiftFiles(configData)\n            let fileType = configData[0].type\n            if (fileType.includes(',')) fileType = fileType.split(',')[0]\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\nheaders = {\"Authorization\": \"Bearer ${selectedApiKey?.apiKey}\"}\n\n# use form data to upload files\nform_data = {\n    \"files\": ${`('example${fileType}', open('example${fileType}', 'rb'))`}\n}\nbody_data = {${getConfigExamplesForPython(configData, 'formData')}}\n\ndef query(form_data):\n    response = requests.post(API_URL, headers=headers, files=form_data, data=body_data)\n    return response.json()\n\noutput = query(form_data)\n`\n        } else if (codeLang === 'JavaScript') {\n            return `// use FormData to upload files\nlet formData = new FormData();\n${getConfigExamplesForJS(configData, 'formData')}\nasync function query(formData) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            headers: { Authorization: \"Bearer ${selectedApiKey?.apiKey}\" },\n            method: \"POST\",\n            body: formData\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery(formData).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\${getConfigExamplesForCurl(configData, 'formData')} \\\\\n     -H \"Content-Type: multipart/form-data\" \\\\\n     -H \"Authorization: Bearer ${selectedApiKey?.apiKey}\"`\n        }\n        return ''\n    }\n\n    // ----------------------------CONFIG JSON--------------------------//\n\n    const getConfigCode = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\n\ndef query(payload):\n    response = requests.post(API_URL, json=payload)\n    return response.json()\n\noutput = query({\n    \"question\": \"Hey, how are you?\",\n    \"overrideConfig\": {${getConfigExamplesForPython(configData, 'json')}\n    }\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\n  \"question\": \"Hey, how are you?\",\n  \"overrideConfig\": {${getConfigExamplesForJS(configData, 'json')}\n  }\n}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\", \"overrideConfig\": {${getConfigExamplesForCurl(configData, 'json')}}' \\\\\n     -H \"Content-Type: application/json\"`\n        }\n        return ''\n    }\n\n    // ----------------------------CONFIG JSON with AUTH--------------------------//\n\n    const getConfigCodeWithAuthorization = (codeLang, configData) => {\n        if (codeLang === 'Python') {\n            return `import requests\n\nAPI_URL = \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\"\nheaders = {\"Authorization\": \"Bearer ${selectedApiKey?.apiKey}\"}\n\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\n\noutput = query({\n    \"question\": \"Hey, how are you?\",\n    \"overrideConfig\": {${getConfigExamplesForPython(configData, 'json')}\n    }\n})\n`\n        } else if (codeLang === 'JavaScript') {\n            return `async function query(data) {\n    const response = await fetch(\n        \"${baseURL}/api/v1/prediction/${dialogProps.chatflowid}\",\n        {\n            headers: {\n                Authorization: \"Bearer ${selectedApiKey?.apiKey}\",\n                \"Content-Type\": \"application/json\"\n            },\n            method: \"POST\",\n            body: JSON.stringify(data)\n        }\n    );\n    const result = await response.json();\n    return result;\n}\n\nquery({\n  \"question\": \"Hey, how are you?\",\n  \"overrideConfig\": {${getConfigExamplesForJS(configData, 'json')}\n  }\n}).then((response) => {\n    console.log(response);\n});\n`\n        } else if (codeLang === 'cURL') {\n            return `curl ${baseURL}/api/v1/prediction/${dialogProps.chatflowid} \\\\\n     -X POST \\\\\n     -d '{\"question\": \"Hey, how are you?\", \"overrideConfig\": {${getConfigExamplesForCurl(configData, 'json')}}' \\\\\n     -H \"Content-Type: application/json\" \\\\\n     -H \"Authorization: Bearer ${selectedApiKey?.apiKey}\"`\n        }\n        return ''\n    }\n\n    const getMultiConfigCodeWithFormData = (codeLang) => {\n        if (codeLang === 'Python') {\n            return `body_data = {\n    \"openAIApiKey[chatOpenAI_0]\": \"sk-my-openai-1st-key\",\n    \"openAIApiKey[openAIEmbeddings_0]\": \"sk-my-openai-2nd-key\"\n}`\n        } else if (codeLang === 'JavaScript') {\n            return `formData.append(\"openAIApiKey[chatOpenAI_0]\", \"sk-my-openai-1st-key\")\nformData.append(\"openAIApiKey[openAIEmbeddings_0]\", \"sk-my-openai-2nd-key\")`\n        } else if (codeLang === 'cURL') {\n            return `-F \"openAIApiKey[chatOpenAI_0]=sk-my-openai-1st-key\" \\\\\n-F \"openAIApiKey[openAIEmbeddings_0]=sk-my-openai-2nd-key\" \\\\`\n        }\n    }\n\n    const getMultiConfigCode = () => {\n        return `{\n    \"overrideConfig\": {\n        \"openAIApiKey\": {\n            \"chatOpenAI_0\": \"sk-my-openai-1st-key\",\n            \"openAIEmbeddings_0\": \"sk-my-openai-2nd-key\"\n        }\n    }\n}`\n    }\n\n    useEffect(() => {\n        if (getAllAPIKeysApi.data) {\n            const options = [\n                {\n                    label: 'No Authorization',\n                    name: ''\n                }\n            ]\n            for (const key of getAllAPIKeysApi.data) {\n                options.push({\n                    label: key.keyName,\n                    name: key.id\n                })\n            }\n            options.push({\n                label: '- Add New Key -',\n                name: 'addnewkey'\n            })\n            setKeyOptions(options)\n            setAPIKeys(getAllAPIKeysApi.data)\n\n            if (dialogProps.chatflowApiKeyId) {\n                setChatflowApiKeyId(dialogProps.chatflowApiKeyId)\n                setSelectedApiKey(getAllAPIKeysApi.data.find((key) => key.id === dialogProps.chatflowApiKeyId))\n            }\n        }\n    }, [dialogProps, getAllAPIKeysApi.data])\n\n    useEffect(() => {\n        if (show) {\n            getAllAPIKeysApi.request()\n            getIsChatflowStreamingApi.request(dialogProps.chatflowid)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [show])\n\n    const component = show ? (\n        <Dialog\n            open={show}\n            fullWidth\n            maxWidth='md'\n            onClose={onCancel}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                {dialogProps.title}\n            </DialogTitle>\n            <DialogContent>\n                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                    <div style={{ flex: 80 }}>\n                        <Tabs value={value} onChange={handleChange} aria-label='tabs'>\n                            {codes.map((codeLang, index) => (\n                                <Tab\n                                    icon={\n                                        <img style={{ objectFit: 'cover', height: 15, width: 'auto' }} src={getSVG(codeLang)} alt='code' />\n                                    }\n                                    iconPosition='start'\n                                    key={index}\n                                    label={codeLang}\n                                    {...a11yProps(index)}\n                                ></Tab>\n                            ))}\n                        </Tabs>\n                    </div>\n                    <div style={{ flex: 20 }}>\n                        <Dropdown\n                            name='SelectKey'\n                            disableClearable={true}\n                            options={keyOptions}\n                            onSelect={(newValue) => onApiKeySelected(newValue)}\n                            value={dialogProps.chatflowApiKeyId ?? chatflowApiKeyId ?? 'Choose an API key'}\n                        />\n                    </div>\n                </div>\n                <div style={{ marginTop: 10 }}></div>\n                {codes.map((codeLang, index) => (\n                    <TabPanel key={index} value={value} index={index}>\n                        {(codeLang === 'Embed' || codeLang === 'Share Chatbot') && chatflowApiKeyId && (\n                            <>\n                                <p>You cannot use API key while embedding/sharing chatbot.</p>\n                                <p>\n                                    Please select <b>&quot;No Authorization&quot;</b> from the dropdown at the top right corner.\n                                </p>\n                            </>\n                        )}\n                        {codeLang === 'Embed' && !chatflowApiKeyId && <EmbedChat chatflowid={dialogProps.chatflowid} />}\n                        {codeLang !== 'Embed' && codeLang !== 'Share Chatbot' && codeLang !== 'Configuration' && (\n                            <>\n                                <CopyBlock\n                                    theme={atomOneDark}\n                                    text={chatflowApiKeyId ? getCodeWithAuthorization(codeLang) : getCode(codeLang)}\n                                    language={getLang(codeLang)}\n                                    showLineNumbers={false}\n                                    wrapLines\n                                />\n                                <CheckboxInput label='Show Input Config' value={checkboxVal} onChange={onCheckBoxChanged} />\n                                {checkboxVal && getConfigApi.data && getConfigApi.data.length > 0 && (\n                                    <>\n                                        {Object.keys(nodeConfig)\n                                            .sort()\n                                            .map((nodeLabel) => (\n                                                <Accordion\n                                                    expanded={nodeConfigExpanded[nodeLabel] || false}\n                                                    onChange={handleAccordionChange(nodeLabel)}\n                                                    key={nodeLabel}\n                                                    disableGutters\n                                                >\n                                                    <AccordionSummary\n                                                        expandIcon={<ExpandMoreIcon />}\n                                                        aria-controls={`nodes-accordian-${nodeLabel}`}\n                                                        id={`nodes-accordian-header-${nodeLabel}`}\n                                                    >\n                                                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                                                            <Typography variant='h5'>{nodeLabel}</Typography>\n                                                            <div\n                                                                style={{\n                                                                    display: 'flex',\n                                                                    flexDirection: 'row',\n                                                                    width: 'max-content',\n                                                                    borderRadius: 15,\n                                                                    background: 'rgb(254,252,191)',\n                                                                    padding: 5,\n                                                                    paddingLeft: 10,\n                                                                    paddingRight: 10,\n                                                                    marginLeft: 10\n                                                                }}\n                                                            >\n                                                                <span style={{ color: 'rgb(116,66,16)', fontSize: '0.825rem' }}>\n                                                                    {nodeConfig[nodeLabel][0].nodeId}\n                                                                </span>\n                                                            </div>\n                                                        </div>\n                                                    </AccordionSummary>\n                                                    <AccordionDetails>\n                                                        <TableViewOnly\n                                                            rows={nodeConfig[nodeLabel].map((obj) => {\n                                                                // eslint-disable-next-line\n                                                                const { node, nodeId, ...rest } = obj\n                                                                return rest\n                                                            })}\n                                                            columns={Object.keys(nodeConfig[nodeLabel][0]).slice(-3)}\n                                                        />\n                                                    </AccordionDetails>\n                                                </Accordion>\n                                            ))}\n                                        <CopyBlock\n                                            theme={atomOneDark}\n                                            text={\n                                                chatflowApiKeyId\n                                                    ? dialogProps.isFormDataRequired\n                                                        ? getConfigCodeWithFormDataWithAuth(codeLang, getConfigApi.data)\n                                                        : getConfigCodeWithAuthorization(codeLang, getConfigApi.data)\n                                                    : dialogProps.isFormDataRequired\n                                                    ? getConfigCodeWithFormData(codeLang, getConfigApi.data)\n                                                    : getConfigCode(codeLang, getConfigApi.data)\n                                            }\n                                            language={getLang(codeLang)}\n                                            showLineNumbers={false}\n                                            wrapLines\n                                        />\n                                        <div\n                                            style={{\n                                                display: 'flex',\n                                                flexDirection: 'column',\n                                                borderRadius: 10,\n                                                background: '#d8f3dc',\n                                                padding: 10,\n                                                marginTop: 10,\n                                                marginBottom: 10\n                                            }}\n                                        >\n                                            <div\n                                                style={{\n                                                    display: 'flex',\n                                                    flexDirection: 'row',\n                                                    alignItems: 'center'\n                                                }}\n                                            >\n                                                <IconBulb size={30} color='#2d6a4f' />\n                                                <span style={{ color: '#2d6a4f', marginLeft: 10, fontWeight: 500 }}>\n                                                    You can also specify multiple values for a config parameter by specifying the node id\n                                                </span>\n                                            </div>\n                                            <div style={{ padding: 10 }}>\n                                                <CopyBlock\n                                                    theme={atomOneDark}\n                                                    text={\n                                                        dialogProps.isFormDataRequired\n                                                            ? getMultiConfigCodeWithFormData(codeLang)\n                                                            : getMultiConfigCode()\n                                                    }\n                                                    language={getLang(codeLang)}\n                                                    showLineNumbers={false}\n                                                    wrapLines\n                                                />\n                                            </div>\n                                        </div>\n                                    </>\n                                )}\n                                {getIsChatflowStreamingApi.data?.isStreaming && (\n                                    <p>\n                                        Read&nbsp;\n                                        <a rel='noreferrer' target='_blank' href='https://docs.flowiseai.com/how-to-use#streaming'>\n                                            here\n                                        </a>\n                                        &nbsp;on how to stream response back to application\n                                    </p>\n                                )}\n                            </>\n                        )}\n                        {codeLang === 'Share Chatbot' && !chatflowApiKeyId && (\n                            <ShareChatbot isSessionMemory={dialogProps.isSessionMemory} />\n                        )}\n                        {codeLang === 'Configuration' && <Configuration />}\n                    </TabPanel>\n                ))}\n            </DialogContent>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nAPICodeDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func\n}\n\nexport default APICodeDialog\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}