{"ast":null,"code":"import{createContext,useState}from'react';import{useDispatch}from'react-redux';import{getUniqueNodeId}from'utils/genericHelper';import{cloneDeep}from'lodash';import{SET_DIRTY}from'store/actions';import{jsx as _jsx}from\"react/jsx-runtime\";const initialValue={reactFlowInstance:null,setReactFlowInstance:()=>{},duplicateNode:()=>{},deleteNode:()=>{},deleteEdge:()=>{}};export const flowContext=/*#__PURE__*/createContext(initialValue);export const ReactFlowContext=_ref=>{let{children}=_ref;const dispatch=useDispatch();const[reactFlowInstance,setReactFlowInstance]=useState(null);const deleteNode=nodeid=>{deleteConnectedInput(nodeid,'node');reactFlowInstance.setNodes(reactFlowInstance.getNodes().filter(n=>n.id!==nodeid));reactFlowInstance.setEdges(reactFlowInstance.getEdges().filter(ns=>ns.source!==nodeid&&ns.target!==nodeid));dispatch({type:SET_DIRTY});};const deleteEdge=edgeid=>{deleteConnectedInput(edgeid,'edge');reactFlowInstance.setEdges(reactFlowInstance.getEdges().filter(edge=>edge.id!==edgeid));dispatch({type:SET_DIRTY});};const deleteConnectedInput=(id,type)=>{const connectedEdges=type==='node'?reactFlowInstance.getEdges().filter(edge=>edge.source===id):reactFlowInstance.getEdges().filter(edge=>edge.id===id);for(const edge of connectedEdges){const targetNodeId=edge.target;const sourceNodeId=edge.source;const targetInput=edge.targetHandle.split('-')[2];reactFlowInstance.setNodes(nds=>nds.map(node=>{if(node.id===targetNodeId){let value;const inputAnchor=node.data.inputAnchors.find(ancr=>ancr.name===targetInput);const inputParam=node.data.inputParams.find(param=>param.name===targetInput);if(inputAnchor&&inputAnchor.list){const values=node.data.inputs[targetInput]||[];value=values.filter(item=>!item.includes(sourceNodeId));}else if(inputParam&&inputParam.acceptVariable){value=node.data.inputs[targetInput].replace(\"{{\".concat(sourceNodeId,\".data.instance}}\"),'')||'';}else{value='';}node.data={...node.data,inputs:{...node.data.inputs,[targetInput]:value}};}return node;}));}};const duplicateNode=id=>{const nodes=reactFlowInstance.getNodes();const originalNode=nodes.find(n=>n.id===id);if(originalNode){const newNodeId=getUniqueNodeId(originalNode.data,nodes);const clonedNode=cloneDeep(originalNode);const duplicatedNode={...clonedNode,id:newNodeId,position:{x:clonedNode.position.x+400,y:clonedNode.position.y},positionAbsolute:{x:clonedNode.positionAbsolute.x+400,y:clonedNode.positionAbsolute.y},data:{...clonedNode.data,id:newNodeId},selected:false};const inputKeys=['inputParams','inputAnchors'];for(const key of inputKeys){for(const item of duplicatedNode.data[key]){if(item.id){item.id=item.id.replace(id,newNodeId);}}}const outputKeys=['outputAnchors'];for(const key of outputKeys){for(const item of duplicatedNode.data[key]){if(item.id){item.id=item.id.replace(id,newNodeId);}if(item.options){for(const output of item.options){output.id=output.id.replace(id,newNodeId);}}}}// Clear connected inputs\nfor(const inputName in duplicatedNode.data.inputs){if(typeof duplicatedNode.data.inputs[inputName]==='string'&&duplicatedNode.data.inputs[inputName].startsWith('{{')&&duplicatedNode.data.inputs[inputName].endsWith('}}')){duplicatedNode.data.inputs[inputName]='';}else if(Array.isArray(duplicatedNode.data.inputs[inputName])){duplicatedNode.data.inputs[inputName]=duplicatedNode.data.inputs[inputName].filter(item=>!(typeof item==='string'&&item.startsWith('{{')&&item.endsWith('}}')));}}reactFlowInstance.setNodes([...nodes,duplicatedNode]);dispatch({type:SET_DIRTY});}};return/*#__PURE__*/_jsx(flowContext.Provider,{value:{reactFlowInstance,setReactFlowInstance,deleteNode,deleteEdge,duplicateNode},children:children});};","map":{"version":3,"names":["createContext","useState","useDispatch","getUniqueNodeId","cloneDeep","SET_DIRTY","jsx","_jsx","initialValue","reactFlowInstance","setReactFlowInstance","duplicateNode","deleteNode","deleteEdge","flowContext","ReactFlowContext","_ref","children","dispatch","nodeid","deleteConnectedInput","setNodes","getNodes","filter","n","id","setEdges","getEdges","ns","source","target","type","edgeid","edge","connectedEdges","targetNodeId","sourceNodeId","targetInput","targetHandle","split","nds","map","node","value","inputAnchor","data","inputAnchors","find","ancr","name","inputParam","inputParams","param","list","values","inputs","item","includes","acceptVariable","replace","concat","nodes","originalNode","newNodeId","clonedNode","duplicatedNode","position","x","y","positionAbsolute","selected","inputKeys","key","outputKeys","options","output","inputName","startsWith","endsWith","Array","isArray","Provider"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/packages/ui/src/store/context/ReactFlowContext.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { getUniqueNodeId } from 'utils/genericHelper'\nimport { cloneDeep } from 'lodash'\nimport { SET_DIRTY } from 'store/actions'\n\nconst initialValue = {\n    reactFlowInstance: null,\n    setReactFlowInstance: () => {},\n    duplicateNode: () => {},\n    deleteNode: () => {},\n    deleteEdge: () => {}\n}\n\nexport const flowContext = createContext(initialValue)\n\nexport const ReactFlowContext = ({ children }) => {\n    const dispatch = useDispatch()\n    const [reactFlowInstance, setReactFlowInstance] = useState(null)\n\n    const deleteNode = (nodeid) => {\n        deleteConnectedInput(nodeid, 'node')\n        reactFlowInstance.setNodes(reactFlowInstance.getNodes().filter((n) => n.id !== nodeid))\n        reactFlowInstance.setEdges(reactFlowInstance.getEdges().filter((ns) => ns.source !== nodeid && ns.target !== nodeid))\n        dispatch({ type: SET_DIRTY })\n    }\n\n    const deleteEdge = (edgeid) => {\n        deleteConnectedInput(edgeid, 'edge')\n        reactFlowInstance.setEdges(reactFlowInstance.getEdges().filter((edge) => edge.id !== edgeid))\n        dispatch({ type: SET_DIRTY })\n    }\n\n    const deleteConnectedInput = (id, type) => {\n        const connectedEdges =\n            type === 'node'\n                ? reactFlowInstance.getEdges().filter((edge) => edge.source === id)\n                : reactFlowInstance.getEdges().filter((edge) => edge.id === id)\n\n        for (const edge of connectedEdges) {\n            const targetNodeId = edge.target\n            const sourceNodeId = edge.source\n            const targetInput = edge.targetHandle.split('-')[2]\n\n            reactFlowInstance.setNodes((nds) =>\n                nds.map((node) => {\n                    if (node.id === targetNodeId) {\n                        let value\n                        const inputAnchor = node.data.inputAnchors.find((ancr) => ancr.name === targetInput)\n                        const inputParam = node.data.inputParams.find((param) => param.name === targetInput)\n\n                        if (inputAnchor && inputAnchor.list) {\n                            const values = node.data.inputs[targetInput] || []\n                            value = values.filter((item) => !item.includes(sourceNodeId))\n                        } else if (inputParam && inputParam.acceptVariable) {\n                            value = node.data.inputs[targetInput].replace(`{{${sourceNodeId}.data.instance}}`, '') || ''\n                        } else {\n                            value = ''\n                        }\n                        node.data = {\n                            ...node.data,\n                            inputs: {\n                                ...node.data.inputs,\n                                [targetInput]: value\n                            }\n                        }\n                    }\n                    return node\n                })\n            )\n        }\n    }\n\n    const duplicateNode = (id) => {\n        const nodes = reactFlowInstance.getNodes()\n        const originalNode = nodes.find((n) => n.id === id)\n        if (originalNode) {\n            const newNodeId = getUniqueNodeId(originalNode.data, nodes)\n            const clonedNode = cloneDeep(originalNode)\n\n            const duplicatedNode = {\n                ...clonedNode,\n                id: newNodeId,\n                position: {\n                    x: clonedNode.position.x + 400,\n                    y: clonedNode.position.y\n                },\n                positionAbsolute: {\n                    x: clonedNode.positionAbsolute.x + 400,\n                    y: clonedNode.positionAbsolute.y\n                },\n                data: {\n                    ...clonedNode.data,\n                    id: newNodeId\n                },\n                selected: false\n            }\n\n            const inputKeys = ['inputParams', 'inputAnchors']\n            for (const key of inputKeys) {\n                for (const item of duplicatedNode.data[key]) {\n                    if (item.id) {\n                        item.id = item.id.replace(id, newNodeId)\n                    }\n                }\n            }\n\n            const outputKeys = ['outputAnchors']\n            for (const key of outputKeys) {\n                for (const item of duplicatedNode.data[key]) {\n                    if (item.id) {\n                        item.id = item.id.replace(id, newNodeId)\n                    }\n                    if (item.options) {\n                        for (const output of item.options) {\n                            output.id = output.id.replace(id, newNodeId)\n                        }\n                    }\n                }\n            }\n\n            // Clear connected inputs\n            for (const inputName in duplicatedNode.data.inputs) {\n                if (\n                    typeof duplicatedNode.data.inputs[inputName] === 'string' &&\n                    duplicatedNode.data.inputs[inputName].startsWith('{{') &&\n                    duplicatedNode.data.inputs[inputName].endsWith('}}')\n                ) {\n                    duplicatedNode.data.inputs[inputName] = ''\n                } else if (Array.isArray(duplicatedNode.data.inputs[inputName])) {\n                    duplicatedNode.data.inputs[inputName] = duplicatedNode.data.inputs[inputName].filter(\n                        (item) => !(typeof item === 'string' && item.startsWith('{{') && item.endsWith('}}'))\n                    )\n                }\n            }\n\n            reactFlowInstance.setNodes([...nodes, duplicatedNode])\n            dispatch({ type: SET_DIRTY })\n        }\n    }\n\n    return (\n        <flowContext.Provider\n            value={{\n                reactFlowInstance,\n                setReactFlowInstance,\n                deleteNode,\n                deleteEdge,\n                duplicateNode\n            }}\n        >\n            {children}\n        </flowContext.Provider>\n    )\n}\n\nReactFlowContext.propTypes = {\n    children: PropTypes.any\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}