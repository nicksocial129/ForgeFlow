{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HTMLDomStrings = void 0;\nvar Options_js_1 = require(\"../../util/Options.js\");\nvar HTMLDomStrings = function () {\n  function HTMLDomStrings(options) {\n    if (options === void 0) {\n      options = null;\n    }\n    var CLASS = this.constructor;\n    this.options = (0, Options_js_1.userOptions)((0, Options_js_1.defaultOptions)({}, CLASS.OPTIONS), options);\n    this.init();\n    this.getPatterns();\n  }\n  HTMLDomStrings.prototype.init = function () {\n    this.strings = [];\n    this.string = '';\n    this.snodes = [];\n    this.nodes = [];\n    this.stack = [];\n  };\n  HTMLDomStrings.prototype.getPatterns = function () {\n    var skip = (0, Options_js_1.makeArray)(this.options['skipHtmlTags']);\n    var ignore = (0, Options_js_1.makeArray)(this.options['ignoreHtmlClass']);\n    var process = (0, Options_js_1.makeArray)(this.options['processHtmlClass']);\n    this.skipHtmlTags = new RegExp('^(?:' + skip.join('|') + ')$', 'i');\n    this.ignoreHtmlClass = new RegExp('(?:^| )(?:' + ignore.join('|') + ')(?: |$)');\n    this.processHtmlClass = new RegExp('(?:^| )(?:' + process + ')(?: |$)');\n  };\n  HTMLDomStrings.prototype.pushString = function () {\n    if (this.string.match(/\\S/)) {\n      this.strings.push(this.string);\n      this.nodes.push(this.snodes);\n    }\n    this.string = '';\n    this.snodes = [];\n  };\n  HTMLDomStrings.prototype.extendString = function (node, text) {\n    this.snodes.push([node, text.length]);\n    this.string += text;\n  };\n  HTMLDomStrings.prototype.handleText = function (node, ignore) {\n    if (!ignore) {\n      this.extendString(node, this.adaptor.value(node));\n    }\n    return this.adaptor.next(node);\n  };\n  HTMLDomStrings.prototype.handleTag = function (node, ignore) {\n    if (!ignore) {\n      var text = this.options['includeHtmlTags'][this.adaptor.kind(node)];\n      this.extendString(node, text);\n    }\n    return this.adaptor.next(node);\n  };\n  HTMLDomStrings.prototype.handleContainer = function (node, ignore) {\n    this.pushString();\n    var cname = this.adaptor.getAttribute(node, 'class') || '';\n    var tname = this.adaptor.kind(node) || '';\n    var process = this.processHtmlClass.exec(cname);\n    var next = node;\n    if (this.adaptor.firstChild(node) && !this.adaptor.getAttribute(node, 'data-MJX') && (process || !this.skipHtmlTags.exec(tname))) {\n      if (this.adaptor.next(node)) {\n        this.stack.push([this.adaptor.next(node), ignore]);\n      }\n      next = this.adaptor.firstChild(node);\n      ignore = (ignore || this.ignoreHtmlClass.exec(cname)) && !process;\n    } else {\n      next = this.adaptor.next(node);\n    }\n    return [next, ignore];\n  };\n  HTMLDomStrings.prototype.handleOther = function (node, _ignore) {\n    this.pushString();\n    return this.adaptor.next(node);\n  };\n  HTMLDomStrings.prototype.find = function (node) {\n    var _a, _b;\n    this.init();\n    var stop = this.adaptor.next(node);\n    var ignore = false;\n    var include = this.options['includeHtmlTags'];\n    while (node && node !== stop) {\n      var kind = this.adaptor.kind(node);\n      if (kind === '#text') {\n        node = this.handleText(node, ignore);\n      } else if (include.hasOwnProperty(kind)) {\n        node = this.handleTag(node, ignore);\n      } else if (kind) {\n        _a = __read(this.handleContainer(node, ignore), 2), node = _a[0], ignore = _a[1];\n      } else {\n        node = this.handleOther(node, ignore);\n      }\n      if (!node && this.stack.length) {\n        this.pushString();\n        _b = __read(this.stack.pop(), 2), node = _b[0], ignore = _b[1];\n      }\n    }\n    this.pushString();\n    var result = [this.strings, this.nodes];\n    this.init();\n    return result;\n  };\n  HTMLDomStrings.OPTIONS = {\n    skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code', 'annotation', 'annotation-xml'],\n    includeHtmlTags: {\n      br: '\\n',\n      wbr: '',\n      '#comment': ''\n    },\n    ignoreHtmlClass: 'mathjax_ignore',\n    processHtmlClass: 'mathjax_process'\n  };\n  return HTMLDomStrings;\n}();\nexports.HTMLDomStrings = HTMLDomStrings;","map":{"version":3,"names":["Options_js_1","require","HTMLDomStrings","options","CLASS","constructor","userOptions","defaultOptions","OPTIONS","init","getPatterns","prototype","strings","string","snodes","nodes","stack","skip","makeArray","ignore","process","skipHtmlTags","RegExp","join","ignoreHtmlClass","processHtmlClass","pushString","match","push","extendString","node","text","length","handleText","adaptor","value","next","handleTag","kind","handleContainer","cname","getAttribute","tname","exec","firstChild","handleOther","_ignore","find","stop","include","hasOwnProperty","_a","__read","_b","pop","result","includeHtmlTags","br","wbr","exports"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/handlers/html/HTMLDomStrings.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the HTMLDomStrings class\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {userOptions, defaultOptions, OptionList, makeArray} from '../../util/Options.js';\nimport {DOMAdaptor} from '../../core/DOMAdaptor.js';\n\n/**\n *  List of consecutive text nodes and their text lengths\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n */\nexport type HTMLNodeList<N, T> = [N | T, number][];\n\n/*****************************************************************/\n/**\n *  The HTMLDocument class (extends AbstractMathDocument)\n *\n *  A class for extracting the text from DOM trees\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class HTMLDomStrings<N, T, D> {\n\n  /**\n   * The default options for string processing\n   */\n  public static OPTIONS: OptionList = {\n    skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code', 'annotation', 'annotation-xml'],\n                                        // The names of the tags whose contents will not be\n                                        // scanned for math delimiters\n\n    includeHtmlTags: {br: '\\n', wbr: '', '#comment': ''},\n                                        //  tags to be included in the text (and what\n                                        //  text to replace them with)\n\n    ignoreHtmlClass: 'mathjax_ignore',  // the class name of elements whose contents should\n                                        // NOT be processed by tex2jax.  Note that this\n                                        // is a regular expression, so be sure to quote any\n                                        // regexp special characters\n\n    processHtmlClass: 'mathjax_process' // the class name of elements whose contents SHOULD\n                                        // be processed when they appear inside ones that\n                                        // are ignored.  Note that this is a regular expression,\n                                        // so be sure to quote any regexp special characters\n  };\n\n  /**\n   * The options for this instance\n   */\n  protected options: OptionList;\n\n  /**\n   * The array of strings found in the DOM\n   */\n  protected strings: string[];\n\n  /**\n   * The string currently being constructed\n   */\n  protected string: string;\n\n  /**\n   * The list of nodes and lengths for the string being constructed\n   */\n  protected snodes: HTMLNodeList<N, T>;\n\n  /**\n   * The list of node lists corresponding to the strings in this.strings\n   */\n  protected nodes: HTMLNodeList<N, T>[];\n\n  /**\n   * The container nodes that are currently being traversed, and whether their\n   *  contents are being ignored or not\n   */\n  protected stack: [N | T, boolean][];\n\n  /**\n   * Regular expression for the tags to be skipped\n   *  processing of math\n   */\n  protected skipHtmlTags: RegExp;\n  /**\n   * Regular expression for which classes should stop processing of math\n   */\n  protected ignoreHtmlClass: RegExp;\n  /**\n   * Regular expression for which classes should start processing of math\n   */\n  protected processHtmlClass: RegExp;\n\n  /**\n   * The DOM Adaptor to managing HTML elements\n   */\n  public adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * @param {OptionList} options  The user-supplied options\n   * @constructor\n   */\n  constructor(options: OptionList = null) {\n    let CLASS = this.constructor as typeof HTMLDomStrings;\n    this.options = userOptions(defaultOptions({}, CLASS.OPTIONS), options);\n    this.init();\n    this.getPatterns();\n  }\n\n  /**\n   * Set the initial values of the main properties\n   */\n  protected init() {\n    this.strings = [];\n    this.string = '';\n    this.snodes = [];\n    this.nodes = [];\n    this.stack = [];\n  }\n\n  /**\n   * Create the search patterns for skipHtmlTags, ignoreHtmlClass, and processHtmlClass\n   */\n  protected getPatterns() {\n    let skip = makeArray(this.options['skipHtmlTags']);\n    let ignore = makeArray(this.options['ignoreHtmlClass']);\n    let process = makeArray(this.options['processHtmlClass']);\n    this.skipHtmlTags = new RegExp('^(?:' + skip.join('|') + ')$', 'i');\n    this.ignoreHtmlClass = new RegExp('(?:^| )(?:' + ignore.join('|') + ')(?: |$)');\n    this.processHtmlClass = new RegExp('(?:^| )(?:' + process + ')(?: |$)');\n  }\n\n  /**\n   * Add a string to the string array and record its node list\n   */\n  protected pushString() {\n    if (this.string.match(/\\S/)) {\n      this.strings.push(this.string);\n      this.nodes.push(this.snodes);\n    }\n    this.string = '';\n    this.snodes = [];\n  }\n\n  /**\n   * Add more text to the current string, and record the\n   * node and its position in the string.\n   *\n   * @param {N|T} node        The node to be pushed\n   * @param {string} text   The text to be added (it may not be the actual text\n   *                         of the node, if it is one of the nodes that gets\n   *                         translated to text, like <br> to a newline).\n   */\n  protected extendString(node: N | T, text: string) {\n    this.snodes.push([node, text.length]);\n    this.string += text;\n  }\n\n  /**\n   * Handle a #text node (add its text to the current string)\n   *\n   * @param {T} node          The Text node to process\n   * @param {boolean} ignore  Whether we are currently ignoring content\n   * @return {N | T}          The next element to process\n   */\n  protected handleText(node: T, ignore: boolean): N | T {\n    if (!ignore) {\n      this.extendString(node, this.adaptor.value(node));\n    }\n    return this.adaptor.next(node);\n  }\n\n  /**\n   * Handle a BR, WBR, or #comment element (or others in the includeHtmlTags object).\n   *\n   * @param {N} node          The node to process\n   * @param {boolean} ignore  Whether we are currently ignoring content\n   * @return {N | T}          The next element to process\n   */\n  protected handleTag(node: N, ignore: boolean): N | T {\n    if (!ignore) {\n      let text = this.options['includeHtmlTags'][this.adaptor.kind(node)];\n      this.extendString(node, text);\n    }\n    return this.adaptor.next(node);\n  }\n\n  /**\n   * Handle an arbitrary DOM node:\n   *   Check the class to see if it matches the processHtmlClass regex\n   *   If the node has a child and is not marked as created by MathJax (data-MJX)\n   *       and either it is marked as restarting processing or is not a tag to be skipped, then\n   *     Save the next node (if there is one) and whether we are currently ignoring content\n   *     Move to the first child node\n   *     Update whether we are ignoring content\n   *   Otherwise\n   *     Move on to the next sibling\n   *   Return the next node to process and the ignore state\n   *\n   * @param {N} node               The node to process\n   * @param {boolean} ignore       Whether we are currently ignoring content\n   * @return {[N|T, boolean]}      The next element to process and whether to ignore its content\n   */\n  protected handleContainer(node: N, ignore: boolean): [N | T, boolean] {\n    this.pushString();\n    const cname = this.adaptor.getAttribute(node, 'class') || '';\n    const tname = this.adaptor.kind(node) || '';\n    const process = this.processHtmlClass.exec(cname);\n    let next = node as N | T;\n    if (this.adaptor.firstChild(node) && !this.adaptor.getAttribute(node, 'data-MJX') &&\n        (process || !this.skipHtmlTags.exec(tname))) {\n      if (this.adaptor.next(node)) {\n        this.stack.push([this.adaptor.next(node), ignore]);\n      }\n      next = this.adaptor.firstChild(node);\n      ignore = (ignore || this.ignoreHtmlClass.exec(cname)) && !process;\n    } else {\n      next = this.adaptor.next(node);\n    }\n    return [next, ignore];\n  }\n\n  /**\n   * Handle an unknown node type (nodeType other than 1, 3, 8)\n   *\n   * @param {N} node           The node to process\n   * @param {boolean} ignore   Whether we are currently ignoring content\n   * @return {N|T}             The next element to process\n   */\n  protected handleOther(node: N, _ignore: boolean): N | T {\n    this.pushString();\n    return this.adaptor.next(node);\n  }\n\n  /**\n   * Find the strings for a given DOM element:\n   *   Initialize the state\n   *   Get the element where we stop processing\n   *   While we still have a node, and it is not the one where we are to stop:\n   *     If it is a text node, handle it and get the next node\n   *     Otherwise, if it is in the includeHtmlTags list, handle it and get the next node\n   *     Otherwise, handle it as a container and get the next node and ignore status\n   *     If there is no next node, and there are more nodes on the stack:\n   *       Save the current string, and pop the node and ignore status from the stack\n   *   Push the final string\n   *   Get the string array and array of associated DOM nodes\n   *   Clear the internal values (so the memory can be freed)\n   *   Return the strings and node lists\n   *\n   * @param {N} node                       The node to search\n   * @return {[string[], HTMLNodeList[]]}  The array of strings and their associated lists of nodes\n   */\n  public find(node: N | T): [string[], HTMLNodeList<N, T>[]] {\n    this.init();\n    let stop = this.adaptor.next(node);\n    let ignore = false;\n    let include = this.options['includeHtmlTags'];\n\n    while (node && node !== stop) {\n      const kind = this.adaptor.kind(node);\n      if (kind === '#text') {\n        node = this.handleText(node as T, ignore);\n      } else if (include.hasOwnProperty(kind)) {\n        node = this.handleTag(node as N, ignore);\n      } else if (kind) {\n        [node, ignore] = this.handleContainer(node as N, ignore);\n      } else {\n        node = this.handleOther(node as N, ignore);\n      }\n      if (!node && this.stack.length) {\n        this.pushString();\n        [node, ignore] = this.stack.pop();\n      }\n    }\n\n    this.pushString();\n    let result = [this.strings, this.nodes] as [string[], HTMLNodeList<N, T>[]];\n    this.init(); // free up memory\n    return result;\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}