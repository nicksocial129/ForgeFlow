{"ast":null,"code":"'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\nmodule.exports = smarty;\nsmarty.displayName = 'smarty';\nsmarty.aliases = [];\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /* TODO\n  Add support for variables inside double quoted strings\n  Add support for {php}\n  */;\n  (function (Prism) {\n    Prism.languages.smarty = {\n      comment: /\\{\\*[\\s\\S]*?\\*\\}/,\n      delimiter: {\n        pattern: /^\\{|\\}$/i,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [/\\$(?!\\d)\\w+/, /#(?!\\d)\\w+#/, {\n        pattern: /(\\.|->)(?!\\d)\\w+/,\n        lookbehind: true\n      }, {\n        pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n        lookbehind: true\n      }],\n      function: [{\n        pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n        lookbehind: true\n      }, /^\\/?(?!\\d)\\w+/, /(?!\\d)\\w+(?=\\()/],\n      'attr-name': {\n        // Value is made optional because it may have already been tokenized\n        pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n        inside: {\n          variable: {\n            pattern: /(=\\s*)(?!\\d)\\w+/,\n            lookbehind: true\n          },\n          operator: /=/\n        }\n      },\n      punctuation: [/[\\[\\]().,:`]|->/],\n      operator: [/[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/, /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/, /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/],\n      keyword: /\\b(?:false|off|on|no|true|yes)\\b/\n    }; // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g;\n      var smartyLitteralStart = '{literal}';\n      var smartyLitteralEnd = '{/literal}';\n      var smartyLitteralMode = false;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'smarty', smartyPattern, function (match) {\n        // Smarty tags inside {literal} block are ignored\n        if (match === smartyLitteralEnd) {\n          smartyLitteralMode = false;\n        }\n        if (!smartyLitteralMode) {\n          if (match === smartyLitteralStart) {\n            smartyLitteralMode = true;\n          }\n          return true;\n        }\n        return false;\n      });\n    }); // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty');\n    });\n  })(Prism);\n}","map":{"version":3,"names":["refractorMarkupTemplating","require","module","exports","smarty","displayName","aliases","Prism","register","languages","comment","delimiter","pattern","alias","string","number","variable","lookbehind","function","inside","operator","punctuation","keyword","hooks","add","env","smartyPattern","smartyLitteralStart","smartyLitteralEnd","smartyLitteralMode","buildPlaceholders","match","tokenizePlaceholders"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/refractor/lang/smarty.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = smarty\nsmarty.displayName = 'smarty'\nsmarty.aliases = []\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /* TODO\nAdd support for variables inside double quoted strings\nAdd support for {php}\n*/\n  ;(function(Prism) {\n    Prism.languages.smarty = {\n      comment: /\\{\\*[\\s\\S]*?\\*\\}/,\n      delimiter: {\n        pattern: /^\\{|\\}$/i,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [\n        /\\$(?!\\d)\\w+/,\n        /#(?!\\d)\\w+#/,\n        {\n          pattern: /(\\.|->)(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n          lookbehind: true\n        }\n      ],\n      function: [\n        {\n          pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        /^\\/?(?!\\d)\\w+/,\n        /(?!\\d)\\w+(?=\\()/\n      ],\n      'attr-name': {\n        // Value is made optional because it may have already been tokenized\n        pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n        inside: {\n          variable: {\n            pattern: /(=\\s*)(?!\\d)\\w+/,\n            lookbehind: true\n          },\n          operator: /=/\n        }\n      },\n      punctuation: [/[\\[\\]().,:`]|->/],\n      operator: [\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n        /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/\n      ],\n      keyword: /\\b(?:false|off|on|no|true|yes)\\b/\n    } // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function(env) {\n      var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g\n      var smartyLitteralStart = '{literal}'\n      var smartyLitteralEnd = '{/literal}'\n      var smartyLitteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'smarty',\n        smartyPattern,\n        function(match) {\n          // Smarty tags inside {literal} block are ignored\n          if (match === smartyLitteralEnd) {\n            smartyLitteralMode = false\n          }\n          if (!smartyLitteralMode) {\n            if (match === smartyLitteralStart) {\n              smartyLitteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\n    })\n  })(Prism)\n}\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,yBAAyB,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACjEC,MAAM,CAACC,OAAO,GAAGC,MAAM;AACvBA,MAAM,CAACC,WAAW,GAAG,QAAQ;AAC7BD,MAAM,CAACE,OAAO,GAAG,EAAE;AACnB,SAASF,MAAMA,CAACG,KAAK,EAAE;EACrBA,KAAK,CAACC,QAAQ,CAACR,yBAAyB;EACxC;AACF;AACA;AACA,IAHE;EAIC,CAAC,UAASO,KAAK,EAAE;IAChBA,KAAK,CAACE,SAAS,CAACL,MAAM,GAAG;MACvBM,OAAO,EAAE,kBAAkB;MAC3BC,SAAS,EAAE;QACTC,OAAO,EAAE,UAAU;QACnBC,KAAK,EAAE;MACT,CAAC;MACDC,MAAM,EAAE,kCAAkC;MAC1CC,MAAM,EAAE,0DAA0D;MAClEC,QAAQ,EAAE,CACR,aAAa,EACb,aAAa,EACb;QACEJ,OAAO,EAAE,kBAAkB;QAC3BK,UAAU,EAAE;MACd,CAAC,EACD;QACEL,OAAO,EAAE,qBAAqB;QAC9BK,UAAU,EAAE;MACd,CAAC,CACF;MACDC,QAAQ,EAAE,CACR;QACEN,OAAO,EAAE,oBAAoB;QAC7BK,UAAU,EAAE;MACd,CAAC,EACD,eAAe,EACf,iBAAiB,CAClB;MACD,WAAW,EAAE;QACX;QACAL,OAAO,EAAE,0BAA0B;QACnCO,MAAM,EAAE;UACNH,QAAQ,EAAE;YACRJ,OAAO,EAAE,iBAAiB;YAC1BK,UAAU,EAAE;UACd,CAAC;UACDG,QAAQ,EAAE;QACZ;MACF,CAAC;MACDC,WAAW,EAAE,CAAC,iBAAiB,CAAC;MAChCD,QAAQ,EAAE,CACR,kCAAkC,EAClC,gDAAgD,EAChD,gDAAgD,CACjD;MACDE,OAAO,EAAE;IACX,CAAC,EAAC;IACFf,KAAK,CAACgB,KAAK,CAACC,GAAG,CAAC,iBAAiB,EAAE,UAASC,GAAG,EAAE;MAC/C,IAAIC,aAAa,GAAG,gCAAgC;MACpD,IAAIC,mBAAmB,GAAG,WAAW;MACrC,IAAIC,iBAAiB,GAAG,YAAY;MACpC,IAAIC,kBAAkB,GAAG,KAAK;MAC9BtB,KAAK,CAACE,SAAS,CAAC,mBAAmB,CAAC,CAACqB,iBAAiB,CACpDL,GAAG,EACH,QAAQ,EACRC,aAAa,EACb,UAASK,KAAK,EAAE;QACd;QACA,IAAIA,KAAK,KAAKH,iBAAiB,EAAE;UAC/BC,kBAAkB,GAAG,KAAK;QAC5B;QACA,IAAI,CAACA,kBAAkB,EAAE;UACvB,IAAIE,KAAK,KAAKJ,mBAAmB,EAAE;YACjCE,kBAAkB,GAAG,IAAI;UAC3B;UACA,OAAO,IAAI;QACb;QACA,OAAO,KAAK;MACd,CACF,CAAC;IACH,CAAC,CAAC,EAAC;IACHtB,KAAK,CAACgB,KAAK,CAACC,GAAG,CAAC,gBAAgB,EAAE,UAASC,GAAG,EAAE;MAC9ClB,KAAK,CAACE,SAAS,CAAC,mBAAmB,CAAC,CAACuB,oBAAoB,CAACP,GAAG,EAAE,QAAQ,CAAC;IAC1E,CAAC,CAAC;EACJ,CAAC,EAAElB,KAAK,CAAC;AACX"},"metadata":{},"sourceType":"script","externalDependencies":[]}