{"ast":null,"code":"'use strict';\n\nmodule.exports = haxe;\nhaxe.displayName = 'haxe';\nhaxe.aliases = [];\nfunction haxe(Prism) {\n  Prism.languages.haxe = Prism.languages.extend('clike', {\n    // Strings can be multi-line\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,\n          lookbehind: true,\n          inside: {\n            interpolation: {\n              pattern: /^\\$\\w*/,\n              alias: 'variable'\n            } // See rest below\n          }\n        }\n      }\n    },\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n    keyword: /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,\n    operator: /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/\n  });\n  Prism.languages.insertBefore('haxe', 'class-name', {\n    regex: {\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,\n      greedy: true\n    }\n  });\n  Prism.languages.insertBefore('haxe', 'keyword', {\n    preprocessor: {\n      pattern: /#\\w+/,\n      alias: 'builtin'\n    },\n    metadata: {\n      pattern: /@:?\\w+/,\n      alias: 'symbol'\n    },\n    reification: {\n      pattern: /\\$(?:\\w+|(?=\\{))/,\n      alias: 'variable'\n    }\n  });\n  Prism.languages.haxe['string'].inside['interpolation'].inside.rest = Prism.languages.haxe;\n  delete Prism.languages.haxe['class-name'];\n}","map":{"version":3,"names":["module","exports","haxe","displayName","aliases","Prism","languages","extend","string","pattern","greedy","inside","interpolation","lookbehind","alias","keyword","operator","insertBefore","regex","preprocessor","metadata","reification","rest"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/refractor/lang/haxe.js"],"sourcesContent":["'use strict'\n\nmodule.exports = haxe\nhaxe.displayName = 'haxe'\nhaxe.aliases = []\nfunction haxe(Prism) {\n  Prism.languages.haxe = Prism.languages.extend('clike', {\n    // Strings can be multi-line\n    string: {\n      pattern: /([\"'])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^}]+\\})/,\n          lookbehind: true,\n          inside: {\n            interpolation: {\n              pattern: /^\\$\\w*/,\n              alias: 'variable'\n            } // See rest below\n          }\n        }\n      }\n    },\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n    keyword: /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|from|for|function|if|implements|import|in|inline|interface|macro|new|null|override|public|private|return|static|super|switch|throw|to|try|typedef|using|var|while)(?!\\.)\\b/,\n    operator: /\\.{3}|\\+\\+?|-[->]?|[=!]=?|&&?|\\|\\|?|<[<=]?|>[>=]?|[*\\/%~^]/\n  })\n  Prism.languages.insertBefore('haxe', 'class-name', {\n    regex: {\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[igmsu]*/,\n      greedy: true\n    }\n  })\n  Prism.languages.insertBefore('haxe', 'keyword', {\n    preprocessor: {\n      pattern: /#\\w+/,\n      alias: 'builtin'\n    },\n    metadata: {\n      pattern: /@:?\\w+/,\n      alias: 'symbol'\n    },\n    reification: {\n      pattern: /\\$(?:\\w+|(?=\\{))/,\n      alias: 'variable'\n    }\n  })\n  Prism.languages.haxe['string'].inside['interpolation'].inside.rest =\n    Prism.languages.haxe\n  delete Prism.languages.haxe['class-name']\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,IAAI;AACrBA,IAAI,CAACC,WAAW,GAAG,MAAM;AACzBD,IAAI,CAACE,OAAO,GAAG,EAAE;AACjB,SAASF,IAAIA,CAACG,KAAK,EAAE;EACnBA,KAAK,CAACC,SAAS,CAACJ,IAAI,GAAGG,KAAK,CAACC,SAAS,CAACC,MAAM,CAAC,OAAO,EAAE;IACrD;IACAC,MAAM,EAAE;MACNC,OAAO,EAAE,mCAAmC;MAC5CC,MAAM,EAAE,IAAI;MACZC,MAAM,EAAE;QACNC,aAAa,EAAE;UACbH,OAAO,EAAE,8BAA8B;UACvCI,UAAU,EAAE,IAAI;UAChBF,MAAM,EAAE;YACNC,aAAa,EAAE;cACbH,OAAO,EAAE,QAAQ;cACjBK,KAAK,EAAE;YACT,CAAC,CAAC;UACJ;QACF;MACF;IACF,CAAC;IACD;IACAC,OAAO,EAAE,uRAAuR;IAChSC,QAAQ,EAAE;EACZ,CAAC,CAAC;EACFX,KAAK,CAACC,SAAS,CAACW,YAAY,CAAC,MAAM,EAAE,YAAY,EAAE;IACjDC,KAAK,EAAE;MACLT,OAAO,EAAE,mCAAmC;MAC5CC,MAAM,EAAE;IACV;EACF,CAAC,CAAC;EACFL,KAAK,CAACC,SAAS,CAACW,YAAY,CAAC,MAAM,EAAE,SAAS,EAAE;IAC9CE,YAAY,EAAE;MACZV,OAAO,EAAE,MAAM;MACfK,KAAK,EAAE;IACT,CAAC;IACDM,QAAQ,EAAE;MACRX,OAAO,EAAE,QAAQ;MACjBK,KAAK,EAAE;IACT,CAAC;IACDO,WAAW,EAAE;MACXZ,OAAO,EAAE,kBAAkB;MAC3BK,KAAK,EAAE;IACT;EACF,CAAC,CAAC;EACFT,KAAK,CAACC,SAAS,CAACJ,IAAI,CAAC,QAAQ,CAAC,CAACS,MAAM,CAAC,eAAe,CAAC,CAACA,MAAM,CAACW,IAAI,GAChEjB,KAAK,CAACC,SAAS,CAACJ,IAAI;EACtB,OAAOG,KAAK,CAACC,SAAS,CAACJ,IAAI,CAAC,YAAY,CAAC;AAC3C"},"metadata":{},"sourceType":"script","externalDependencies":[]}