{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonArrow = exports.CommonDiagonalArrow = exports.CommonDiagonalStrike = exports.CommonBorder2 = exports.CommonBorder = exports.arrowBBox = exports.diagonalArrowDef = exports.arrowDef = exports.arrowBBoxW = exports.arrowBBoxHD = exports.arrowHead = exports.fullBorder = exports.fullPadding = exports.fullBBox = exports.sideNames = exports.sideIndex = exports.SOLID = exports.PADDING = exports.THICKNESS = exports.ARROWY = exports.ARROWDX = exports.ARROWX = void 0;\nexports.ARROWX = 4, exports.ARROWDX = 1, exports.ARROWY = 2;\nexports.THICKNESS = .067;\nexports.PADDING = .2;\nexports.SOLID = exports.THICKNESS + 'em solid';\nexports.sideIndex = {\n  top: 0,\n  right: 1,\n  bottom: 2,\n  left: 3\n};\nexports.sideNames = Object.keys(exports.sideIndex);\nexports.fullBBox = function (node) {\n  return new Array(4).fill(node.thickness + node.padding);\n};\nexports.fullPadding = function (node) {\n  return new Array(4).fill(node.padding);\n};\nexports.fullBorder = function (node) {\n  return new Array(4).fill(node.thickness);\n};\nvar arrowHead = function (node) {\n  return Math.max(node.padding, node.thickness * (node.arrowhead.x + node.arrowhead.dx + 1));\n};\nexports.arrowHead = arrowHead;\nvar arrowBBoxHD = function (node, TRBL) {\n  if (node.childNodes[0]) {\n    var _a = node.childNodes[0].getBBox(),\n      h = _a.h,\n      d = _a.d;\n    TRBL[0] = TRBL[2] = Math.max(0, node.thickness * node.arrowhead.y - (h + d) / 2);\n  }\n  return TRBL;\n};\nexports.arrowBBoxHD = arrowBBoxHD;\nvar arrowBBoxW = function (node, TRBL) {\n  if (node.childNodes[0]) {\n    var w = node.childNodes[0].getBBox().w;\n    TRBL[1] = TRBL[3] = Math.max(0, node.thickness * node.arrowhead.y - w / 2);\n  }\n  return TRBL;\n};\nexports.arrowBBoxW = arrowBBoxW;\nexports.arrowDef = {\n  up: [-Math.PI / 2, false, true, 'verticalstrike'],\n  down: [Math.PI / 2, false, true, 'verticakstrike'],\n  right: [0, false, false, 'horizontalstrike'],\n  left: [Math.PI, false, false, 'horizontalstrike'],\n  updown: [Math.PI / 2, true, true, 'verticalstrike uparrow downarrow'],\n  leftright: [0, true, false, 'horizontalstrike leftarrow rightarrow']\n};\nexports.diagonalArrowDef = {\n  updiagonal: [-1, 0, false, 'updiagonalstrike northeastarrow'],\n  northeast: [-1, 0, false, 'updiagonalstrike updiagonalarrow'],\n  southeast: [1, 0, false, 'downdiagonalstrike'],\n  northwest: [1, Math.PI, false, 'downdiagonalstrike'],\n  southwest: [-1, Math.PI, false, 'updiagonalstrike'],\n  northeastsouthwest: [-1, 0, true, 'updiagonalstrike northeastarrow updiagonalarrow southwestarrow'],\n  northwestsoutheast: [1, 0, true, 'downdiagonalstrike northwestarrow southeastarrow']\n};\nexports.arrowBBox = {\n  up: function (node) {\n    return (0, exports.arrowBBoxW)(node, [(0, exports.arrowHead)(node), 0, node.padding, 0]);\n  },\n  down: function (node) {\n    return (0, exports.arrowBBoxW)(node, [node.padding, 0, (0, exports.arrowHead)(node), 0]);\n  },\n  right: function (node) {\n    return (0, exports.arrowBBoxHD)(node, [0, (0, exports.arrowHead)(node), 0, node.padding]);\n  },\n  left: function (node) {\n    return (0, exports.arrowBBoxHD)(node, [0, node.padding, 0, (0, exports.arrowHead)(node)]);\n  },\n  updown: function (node) {\n    return (0, exports.arrowBBoxW)(node, [(0, exports.arrowHead)(node), 0, (0, exports.arrowHead)(node), 0]);\n  },\n  leftright: function (node) {\n    return (0, exports.arrowBBoxHD)(node, [0, (0, exports.arrowHead)(node), 0, (0, exports.arrowHead)(node)]);\n  }\n};\nvar CommonBorder = function (render) {\n  return function (side) {\n    var i = exports.sideIndex[side];\n    return [side, {\n      renderer: render,\n      bbox: function (node) {\n        var bbox = [0, 0, 0, 0];\n        bbox[i] = node.thickness + node.padding;\n        return bbox;\n      },\n      border: function (node) {\n        var bbox = [0, 0, 0, 0];\n        bbox[i] = node.thickness;\n        return bbox;\n      }\n    }];\n  };\n};\nexports.CommonBorder = CommonBorder;\nvar CommonBorder2 = function (render) {\n  return function (name, side1, side2) {\n    var i1 = exports.sideIndex[side1];\n    var i2 = exports.sideIndex[side2];\n    return [name, {\n      renderer: render,\n      bbox: function (node) {\n        var t = node.thickness + node.padding;\n        var bbox = [0, 0, 0, 0];\n        bbox[i1] = bbox[i2] = t;\n        return bbox;\n      },\n      border: function (node) {\n        var bbox = [0, 0, 0, 0];\n        bbox[i1] = bbox[i2] = node.thickness;\n        return bbox;\n      },\n      remove: side1 + ' ' + side2\n    }];\n  };\n};\nexports.CommonBorder2 = CommonBorder2;\nvar CommonDiagonalStrike = function (render) {\n  return function (name) {\n    var cname = 'mjx-' + name.charAt(0) + 'strike';\n    return [name + 'diagonalstrike', {\n      renderer: render(cname),\n      bbox: exports.fullBBox\n    }];\n  };\n};\nexports.CommonDiagonalStrike = CommonDiagonalStrike;\nvar CommonDiagonalArrow = function (render) {\n  return function (name) {\n    var _a = __read(exports.diagonalArrowDef[name], 4),\n      c = _a[0],\n      pi = _a[1],\n      double = _a[2],\n      remove = _a[3];\n    return [name + 'arrow', {\n      renderer: function (node, _child) {\n        var _a = __read(node.arrowAW(), 2),\n          a = _a[0],\n          W = _a[1];\n        var arrow = node.arrow(W, c * (a - pi), double);\n        render(node, arrow);\n      },\n      bbox: function (node) {\n        var _a = node.arrowData(),\n          a = _a.a,\n          x = _a.x,\n          y = _a.y;\n        var _b = __read([node.arrowhead.x, node.arrowhead.y, node.arrowhead.dx], 3),\n          ax = _b[0],\n          ay = _b[1],\n          adx = _b[2];\n        var _c = __read(node.getArgMod(ax + adx, ay), 2),\n          b = _c[0],\n          ar = _c[1];\n        var dy = y + (b > a ? node.thickness * ar * Math.sin(b - a) : 0);\n        var dx = x + (b > Math.PI / 2 - a ? node.thickness * ar * Math.sin(b + a - Math.PI / 2) : 0);\n        return [dy, dx, dy, dx];\n      },\n      remove: remove\n    }];\n  };\n};\nexports.CommonDiagonalArrow = CommonDiagonalArrow;\nvar CommonArrow = function (render) {\n  return function (name) {\n    var _a = __read(exports.arrowDef[name], 4),\n      angle = _a[0],\n      double = _a[1],\n      isVertical = _a[2],\n      remove = _a[3];\n    return [name + 'arrow', {\n      renderer: function (node, _child) {\n        var _a = node.getBBox(),\n          w = _a.w,\n          h = _a.h,\n          d = _a.d;\n        var _b = __read(isVertical ? [h + d, 'X'] : [w, 'Y'], 2),\n          W = _b[0],\n          offset = _b[1];\n        var dd = node.getOffset(offset);\n        var arrow = node.arrow(W, angle, double, offset, dd);\n        render(node, arrow);\n      },\n      bbox: exports.arrowBBox[name],\n      remove: remove\n    }];\n  };\n};\nexports.CommonArrow = CommonArrow;","map":{"version":3,"names":["exports","ARROWX","ARROWDX","ARROWY","THICKNESS","PADDING","SOLID","sideIndex","top","right","bottom","left","sideNames","Object","keys","fullBBox","node","Array","fill","thickness","padding","fullPadding","fullBorder","arrowHead","Math","max","arrowhead","x","dx","arrowBBoxHD","TRBL","childNodes","_a","getBBox","h","d","y","arrowBBoxW","w","arrowDef","up","PI","down","updown","leftright","diagonalArrowDef","updiagonal","northeast","southeast","northwest","southwest","northeastsouthwest","northwestsoutheast","arrowBBox","CommonBorder","render","side","i","renderer","bbox","border","CommonBorder2","name","side1","side2","i1","i2","t","remove","CommonDiagonalStrike","cname","charAt","CommonDiagonalArrow","__read","c","pi","double","_child","arrowAW","a","W","arrow","arrowData","_b","ax","ay","adx","_c","getArgMod","b","ar","dy","sin","CommonArrow","angle","isVertical","offset","dd","getOffset"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/output/common/Notation.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements utilities for notations for menclose elements\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AnyWrapper} from './Wrapper.js';\nimport {CommonMenclose} from './Wrappers/menclose.js';\n\n/*****************************************************************/\n\nexport const ARROWX = 4, ARROWDX = 1, ARROWY = 2;  // default relative arrowhead values\n\nexport const THICKNESS = .067;  // default rule thickness\nexport const PADDING = .2;      // default padding\n\nexport const SOLID = THICKNESS + 'em solid';  // a solid border\n\n/*****************************************************************/\n\n/**\n * Shorthand for CommonMenclose\n */\nexport type Menclose = CommonMenclose<any, any, any>;\n\n/**\n * Top, right, bottom, left padding data\n */\nexport type PaddingData = [number, number, number, number];\n\n/**\n * The functions used for notation definitions\n *\n * @templare N  The DOM node class\n */\nexport type Renderer<W extends AnyWrapper, N> = (node: W, child: N) => void;\nexport type BBoxExtender<W extends AnyWrapper> = (node: W) => PaddingData;\nexport type BBoxBorder<W extends AnyWrapper> = (node: W) => PaddingData;\nexport type Initializer<W extends AnyWrapper> = (node: W) => void;\n\n/**\n * The definition of a notation\n *\n * @template W  The menclose wrapper class\n * @templare N  The DOM node class\n */\nexport type NotationDef<W extends AnyWrapper, N> = {\n  renderer: Renderer<W, N>;  // renders the DOM nodes for the notation\n  bbox: BBoxExtender<W>;     // gives the offsets to the child bounding box: [top, right, bottom, left]\n  border?: BBoxBorder<W>;    // gives the amount of the bbox offset that is due to borders on the child\n  renderChild?: boolean;     // true if the notation is used to render the child directly (e.g., radical)\n  init?: Initializer<W>;     // function to be called during wrapper construction\n  remove?: string;           // list of notations that are suppressed by this one\n};\n\n/**\n * For defining notation maps\n *\n * @template W  The menclose wrapper class\n * @templare N  The DOM node class\n */\nexport type DefPair<W extends AnyWrapper, N> = [string, NotationDef<W, N>];\nexport type DefList<W extends AnyWrapper, N> = Map<string, NotationDef<W, N>>;\n\nexport type DefPairF<T, W extends AnyWrapper, N> = (name: T) => DefPair<W, N>;\n\n/**\n * The list of notations for an menclose element\n *\n * @template W  The menclose wrapper class\n * @templare N  The DOM node class\n */\nexport type List<W extends AnyWrapper, N> = {[notation: string]: NotationDef<W, N>};\n\n/*****************************************************************/\n\n/**\n * The names and indices of sides for borders, padding, etc.\n */\nexport const sideIndex = {top: 0, right: 1, bottom: 2, left: 3};\nexport type Side = keyof typeof sideIndex;\nexport const sideNames = Object.keys(sideIndex) as Side[];\n\n/**\n * Common BBox and Border functions\n */\nexport const fullBBox = ((node) => new Array(4).fill(node.thickness + node.padding)) as BBoxExtender<Menclose>;\nexport const fullPadding = ((node) => new Array(4).fill(node.padding)) as BBoxExtender<Menclose>;\nexport const fullBorder = ((node) => new Array(4).fill(node.thickness)) as BBoxBorder<Menclose>;\n\n/*****************************************************************/\n\n/**\n * The length of an arrowhead\n */\nexport const arrowHead = (node: Menclose) => {\n  return Math.max(node.padding, node.thickness * (node.arrowhead.x + node.arrowhead.dx + 1));\n};\n\n/**\n * Adjust short bbox for tall arrow heads\n */\nexport const arrowBBoxHD = (node: Menclose, TRBL: PaddingData) => {\n  if (node.childNodes[0]) {\n    const {h, d} = node.childNodes[0].getBBox();\n    TRBL[0] = TRBL[2] = Math.max(0, node.thickness * node.arrowhead.y - (h + d) / 2);\n  }\n  return TRBL;\n};\n\n/**\n * Adjust thin bbox for wide arrow heads\n */\nexport const arrowBBoxW = (node: Menclose, TRBL: PaddingData) => {\n  if (node.childNodes[0]) {\n    const {w} = node.childNodes[0].getBBox();\n    TRBL[1] = TRBL[3] = Math.max(0, node.thickness * node.arrowhead.y - w / 2);\n  }\n  return TRBL;\n};\n\n/**\n * The data for horizontal and vertical arrow notations\n *   [angle, double, isVertical, remove]\n */\nexport const arrowDef = {\n  up:        [-Math.PI / 2, false, true,  'verticalstrike'],\n  down:      [ Math.PI / 2, false, true,  'verticakstrike'],\n  right:     [ 0,           false, false, 'horizontalstrike'],\n  left:      [ Math.PI,     false, false, 'horizontalstrike'],\n  updown:    [ Math.PI / 2, true,  true,  'verticalstrike uparrow downarrow'],\n  leftright: [ 0,           true,  false, 'horizontalstrike leftarrow rightarrow']\n} as {[name: string]: [number, boolean, boolean, string]};\n\n/**\n * The data for diagonal arrow notations\n *   [c, pi, double, remove]\n */\nexport const diagonalArrowDef = {\n  updiagonal:         [-1, 0,       false, 'updiagonalstrike northeastarrow'],\n  northeast:          [-1, 0,       false, 'updiagonalstrike updiagonalarrow'],\n  southeast:          [ 1, 0,       false, 'downdiagonalstrike'],\n  northwest:          [ 1, Math.PI, false, 'downdiagonalstrike'],\n  southwest:          [-1, Math.PI, false, 'updiagonalstrike'],\n  northeastsouthwest: [-1, 0,       true,  'updiagonalstrike northeastarrow updiagonalarrow southwestarrow'],\n  northwestsoutheast: [ 1, 0,       true,  'downdiagonalstrike northwestarrow southeastarrow']\n} as {[name: string]: [number, number, boolean, string]};\n\n/**\n * The BBox functions for horizontal and vertical arrows\n */\nexport const arrowBBox = {\n  up:    (node) => arrowBBoxW(node, [arrowHead(node), 0, node.padding, 0]),\n  down:  (node) => arrowBBoxW(node, [node.padding, 0, arrowHead(node), 0]),\n  right: (node) => arrowBBoxHD(node, [0, arrowHead(node), 0, node.padding]),\n  left:  (node) => arrowBBoxHD(node, [0, node.padding, 0, arrowHead(node)]),\n  updown:    (node) => arrowBBoxW(node, [arrowHead(node), 0, arrowHead(node), 0]),\n  leftright: (node) => arrowBBoxHD(node, [0, arrowHead(node), 0, arrowHead(node)])\n} as {[name: string]: BBoxExtender<Menclose>};\n\n/*****************************************************************/\n\n/**\n * @param {Renderer} render     The function for adding the border to the node\n * @return {string => DefPair}  The function returingn the notation definition\n *                              for the notation having a line on the given side\n */\nexport const CommonBorder = function<W extends Menclose, N>(render: Renderer<W, N>): DefPairF<Side, W, N> {\n  /**\n   * @param {string} side   The side on which a border should appear\n   * @return {DefPair}      The notation definition for the notation having a line on the given side\n   */\n  return (side: Side) => {\n    const i = sideIndex[side];\n    return [side, {\n      //\n      // Add the border to the main child object\n      //\n      renderer: render,\n      //\n      // Indicate the extra space on the given side\n      //\n      bbox: (node) => {\n        const bbox = [0, 0, 0, 0] as PaddingData;\n        bbox[i] = node.thickness + node.padding;\n        return bbox;\n      },\n      //\n      // Indicate the border on the given side\n      //\n      border: (node) => {\n        const bbox = [0, 0, 0, 0] as PaddingData;\n        bbox[i] = node.thickness;\n        return bbox;\n      }\n    }];\n  };\n};\n\n/**\n * @param {Renderer} render                    The function for adding the borders to the node\n * @return {(sring, Side, Side) => DefPair}    The function returning the notation definition\n *                                             for the notation having lines on two sides\n */\nexport const CommonBorder2 = function<W extends Menclose, N>(render: Renderer<W, N>):\n(name: string, side1: Side, side2: Side) => DefPair<W, N> {\n  /**\n   * @param {string} name    The name of the notation to define\n   * @param {Side} side1   The first side to get a border\n   * @param {Side} side2   The second side to get a border\n   * @return {DefPair}       The notation definition for the notation having lines on two sides\n   */\n  return (name: string, side1: Side, side2: Side) => {\n    const i1 = sideIndex[side1];\n    const i2 = sideIndex[side2];\n    return [name, {\n      //\n      // Add the border along the given sides\n      //\n      renderer: render,\n      //\n      // Mark the extra space along the two sides\n      //\n      bbox: (node) => {\n        const t = node.thickness + node.padding;\n        const bbox = [0, 0, 0, 0] as PaddingData;\n        bbox[i1] = bbox[i2] = t;\n        return bbox;\n      },\n      //\n      // Indicate the border on the two sides\n      //\n      border: (node) => {\n        const bbox = [0, 0, 0, 0] as PaddingData;\n        bbox[i1] = bbox[i2] = node.thickness;\n        return bbox;\n      },\n      //\n      // Remove the single side notations, if present\n      //\n      remove: side1 + ' ' + side2\n    }];\n  };\n};\n\n/*****************************************************************/\n\n/**\n * @param {string => Renderer} render      The function for adding the strike to the node\n * @return {string => DefPair}   The function returning the notation definition for the diagonal strike\n */\nexport const CommonDiagonalStrike = function<W extends Menclose, N>(render: (sname: string) => Renderer<W, N>):\nDefPairF<string, W, N> {\n  /**\n   * @param {string} name  The name of the diagonal strike to define\n   * @return {DefPair}     The notation definition for the diagonal strike\n   */\n  return (name: string) => {\n    const cname = 'mjx-' + name.charAt(0) + 'strike';\n    return [name + 'diagonalstrike', {\n      //\n      // Find the angle and width from the bounding box size and create the diagonal line\n      //\n      renderer: render(cname),\n      //\n      //  Add padding all around\n      //\n      bbox: fullBBox\n    }];\n  };\n};\n\n/*****************************************************************/\n\n/**\n * @param {Renderer} render     The function to add the arrow to the node\n * @return {string => DefPair}  The funciton returning the notation definition for the diagonal arrow\n */\nexport const CommonDiagonalArrow = function<W extends Menclose, N>(render: Renderer<W, N>): DefPairF<string, W, N> {\n  /**\n   * @param {string} name   The name of the diagonal arrow to define\n   * @return {DefPair}      The notation definition for the diagonal arrow\n   */\n  return (name: string) => {\n    const [c, pi, double, remove] = diagonalArrowDef[name];\n    return [name + 'arrow', {\n      //\n      // Find the angle and width from the bounding box size and create\n      //   the arrow from them and the other arrow data\n      //\n      renderer: (node, _child) => {\n        const [a, W] = node.arrowAW();\n       const arrow = node.arrow(W, c * (a - pi), double);\n        render(node, arrow);\n      },\n      //\n      // Add space for the arrowhead all around\n      //\n      bbox: (node) => {\n        const {a, x, y} = node.arrowData();\n        const [ax, ay, adx] = [node.arrowhead.x, node.arrowhead.y, node.arrowhead.dx];\n        const [b, ar] = node.getArgMod(ax + adx, ay);\n        const dy = y + (b > a ? node.thickness * ar * Math.sin(b - a) : 0);\n        const dx = x + (b > Math.PI / 2 - a ? node.thickness * ar * Math.sin(b + a - Math.PI / 2) : 0);\n        return [dy, dx, dy, dx];\n      },\n      //\n      // Remove redundant notations\n      //\n      remove: remove\n    }];\n  };\n};\n\n/**\n * @param {Renderer} render     The function to add the arrow to the node\n * @return {string => DefPair}  The function returning the notation definition for the arrow\n */\nexport const CommonArrow = function<W extends Menclose, N>(render: Renderer<W, N>): DefPairF<string, W, N> {\n  /**\n   * @param {string} name   The name of the horizontal or vertical arrow to define\n   * @return {DefPair}      The notation definition for the arrow\n   */\n  return (name: string) => {\n    const [angle, double, isVertical, remove] = arrowDef[name];\n    return [name + 'arrow', {\n      //\n      // Get the arrow height and depth from the bounding box and the arrow direction\n      //   then create the arrow from that and the other data\n      //\n      renderer: (node, _child) => {\n        const {w, h, d} = node.getBBox();\n        const [W, offset] = (isVertical ? [h + d, 'X'] : [w, 'Y']);\n        const dd = node.getOffset(offset);\n        const arrow = node.arrow(W, angle, double, offset, dd);\n        render(node, arrow);\n      },\n      //\n      // Add the padding to the proper sides\n      //\n      bbox: arrowBBox[name],\n      //\n      // Remove redundant notations\n      //\n      remove: remove\n    }];\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BaA,OAAA,CAAAC,MAAM,GAAG,CAAC,EAAED,OAAA,CAAAE,OAAO,GAAG,CAAC,EAAEF,OAAA,CAAAG,MAAM,GAAG,CAAC;AAEnCH,OAAA,CAAAI,SAAS,GAAG,IAAI;AAChBJ,OAAA,CAAAK,OAAO,GAAG,EAAE;AAEZL,OAAA,CAAAM,KAAK,GAAGN,OAAA,CAAAI,SAAS,GAAG,UAAU;AA+D9BJ,OAAA,CAAAO,SAAS,GAAG;EAACC,GAAG,EAAE,CAAC;EAAEC,KAAK,EAAE,CAAC;EAAEC,MAAM,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAC,CAAC;AAElDX,OAAA,CAAAY,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACd,OAAA,CAAAO,SAAS,CAAW;AAK5CP,OAAA,CAAAe,QAAQ,GAAI,UAACC,IAAI;EAAK,WAAIC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACF,IAAI,CAACG,SAAS,GAAGH,IAAI,CAACI,OAAO,CAAC;AAAhD,CAA2E;AACjGpB,OAAA,CAAAqB,WAAW,GAAI,UAACL,IAAI;EAAK,WAAIC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACF,IAAI,CAACI,OAAO,CAAC;AAA/B,CAA0D;AACnFpB,OAAA,CAAAsB,UAAU,GAAI,UAACN,IAAI;EAAK,WAAIC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACF,IAAI,CAACG,SAAS,CAAC;AAAjC,CAA0D;AAOxF,IAAMI,SAAS,GAAG,SAAAA,CAACP,IAAc;EACtC,OAAOQ,IAAI,CAACC,GAAG,CAACT,IAAI,CAACI,OAAO,EAAEJ,IAAI,CAACG,SAAS,IAAIH,IAAI,CAACU,SAAS,CAACC,CAAC,GAAGX,IAAI,CAACU,SAAS,CAACE,EAAE,GAAG,CAAC,CAAC,CAAC;AAC5F,CAAC;AAFY5B,OAAA,CAAAuB,SAAS,GAAAA,SAAA;AAOf,IAAMM,WAAW,GAAG,SAAAA,CAACb,IAAc,EAAEc,IAAiB;EAC3D,IAAId,IAAI,CAACe,UAAU,CAAC,CAAC,CAAC,EAAE;IAChB,IAAAC,EAAA,GAAShB,IAAI,CAACe,UAAU,CAAC,CAAC,CAAC,CAACE,OAAO,EAAE;MAApCC,CAAC,GAAAF,EAAA,CAAAE,CAAA;MAAEC,CAAC,GAAAH,EAAA,CAAAG,CAAgC;IAC3CL,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAGN,IAAI,CAACC,GAAG,CAAC,CAAC,EAAET,IAAI,CAACG,SAAS,GAAGH,IAAI,CAACU,SAAS,CAACU,CAAC,GAAG,CAACF,CAAC,GAAGC,CAAC,IAAI,CAAC,CAAC;;EAElF,OAAOL,IAAI;AACb,CAAC;AANY9B,OAAA,CAAA6B,WAAW,GAAAA,WAAA;AAWjB,IAAMQ,UAAU,GAAG,SAAAA,CAACrB,IAAc,EAAEc,IAAiB;EAC1D,IAAId,IAAI,CAACe,UAAU,CAAC,CAAC,CAAC,EAAE;IACf,IAAAO,CAAC,GAAItB,IAAI,CAACe,UAAU,CAAC,CAAC,CAAC,CAACE,OAAO,EAAE,CAAAK,CAAhC;IACRR,IAAI,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAGN,IAAI,CAACC,GAAG,CAAC,CAAC,EAAET,IAAI,CAACG,SAAS,GAAGH,IAAI,CAACU,SAAS,CAACU,CAAC,GAAGE,CAAC,GAAG,CAAC,CAAC;;EAE5E,OAAOR,IAAI;AACb,CAAC;AANY9B,OAAA,CAAAqC,UAAU,GAAAA,UAAA;AAYVrC,OAAA,CAAAuC,QAAQ,GAAG;EACtBC,EAAE,EAAS,CAAC,CAAChB,IAAI,CAACiB,EAAE,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,EAAG,gBAAgB,CAAC;EACzDC,IAAI,EAAO,CAAElB,IAAI,CAACiB,EAAE,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,EAAG,gBAAgB,CAAC;EACzDhC,KAAK,EAAM,CAAE,CAAC,EAAY,KAAK,EAAE,KAAK,EAAE,kBAAkB,CAAC;EAC3DE,IAAI,EAAO,CAAEa,IAAI,CAACiB,EAAE,EAAM,KAAK,EAAE,KAAK,EAAE,kBAAkB,CAAC;EAC3DE,MAAM,EAAK,CAAEnB,IAAI,CAACiB,EAAE,GAAG,CAAC,EAAE,IAAI,EAAG,IAAI,EAAG,kCAAkC,CAAC;EAC3EG,SAAS,EAAE,CAAE,CAAC,EAAY,IAAI,EAAG,KAAK,EAAE,uCAAuC;CACxB;AAM5C5C,OAAA,CAAA6C,gBAAgB,GAAG;EAC9BC,UAAU,EAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAQ,KAAK,EAAE,iCAAiC,CAAC;EAC3EC,SAAS,EAAW,CAAC,CAAC,CAAC,EAAE,CAAC,EAAQ,KAAK,EAAE,kCAAkC,CAAC;EAC5EC,SAAS,EAAW,CAAE,CAAC,EAAE,CAAC,EAAQ,KAAK,EAAE,oBAAoB,CAAC;EAC9DC,SAAS,EAAW,CAAE,CAAC,EAAEzB,IAAI,CAACiB,EAAE,EAAE,KAAK,EAAE,oBAAoB,CAAC;EAC9DS,SAAS,EAAW,CAAC,CAAC,CAAC,EAAE1B,IAAI,CAACiB,EAAE,EAAE,KAAK,EAAE,kBAAkB,CAAC;EAC5DU,kBAAkB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAQ,IAAI,EAAG,gEAAgE,CAAC;EAC1GC,kBAAkB,EAAE,CAAE,CAAC,EAAE,CAAC,EAAQ,IAAI,EAAG,kDAAkD;CACrC;AAK3CpD,OAAA,CAAAqD,SAAS,GAAG;EACvBb,EAAE,EAAK,SAAAA,CAACxB,IAAI;IAAK,WAAAhB,OAAA,CAAAqC,UAAU,EAACrB,IAAI,EAAE,CAAC,IAAAhB,OAAA,CAAAuB,SAAS,EAACP,IAAI,CAAC,EAAE,CAAC,EAAEA,IAAI,CAACI,OAAO,EAAE,CAAC,CAAC,CAAC;EAAvD,CAAuD;EACxEsB,IAAI,EAAG,SAAAA,CAAC1B,IAAI;IAAK,WAAAhB,OAAA,CAAAqC,UAAU,EAACrB,IAAI,EAAE,CAACA,IAAI,CAACI,OAAO,EAAE,CAAC,EAAE,IAAApB,OAAA,CAAAuB,SAAS,EAACP,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;EAAvD,CAAuD;EACxEP,KAAK,EAAE,SAAAA,CAACO,IAAI;IAAK,WAAAhB,OAAA,CAAA6B,WAAW,EAACb,IAAI,EAAE,CAAC,CAAC,EAAE,IAAAhB,OAAA,CAAAuB,SAAS,EAACP,IAAI,CAAC,EAAE,CAAC,EAAEA,IAAI,CAACI,OAAO,CAAC,CAAC;EAAxD,CAAwD;EACzET,IAAI,EAAG,SAAAA,CAACK,IAAI;IAAK,WAAAhB,OAAA,CAAA6B,WAAW,EAACb,IAAI,EAAE,CAAC,CAAC,EAAEA,IAAI,CAACI,OAAO,EAAE,CAAC,EAAE,IAAApB,OAAA,CAAAuB,SAAS,EAACP,IAAI,CAAC,CAAC,CAAC;EAAxD,CAAwD;EACzE2B,MAAM,EAAK,SAAAA,CAAC3B,IAAI;IAAK,WAAAhB,OAAA,CAAAqC,UAAU,EAACrB,IAAI,EAAE,CAAC,IAAAhB,OAAA,CAAAuB,SAAS,EAACP,IAAI,CAAC,EAAE,CAAC,EAAE,IAAAhB,OAAA,CAAAuB,SAAS,EAACP,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;EAA1D,CAA0D;EAC/E4B,SAAS,EAAE,SAAAA,CAAC5B,IAAI;IAAK,WAAAhB,OAAA,CAAA6B,WAAW,EAACb,IAAI,EAAE,CAAC,CAAC,EAAE,IAAAhB,OAAA,CAAAuB,SAAS,EAACP,IAAI,CAAC,EAAE,CAAC,EAAE,IAAAhB,OAAA,CAAAuB,SAAS,EAACP,IAAI,CAAC,CAAC,CAAC;EAA3D;CACsB;AAStC,IAAMsC,YAAY,GAAG,SAAAA,CAAgCC,MAAsB;EAKhF,OAAO,UAACC,IAAU;IAChB,IAAMC,CAAC,GAAGzD,OAAA,CAAAO,SAAS,CAACiD,IAAI,CAAC;IACzB,OAAO,CAACA,IAAI,EAAE;MAIZE,QAAQ,EAAEH,MAAM;MAIhBI,IAAI,EAAE,SAAAA,CAAC3C,IAAI;QACT,IAAM2C,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAgB;QACxCA,IAAI,CAACF,CAAC,CAAC,GAAGzC,IAAI,CAACG,SAAS,GAAGH,IAAI,CAACI,OAAO;QACvC,OAAOuC,IAAI;MACb,CAAC;MAIDC,MAAM,EAAE,SAAAA,CAAC5C,IAAI;QACX,IAAM2C,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAgB;QACxCA,IAAI,CAACF,CAAC,CAAC,GAAGzC,IAAI,CAACG,SAAS;QACxB,OAAOwC,IAAI;MACb;KACD,CAAC;EACJ,CAAC;AACH,CAAC;AA9BY3D,OAAA,CAAAsD,YAAY,GAAAA,YAAA;AAqClB,IAAMO,aAAa,GAAG,SAAAA,CAAgCN,MAAsB;EAQjF,OAAO,UAACO,IAAY,EAAEC,KAAW,EAAEC,KAAW;IAC5C,IAAMC,EAAE,GAAGjE,OAAA,CAAAO,SAAS,CAACwD,KAAK,CAAC;IAC3B,IAAMG,EAAE,GAAGlE,OAAA,CAAAO,SAAS,CAACyD,KAAK,CAAC;IAC3B,OAAO,CAACF,IAAI,EAAE;MAIZJ,QAAQ,EAAEH,MAAM;MAIhBI,IAAI,EAAE,SAAAA,CAAC3C,IAAI;QACT,IAAMmD,CAAC,GAAGnD,IAAI,CAACG,SAAS,GAAGH,IAAI,CAACI,OAAO;QACvC,IAAMuC,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAgB;QACxCA,IAAI,CAACM,EAAE,CAAC,GAAGN,IAAI,CAACO,EAAE,CAAC,GAAGC,CAAC;QACvB,OAAOR,IAAI;MACb,CAAC;MAIDC,MAAM,EAAE,SAAAA,CAAC5C,IAAI;QACX,IAAM2C,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAgB;QACxCA,IAAI,CAACM,EAAE,CAAC,GAAGN,IAAI,CAACO,EAAE,CAAC,GAAGlD,IAAI,CAACG,SAAS;QACpC,OAAOwC,IAAI;MACb,CAAC;MAIDS,MAAM,EAAEL,KAAK,GAAG,GAAG,GAAGC;KACvB,CAAC;EACJ,CAAC;AACH,CAAC;AAvCYhE,OAAA,CAAA6D,aAAa,GAAAA,aAAA;AA+CnB,IAAMQ,oBAAoB,GAAG,SAAAA,CAAgCd,MAAyC;EAM3G,OAAO,UAACO,IAAY;IAClB,IAAMQ,KAAK,GAAG,MAAM,GAAGR,IAAI,CAACS,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ;IAChD,OAAO,CAACT,IAAI,GAAG,gBAAgB,EAAE;MAI/BJ,QAAQ,EAAEH,MAAM,CAACe,KAAK,CAAC;MAIvBX,IAAI,EAAE3D,OAAA,CAAAe;KACP,CAAC;EACJ,CAAC;AACH,CAAC;AAnBYf,OAAA,CAAAqE,oBAAoB,GAAAA,oBAAA;AA2B1B,IAAMG,mBAAmB,GAAG,SAAAA,CAAgCjB,MAAsB;EAKvF,OAAO,UAACO,IAAY;IACZ,IAAA9B,EAAA,GAAAyC,MAAA,CAA0BzE,OAAA,CAAA6C,gBAAgB,CAACiB,IAAI,CAAC;MAA/CY,CAAC,GAAA1C,EAAA;MAAE2C,EAAE,GAAA3C,EAAA;MAAE4C,MAAM,GAAA5C,EAAA;MAAEoC,MAAM,GAAApC,EAAA,GAA0B;IACtD,OAAO,CAAC8B,IAAI,GAAG,OAAO,EAAE;MAKtBJ,QAAQ,EAAE,SAAAA,CAAC1C,IAAI,EAAE6D,MAAM;QACf,IAAA7C,EAAA,GAAAyC,MAAA,CAASzD,IAAI,CAAC8D,OAAO,EAAE;UAAtBC,CAAC,GAAA/C,EAAA;UAAEgD,CAAC,GAAAhD,EAAA,GAAkB;QAC9B,IAAMiD,KAAK,GAAGjE,IAAI,CAACiE,KAAK,CAACD,CAAC,EAAEN,CAAC,IAAIK,CAAC,GAAGJ,EAAE,CAAC,EAAEC,MAAM,CAAC;QAChDrB,MAAM,CAACvC,IAAI,EAAEiE,KAAK,CAAC;MACrB,CAAC;MAIDtB,IAAI,EAAE,SAAAA,CAAC3C,IAAI;QACH,IAAAgB,EAAA,GAAYhB,IAAI,CAACkE,SAAS,EAAE;UAA3BH,CAAC,GAAA/C,EAAA,CAAA+C,CAAA;UAAEpD,CAAC,GAAAK,EAAA,CAAAL,CAAA;UAAES,CAAC,GAAAJ,EAAA,CAAAI,CAAoB;QAC5B,IAAA+C,EAAA,GAAAV,MAAA,CAAgB,CAACzD,IAAI,CAACU,SAAS,CAACC,CAAC,EAAEX,IAAI,CAACU,SAAS,CAACU,CAAC,EAAEpB,IAAI,CAACU,SAAS,CAACE,EAAE,CAAC;UAAtEwD,EAAE,GAAAD,EAAA;UAAEE,EAAE,GAAAF,EAAA;UAAEG,GAAG,GAAAH,EAAA,GAA2D;QACvE,IAAAI,EAAA,GAAAd,MAAA,CAAUzD,IAAI,CAACwE,SAAS,CAACJ,EAAE,GAAGE,GAAG,EAAED,EAAE,CAAC;UAArCI,CAAC,GAAAF,EAAA;UAAEG,EAAE,GAAAH,EAAA,GAAgC;QAC5C,IAAMI,EAAE,GAAGvD,CAAC,IAAIqD,CAAC,GAAGV,CAAC,GAAG/D,IAAI,CAACG,SAAS,GAAGuE,EAAE,GAAGlE,IAAI,CAACoE,GAAG,CAACH,CAAC,GAAGV,CAAC,CAAC,GAAG,CAAC,CAAC;QAClE,IAAMnD,EAAE,GAAGD,CAAC,IAAI8D,CAAC,GAAGjE,IAAI,CAACiB,EAAE,GAAG,CAAC,GAAGsC,CAAC,GAAG/D,IAAI,CAACG,SAAS,GAAGuE,EAAE,GAAGlE,IAAI,CAACoE,GAAG,CAACH,CAAC,GAAGV,CAAC,GAAGvD,IAAI,CAACiB,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAC9F,OAAO,CAACkD,EAAE,EAAE/D,EAAE,EAAE+D,EAAE,EAAE/D,EAAE,CAAC;MACzB,CAAC;MAIDwC,MAAM,EAAEA;KACT,CAAC;EACJ,CAAC;AACH,CAAC;AAlCYpE,OAAA,CAAAwE,mBAAmB,GAAAA,mBAAA;AAwCzB,IAAMqB,WAAW,GAAG,SAAAA,CAAgCtC,MAAsB;EAK/E,OAAO,UAACO,IAAY;IACZ,IAAA9B,EAAA,GAAAyC,MAAA,CAAsCzE,OAAA,CAAAuC,QAAQ,CAACuB,IAAI,CAAC;MAAnDgC,KAAK,GAAA9D,EAAA;MAAE4C,MAAM,GAAA5C,EAAA;MAAE+D,UAAU,GAAA/D,EAAA;MAAEoC,MAAM,GAAApC,EAAA,GAAkB;IAC1D,OAAO,CAAC8B,IAAI,GAAG,OAAO,EAAE;MAKtBJ,QAAQ,EAAE,SAAAA,CAAC1C,IAAI,EAAE6D,MAAM;QACf,IAAA7C,EAAA,GAAYhB,IAAI,CAACiB,OAAO,EAAE;UAAzBK,CAAC,GAAAN,EAAA,CAAAM,CAAA;UAAEJ,CAAC,GAAAF,EAAA,CAAAE,CAAA;UAAEC,CAAC,GAAAH,EAAA,CAAAG,CAAkB;QAC1B,IAAAgD,EAAA,GAAAV,MAAA,CAAesB,UAAU,GAAG,CAAC7D,CAAC,GAAGC,CAAC,EAAE,GAAG,CAAC,GAAG,CAACG,CAAC,EAAE,GAAG,CAAC,EAAC;UAAnD0C,CAAC,GAAAG,EAAA;UAAEa,MAAM,GAAAb,EAAA,GAA0C;QAC1D,IAAMc,EAAE,GAAGjF,IAAI,CAACkF,SAAS,CAACF,MAAM,CAAC;QACjC,IAAMf,KAAK,GAAGjE,IAAI,CAACiE,KAAK,CAACD,CAAC,EAAEc,KAAK,EAAElB,MAAM,EAAEoB,MAAM,EAAEC,EAAE,CAAC;QACtD1C,MAAM,CAACvC,IAAI,EAAEiE,KAAK,CAAC;MACrB,CAAC;MAIDtB,IAAI,EAAE3D,OAAA,CAAAqD,SAAS,CAACS,IAAI,CAAC;MAIrBM,MAAM,EAAEA;KACT,CAAC;EACJ,CAAC;AACH,CAAC;AA7BYpE,OAAA,CAAA6F,WAAW,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}