{"ast":null,"code":"'use strict';\n\nvar refractorMarkupTemplating = require('./markup-templating.js');\nmodule.exports = php;\nphp.displayName = 'php';\nphp.aliases = [];\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   *\n   * Supports the following:\n   *      - Extends clike syntax\n   *      - Support for PHP 5.3+ (namespaces, traits, generators, etc)\n   *      - Smarter constant and function matching\n   *\n   * Adds the following new token classes:\n   *      constant, delimiter, variable, function, package\n   */;\n  (function (Prism) {\n    Prism.languages.php = Prism.languages.extend('clike', {\n      keyword: /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n      boolean: {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'constant'\n      },\n      constant: [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('php', 'string', {\n      'shell-comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      }\n    });\n    Prism.languages.insertBefore('php', 'comment', {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      }\n    });\n    Prism.languages.insertBefore('php', 'keyword', {\n      variable: /\\$+(?:\\w+\\b|(?={))/i,\n      package: {\n        pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }\n    }); // Must be defined after the function pattern\n    Prism.languages.insertBefore('php', 'operator', {\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      }\n    });\n    var string_interpolation = {\n      pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.php\n      }\n    };\n    Prism.languages.insertBefore('php', 'string', {\n      'nowdoc-string': {\n        pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      'heredoc-string': {\n        pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation // See below\n        }\n      },\n      'single-quoted-string': {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          interpolation: string_interpolation // See below\n        }\n      }\n    }); // The different types of PHP strings \"replace\" the C-like standard string\n    delete Prism.languages.php['string'];\n    Prism.hooks.add('before-tokenize', function (env) {\n      if (!/<\\?/.test(env.code)) {\n        return;\n      }\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'php', phpPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php');\n    });\n  })(Prism);\n}","map":{"version":3,"names":["refractorMarkupTemplating","require","module","exports","php","displayName","aliases","Prism","register","languages","extend","keyword","boolean","pattern","alias","constant","comment","lookbehind","insertBefore","delimiter","variable","package","inside","punctuation","property","string_interpolation","rest","greedy","interpolation","hooks","add","env","test","code","phpPattern","buildPlaceholders","tokenizePlaceholders"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/refractor/lang/php.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = php\nphp.displayName = 'php'\nphp.aliases = []\nfunction php(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /**\n   * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n   * Modified by Miles Johnson: http://milesj.me\n   *\n   * Supports the following:\n   *      - Extends clike syntax\n   *      - Support for PHP 5.3+ (namespaces, traits, generators, etc)\n   *      - Smarter constant and function matching\n   *\n   * Adds the following new token classes:\n   *      constant, delimiter, variable, function, package\n   */\n  ;(function(Prism) {\n    Prism.languages.php = Prism.languages.extend('clike', {\n      keyword: /\\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|new|or|parent|print|private|protected|public|require|require_once|return|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\\b/i,\n      boolean: {\n        pattern: /\\b(?:false|true)\\b/i,\n        alias: 'constant'\n      },\n      constant: [/\\b[A-Z_][A-Z0-9_]*\\b/, /\\b(?:null)\\b/i],\n      comment: {\n        pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('php', 'string', {\n      'shell-comment': {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        alias: 'comment'\n      }\n    })\n    Prism.languages.insertBefore('php', 'comment', {\n      delimiter: {\n        pattern: /\\?>$|^<\\?(?:php(?=\\s)|=)?/i,\n        alias: 'important'\n      }\n    })\n    Prism.languages.insertBefore('php', 'keyword', {\n      variable: /\\$+(?:\\w+\\b|(?={))/i,\n      package: {\n        pattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\\\/\n        }\n      }\n    }) // Must be defined after the function pattern\n    Prism.languages.insertBefore('php', 'operator', {\n      property: {\n        pattern: /(->)[\\w]+/,\n        lookbehind: true\n      }\n    })\n    var string_interpolation = {\n      pattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n      lookbehind: true,\n      inside: {\n        rest: Prism.languages.php\n      }\n    }\n    Prism.languages.insertBefore('php', 'string', {\n      'nowdoc-string': {\n        pattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<'?|[';]$/\n            }\n          }\n        }\n      },\n      'heredoc-string': {\n        pattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          delimiter: {\n            pattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n            alias: 'symbol',\n            inside: {\n              punctuation: /^<<<\"?|[\";]$/\n            }\n          },\n          interpolation: string_interpolation // See below\n        }\n      },\n      'single-quoted-string': {\n        pattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          interpolation: string_interpolation // See below\n        }\n      }\n    }) // The different types of PHP strings \"replace\" the C-like standard string\n    delete Prism.languages.php['string']\n    Prism.hooks.add('before-tokenize', function(env) {\n      if (!/<\\?/.test(env.code)) {\n        return\n      }\n      var phpPattern = /<\\?(?:[^\"'/#]|\\/(?![*/])|(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|(?:\\/\\/|#)(?:[^?\\n\\r]|\\?(?!>))*|\\/\\*[\\s\\S]*?(?:\\*\\/|$))*?(?:\\?>|$)/gi\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'php',\n        phpPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'php')\n    })\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}