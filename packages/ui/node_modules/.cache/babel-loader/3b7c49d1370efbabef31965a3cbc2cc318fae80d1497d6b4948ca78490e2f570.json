{"ast":null,"code":"'use strict';\n\nmodule.exports = lisp;\nlisp.displayName = 'lisp';\nlisp.aliases = [];\nfunction lisp(Prism) {\n  ;\n  (function (Prism) {\n    // Functions to construct regular expressions\n    // simple form\n    // e.g. (interactive ... or (interactive)\n    function simple_form(name) {\n      return RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])');\n    } // booleans and numbers\n    function primitive(pattern) {\n      return RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])');\n    } // Patterns in regular expressions\n    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n    // & and : are excluded as they are usually used for special purposes\n    var symbol = '[-+*/_~!@$%^=<>{}\\\\w]+'; // symbol starting with & used in function arguments\n    var marker = '&' + symbol; // Open parenthesis for look-behind\n    var par = '(\\\\()';\n    var endpar = '(?=\\\\))'; // End the pattern with look-ahead space\n    var space = '(?=\\\\s)';\n    var language = {\n      // Three or four semicolons are considered a heading.\n      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n      heading: {\n        pattern: /;;;.*/,\n        alias: ['comment', 'title']\n      },\n      comment: /;.*/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true,\n        inside: {\n          argument: /[-A-Z]+(?=[.,\\s])/,\n          symbol: RegExp('`' + symbol + \"'\")\n        }\n      },\n      'quoted-symbol': {\n        pattern: RegExp(\"#?'\" + symbol),\n        alias: ['variable', 'symbol']\n      },\n      'lisp-property': {\n        pattern: RegExp(':' + symbol),\n        alias: 'property'\n      },\n      splice: {\n        pattern: RegExp(',@?' + symbol),\n        alias: ['symbol', 'variable']\n      },\n      keyword: [{\n        pattern: RegExp(par + '(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' + space),\n        lookbehind: true\n      }, {\n        pattern: RegExp(par + '(?:for|do|collect|return|finally|append|concat|in|by)' + space),\n        lookbehind: true\n      }],\n      declare: {\n        pattern: simple_form('declare'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      interactive: {\n        pattern: simple_form('interactive'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      boolean: {\n        pattern: primitive('(?:t|nil)'),\n        lookbehind: true\n      },\n      number: {\n        pattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),\n        lookbehind: true\n      },\n      defvar: {\n        pattern: RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),\n        lookbehind: true,\n        inside: {\n          keyword: /^def[a-z]+/,\n          variable: RegExp(symbol)\n        }\n      },\n      defun: {\n        pattern: RegExp(par + '(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' + symbol + '\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'),\n        lookbehind: true,\n        inside: {\n          keyword: /^(?:cl-)?def\\S+/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          function: {\n            pattern: RegExp('(^\\\\s)' + symbol),\n            lookbehind: true\n          },\n          punctuation: /[()]/\n        }\n      },\n      lambda: {\n        pattern: RegExp(par + 'lambda\\\\s+\\\\((?:&?' + symbol + '\\\\s*)*\\\\)'),\n        lookbehind: true,\n        inside: {\n          keyword: /^lambda/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          punctuation: /[()]/\n        }\n      },\n      car: {\n        pattern: RegExp(par + symbol),\n        lookbehind: true\n      },\n      punctuation: [\n      // open paren, brackets, and close paren\n      /(['`,]?\\(|[)\\[\\]])/,\n      // cons\n      {\n        pattern: /(\\s)\\.(?=\\s)/,\n        lookbehind: true\n      }]\n    };\n    var arg = {\n      'lisp-marker': RegExp(marker),\n      rest: {\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        varform: {\n          pattern: RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),\n          lookbehind: true,\n          inside: {\n            string: language.string,\n            boolean: language.boolean,\n            number: language.number,\n            symbol: language.symbol,\n            punctuation: /[()]/\n          }\n        }\n      }\n    };\n    var forms = '\\\\S+(?:\\\\s+\\\\S+)*';\n    var arglist = {\n      pattern: RegExp(par + '[\\\\s\\\\S]*' + endpar),\n      lookbehind: true,\n      inside: {\n        'rest-vars': {\n          pattern: RegExp('&(?:rest|body)\\\\s+' + forms),\n          inside: arg\n        },\n        'other-marker-vars': {\n          pattern: RegExp('&(?:optional|aux)\\\\s+' + forms),\n          inside: arg\n        },\n        keys: {\n          pattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n          inside: arg\n        },\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        punctuation: /[()]/\n      }\n    };\n    language['lambda'].inside.arguments = arglist;\n    language['defun'].inside.arguments = Prism.util.clone(arglist);\n    language['defun'].inside.arguments.inside.sublist = arglist;\n    Prism.languages.lisp = language;\n    Prism.languages.elisp = language;\n    Prism.languages.emacs = language;\n    Prism.languages['emacs-lisp'] = language;\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","lisp","displayName","aliases","Prism","simple_form","name","RegExp","primitive","pattern","symbol","marker","par","endpar","space","language","heading","alias","comment","string","greedy","inside","argument","splice","keyword","lookbehind","declare","interactive","boolean","number","defvar","variable","defun","arguments","function","punctuation","lambda","car","arg","rest","varform","forms","arglist","keys","util","clone","sublist","languages","elisp","emacs"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/refractor/lang/lisp.js"],"sourcesContent":["'use strict'\n\nmodule.exports = lisp\nlisp.displayName = 'lisp'\nlisp.aliases = []\nfunction lisp(Prism) {\n  ;(function(Prism) {\n    // Functions to construct regular expressions\n    // simple form\n    // e.g. (interactive ... or (interactive)\n    function simple_form(name) {\n      return RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])')\n    } // booleans and numbers\n    function primitive(pattern) {\n      return RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])')\n    } // Patterns in regular expressions\n    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n    // & and : are excluded as they are usually used for special purposes\n    var symbol = '[-+*/_~!@$%^=<>{}\\\\w]+' // symbol starting with & used in function arguments\n    var marker = '&' + symbol // Open parenthesis for look-behind\n    var par = '(\\\\()'\n    var endpar = '(?=\\\\))' // End the pattern with look-ahead space\n    var space = '(?=\\\\s)'\n    var language = {\n      // Three or four semicolons are considered a heading.\n      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n      heading: {\n        pattern: /;;;.*/,\n        alias: ['comment', 'title']\n      },\n      comment: /;.*/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true,\n        inside: {\n          argument: /[-A-Z]+(?=[.,\\s])/,\n          symbol: RegExp('`' + symbol + \"'\")\n        }\n      },\n      'quoted-symbol': {\n        pattern: RegExp(\"#?'\" + symbol),\n        alias: ['variable', 'symbol']\n      },\n      'lisp-property': {\n        pattern: RegExp(':' + symbol),\n        alias: 'property'\n      },\n      splice: {\n        pattern: RegExp(',@?' + symbol),\n        alias: ['symbol', 'variable']\n      },\n      keyword: [\n        {\n          pattern: RegExp(\n            par +\n              '(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' +\n              space\n          ),\n          lookbehind: true\n        },\n        {\n          pattern: RegExp(\n            par +\n              '(?:for|do|collect|return|finally|append|concat|in|by)' +\n              space\n          ),\n          lookbehind: true\n        }\n      ],\n      declare: {\n        pattern: simple_form('declare'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      interactive: {\n        pattern: simple_form('interactive'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      boolean: {\n        pattern: primitive('(?:t|nil)'),\n        lookbehind: true\n      },\n      number: {\n        pattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),\n        lookbehind: true\n      },\n      defvar: {\n        pattern: RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),\n        lookbehind: true,\n        inside: {\n          keyword: /^def[a-z]+/,\n          variable: RegExp(symbol)\n        }\n      },\n      defun: {\n        pattern: RegExp(\n          par +\n            '(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' +\n            symbol +\n            '\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'\n        ),\n        lookbehind: true,\n        inside: {\n          keyword: /^(?:cl-)?def\\S+/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          function: {\n            pattern: RegExp('(^\\\\s)' + symbol),\n            lookbehind: true\n          },\n          punctuation: /[()]/\n        }\n      },\n      lambda: {\n        pattern: RegExp(par + 'lambda\\\\s+\\\\((?:&?' + symbol + '\\\\s*)*\\\\)'),\n        lookbehind: true,\n        inside: {\n          keyword: /^lambda/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          punctuation: /[()]/\n        }\n      },\n      car: {\n        pattern: RegExp(par + symbol),\n        lookbehind: true\n      },\n      punctuation: [\n        // open paren, brackets, and close paren\n        /(['`,]?\\(|[)\\[\\]])/, // cons\n        {\n          pattern: /(\\s)\\.(?=\\s)/,\n          lookbehind: true\n        }\n      ]\n    }\n    var arg = {\n      'lisp-marker': RegExp(marker),\n      rest: {\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        varform: {\n          pattern: RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),\n          lookbehind: true,\n          inside: {\n            string: language.string,\n            boolean: language.boolean,\n            number: language.number,\n            symbol: language.symbol,\n            punctuation: /[()]/\n          }\n        }\n      }\n    }\n    var forms = '\\\\S+(?:\\\\s+\\\\S+)*'\n    var arglist = {\n      pattern: RegExp(par + '[\\\\s\\\\S]*' + endpar),\n      lookbehind: true,\n      inside: {\n        'rest-vars': {\n          pattern: RegExp('&(?:rest|body)\\\\s+' + forms),\n          inside: arg\n        },\n        'other-marker-vars': {\n          pattern: RegExp('&(?:optional|aux)\\\\s+' + forms),\n          inside: arg\n        },\n        keys: {\n          pattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n          inside: arg\n        },\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        punctuation: /[()]/\n      }\n    }\n    language['lambda'].inside.arguments = arglist\n    language['defun'].inside.arguments = Prism.util.clone(arglist)\n    language['defun'].inside.arguments.inside.sublist = arglist\n    Prism.languages.lisp = language\n    Prism.languages.elisp = language\n    Prism.languages.emacs = language\n    Prism.languages['emacs-lisp'] = language\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}