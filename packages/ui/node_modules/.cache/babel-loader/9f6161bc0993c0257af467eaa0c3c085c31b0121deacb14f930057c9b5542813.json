{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MmlNone = exports.MmlMprescripts = exports.MmlMmultiscripts = void 0;\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\nvar msubsup_js_1 = require(\"./msubsup.js\");\nvar MmlMmultiscripts = function (_super) {\n  __extends(MmlMmultiscripts, _super);\n  function MmlMmultiscripts() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(MmlMmultiscripts.prototype, \"kind\", {\n    get: function () {\n      return 'mmultiscripts';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMmultiscripts.prototype, \"arity\", {\n    get: function () {\n      return 1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MmlMmultiscripts.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {\n    this.childNodes[0].setInheritedAttributes(attributes, display, level, prime);\n    var prescripts = false;\n    for (var i = 1, n = 0; i < this.childNodes.length; i++) {\n      var child = this.childNodes[i];\n      if (child.isKind('mprescripts')) {\n        if (!prescripts) {\n          prescripts = true;\n          if (i % 2 === 0) {\n            var mrow = this.factory.create('mrow');\n            this.childNodes.splice(i, 0, mrow);\n            mrow.parent = this;\n            i++;\n          }\n        }\n      } else {\n        var primestyle = prime || n % 2 === 0;\n        child.setInheritedAttributes(attributes, false, level + 1, primestyle);\n        n++;\n      }\n    }\n    if (this.childNodes.length % 2 === (prescripts ? 1 : 0)) {\n      this.appendChild(this.factory.create('mrow'));\n      this.childNodes[this.childNodes.length - 1].setInheritedAttributes(attributes, false, level + 1, prime);\n    }\n  };\n  MmlMmultiscripts.prototype.verifyChildren = function (options) {\n    var prescripts = false;\n    var fix = options['fixMmultiscripts'];\n    for (var i = 0; i < this.childNodes.length; i++) {\n      var child = this.childNodes[i];\n      if (child.isKind('mprescripts')) {\n        if (prescripts) {\n          child.mError(child.kind + ' can only appear once in ' + this.kind, options, true);\n        } else {\n          prescripts = true;\n          if (i % 2 === 0 && !fix) {\n            this.mError('There must be an equal number of prescripts of each type', options);\n          }\n        }\n      }\n    }\n    if (this.childNodes.length % 2 === (prescripts ? 1 : 0) && !fix) {\n      this.mError('There must be an equal number of scripts of each type', options);\n    }\n    _super.prototype.verifyChildren.call(this, options);\n  };\n  MmlMmultiscripts.defaults = __assign({}, msubsup_js_1.MmlMsubsup.defaults);\n  return MmlMmultiscripts;\n}(msubsup_js_1.MmlMsubsup);\nexports.MmlMmultiscripts = MmlMmultiscripts;\nvar MmlMprescripts = function (_super) {\n  __extends(MmlMprescripts, _super);\n  function MmlMprescripts() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(MmlMprescripts.prototype, \"kind\", {\n    get: function () {\n      return 'mprescripts';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMprescripts.prototype, \"arity\", {\n    get: function () {\n      return 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MmlMprescripts.prototype.verifyTree = function (options) {\n    _super.prototype.verifyTree.call(this, options);\n    if (this.parent && !this.parent.isKind('mmultiscripts')) {\n      this.mError(this.kind + ' must be a child of mmultiscripts', options, true);\n    }\n  };\n  MmlMprescripts.defaults = __assign({}, MmlNode_js_1.AbstractMmlNode.defaults);\n  return MmlMprescripts;\n}(MmlNode_js_1.AbstractMmlNode);\nexports.MmlMprescripts = MmlMprescripts;\nvar MmlNone = function (_super) {\n  __extends(MmlNone, _super);\n  function MmlNone() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(MmlNone.prototype, \"kind\", {\n    get: function () {\n      return 'none';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlNone.prototype, \"arity\", {\n    get: function () {\n      return 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MmlNone.prototype.verifyTree = function (options) {\n    _super.prototype.verifyTree.call(this, options);\n    if (this.parent && !this.parent.isKind('mmultiscripts')) {\n      this.mError(this.kind + ' must be a child of mmultiscripts', options, true);\n    }\n  };\n  MmlNone.defaults = __assign({}, MmlNode_js_1.AbstractMmlNode.defaults);\n  return MmlNone;\n}(MmlNode_js_1.AbstractMmlNode);\nexports.MmlNone = MmlNone;","map":{"version":3,"names":["MmlNode_js_1","require","msubsup_js_1","MmlMmultiscripts","_super","__extends","Object","defineProperty","prototype","get","setChildInheritedAttributes","attributes","display","level","prime","childNodes","setInheritedAttributes","prescripts","i","n","length","child","isKind","mrow","factory","create","splice","parent","primestyle","appendChild","verifyChildren","options","fix","mError","kind","call","defaults","__assign","MmlMsubsup","exports","MmlMprescripts","verifyTree","AbstractMmlNode","MmlNone"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mmultiscripts.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMmultiscripts node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlNode, AttributeList} from '../MmlNode.js';\nimport {MmlMsubsup} from './msubsup.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMmultiscripts node class (subclass of MmlMsubsup)\n */\n\nexport class MmlMmultiscripts extends MmlMsubsup {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...MmlMsubsup.defaults\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mmultiscripts';\n  }\n\n  /**\n   * <mmultiscripts> requires at least one child (the base)\n   * @override\n   */\n  public get arity() {\n    return 1;\n  }\n\n  /**\n   * Push the inherited values to the base\n   * Make sure the number of pre- and post-scripts are even by adding mrows, if needed.\n   * For the scripts, use displaystyle = false, scriptlevel + 1, and\n   *   set the primestyle in the subscripts.\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    this.childNodes[0].setInheritedAttributes(attributes, display, level, prime);\n    let prescripts = false;\n    for (let i = 1, n = 0; i < this.childNodes.length; i++) {\n      let child = this.childNodes[i];\n      if (child.isKind('mprescripts')) {\n        if (!prescripts) {\n          prescripts = true;\n          if (i % 2 === 0) {\n            let mrow = this.factory.create('mrow');\n            this.childNodes.splice(i, 0, mrow);\n            mrow.parent = this;\n            i++;\n          }\n        }\n      } else {\n        let primestyle = prime || (n % 2 === 0);\n        child.setInheritedAttributes(attributes, false, level + 1, primestyle);\n        n++;\n      }\n    }\n    if (this.childNodes.length % 2 === (prescripts ? 1 : 0)) {\n      this.appendChild(this.factory.create('mrow'));\n      this.childNodes[this.childNodes.length - 1].setInheritedAttributes(attributes, false, level + 1, prime);\n    }\n  }\n\n  /**\n   * Check that mprescripts only occurs once, and that the number of pre- and post-scripts are even.\n   *\n   * @override\n   */\n  protected verifyChildren(options: PropertyList) {\n    let prescripts = false;\n    let fix = options['fixMmultiscripts'];\n    for (let i = 0; i < this.childNodes.length; i++) {\n      let child = this.childNodes[i];\n      if (child.isKind('mprescripts')) {\n        if (prescripts) {\n          child.mError(child.kind + ' can only appear once in ' + this.kind, options, true);\n        } else {\n          prescripts = true;\n          if (i % 2 === 0 && !fix) {\n            this.mError('There must be an equal number of prescripts of each type', options);\n          }\n        }\n      }\n    }\n    if (this.childNodes.length % 2 === (prescripts ? 1 : 0) && !fix) {\n      this.mError('There must be an equal number of scripts of each type', options);\n    }\n    super.verifyChildren(options);\n  }\n\n}\n\n/*****************************************************************/\n/**\n *  Implements the MmlMprescripts node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMprescripts extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults\n  };\n\n  /**\n   * @return {string}  The mprescripts kind\n   */\n  public get kind(): string {\n    return 'mprescripts';\n  }\n\n  /**\n   * @return {number}  <mprescripts> can have no children\n   */\n  public get arity(): number {\n    return 0;\n  }\n\n  /**\n   * Check that parent is mmultiscripts\n   *\n   * @override\n   */\n  public verifyTree(options: PropertyList) {\n    super.verifyTree(options);\n    if (this.parent && !this.parent.isKind('mmultiscripts')) {\n      this.mError(this.kind + ' must be a child of mmultiscripts', options, true);\n    }\n  }\n\n}\n\n/*****************************************************************/\n/**\n *  Implements the MmlNone node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlNone extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults\n  };\n\n  /**\n   * @return {string}  The none kind\n   */\n  public get kind(): string {\n    return 'none';\n  }\n\n  /**\n   * @return {number}  <none> can have no children\n   */\n  public get arity(): number {\n    return 0;\n  }\n\n  /**\n   * Check that parent is mmultiscripts\n   *\n   * @override\n   */\n  public verifyTree(options: PropertyList) {\n    super.verifyTree(options);\n    if (this.parent && !this.parent.isKind('mmultiscripts')) {\n      this.mError(this.kind + ' must be a child of mmultiscripts', options, true);\n    }\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}