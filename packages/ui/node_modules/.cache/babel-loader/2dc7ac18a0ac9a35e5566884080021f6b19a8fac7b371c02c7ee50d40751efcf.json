{"ast":null,"code":"'use strict';\n\nmodule.exports = http;\nhttp.displayName = 'http';\nhttp.aliases = [];\nfunction http(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.http = {\n      'request-line': {\n        pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n        inside: {\n          // HTTP Verb\n          property: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n          // Path or query argument\n          'attr-name': /:\\w+/\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/1.[01] \\d+.*/m,\n        inside: {\n          // Status, e.g. 200 OK\n          property: {\n            pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n            lookbehind: true\n          }\n        }\n      },\n      // HTTP header name\n      'header-name': {\n        pattern: /^[\\w-]+:(?=.)/m,\n        alias: 'keyword'\n      }\n    }; // Create a mapping of Content-Type headers to language definitions\n    var langs = Prism.languages;\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css\n    }; // Declare which types can also be suffixes\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    };\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '');\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])';\n      return '(?:' + contentType + '|' + suffixPattern + ')';\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n    var options;\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {};\n        var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;\n        options[contentType] = {\n          pattern: RegExp('(content-type:\\\\s*' + pattern + '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*', 'i'),\n          lookbehind: true,\n          inside: {\n            rest: httpLanguages[contentType]\n          }\n        };\n      }\n    }\n    if (options) {\n      Prism.languages.insertBefore('http', 'header-name', options);\n    }\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","http","displayName","aliases","Prism","languages","pattern","inside","property","lookbehind","alias","langs","httpLanguages","javascript","json","xml","html","css","suffixTypes","getSuffixPattern","contentType","suffix","replace","suffixPattern","options","RegExp","rest","insertBefore"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/refractor/lang/http.js"],"sourcesContent":["'use strict'\n\nmodule.exports = http\nhttp.displayName = 'http'\nhttp.aliases = []\nfunction http(Prism) {\n  ;(function(Prism) {\n    Prism.languages.http = {\n      'request-line': {\n        pattern: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\s(?:https?:\\/\\/|\\/)\\S+\\sHTTP\\/[0-9.]+/m,\n        inside: {\n          // HTTP Verb\n          property: /^(?:POST|GET|PUT|DELETE|OPTIONS|PATCH|TRACE|CONNECT)\\b/,\n          // Path or query argument\n          'attr-name': /:\\w+/\n        }\n      },\n      'response-status': {\n        pattern: /^HTTP\\/1.[01] \\d+.*/m,\n        inside: {\n          // Status, e.g. 200 OK\n          property: {\n            pattern: /(^HTTP\\/1.[01] )\\d+.*/i,\n            lookbehind: true\n          }\n        }\n      },\n      // HTTP header name\n      'header-name': {\n        pattern: /^[\\w-]+:(?=.)/m,\n        alias: 'keyword'\n      }\n    } // Create a mapping of Content-Type headers to language definitions\n    var langs = Prism.languages\n    var httpLanguages = {\n      'application/javascript': langs.javascript,\n      'application/json': langs.json || langs.javascript,\n      'application/xml': langs.xml,\n      'text/xml': langs.xml,\n      'text/html': langs.html,\n      'text/css': langs.css\n    } // Declare which types can also be suffixes\n    var suffixTypes = {\n      'application/json': true,\n      'application/xml': true\n    }\n    /**\n     * Returns a pattern for the given content type which matches it and any type which has it as a suffix.\n     *\n     * @param {string} contentType\n     * @returns {string}\n     */\n    function getSuffixPattern(contentType) {\n      var suffix = contentType.replace(/^[a-z]+\\//, '')\n      var suffixPattern = '\\\\w+/(?:[\\\\w.-]+\\\\+)+' + suffix + '(?![+\\\\w.-])'\n      return '(?:' + contentType + '|' + suffixPattern + ')'\n    } // Insert each content type parser that has its associated language\n    // currently loaded.\n    var options\n    for (var contentType in httpLanguages) {\n      if (httpLanguages[contentType]) {\n        options = options || {}\n        var pattern = suffixTypes[contentType]\n          ? getSuffixPattern(contentType)\n          : contentType\n        options[contentType] = {\n          pattern: RegExp(\n            '(content-type:\\\\s*' +\n              pattern +\n              '[\\\\s\\\\S]*?)(?:\\\\r?\\\\n|\\\\r){2}[\\\\s\\\\S]*',\n            'i'\n          ),\n          lookbehind: true,\n          inside: {\n            rest: httpLanguages[contentType]\n          }\n        }\n      }\n    }\n    if (options) {\n      Prism.languages.insertBefore('http', 'header-name', options)\n    }\n  })(Prism)\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,IAAI;AACrBA,IAAI,CAACC,WAAW,GAAG,MAAM;AACzBD,IAAI,CAACE,OAAO,GAAG,EAAE;AACjB,SAASF,IAAIA,CAACG,KAAK,EAAE;EACnB;EAAC,CAAC,UAASA,KAAK,EAAE;IAChBA,KAAK,CAACC,SAAS,CAACJ,IAAI,GAAG;MACrB,cAAc,EAAE;QACdK,OAAO,EAAE,6FAA6F;QACtGC,MAAM,EAAE;UACN;UACAC,QAAQ,EAAE,wDAAwD;UAClE;UACA,WAAW,EAAE;QACf;MACF,CAAC;MACD,iBAAiB,EAAE;QACjBF,OAAO,EAAE,sBAAsB;QAC/BC,MAAM,EAAE;UACN;UACAC,QAAQ,EAAE;YACRF,OAAO,EAAE,wBAAwB;YACjCG,UAAU,EAAE;UACd;QACF;MACF,CAAC;MACD;MACA,aAAa,EAAE;QACbH,OAAO,EAAE,gBAAgB;QACzBI,KAAK,EAAE;MACT;IACF,CAAC,EAAC;IACF,IAAIC,KAAK,GAAGP,KAAK,CAACC,SAAS;IAC3B,IAAIO,aAAa,GAAG;MAClB,wBAAwB,EAAED,KAAK,CAACE,UAAU;MAC1C,kBAAkB,EAAEF,KAAK,CAACG,IAAI,IAAIH,KAAK,CAACE,UAAU;MAClD,iBAAiB,EAAEF,KAAK,CAACI,GAAG;MAC5B,UAAU,EAAEJ,KAAK,CAACI,GAAG;MACrB,WAAW,EAAEJ,KAAK,CAACK,IAAI;MACvB,UAAU,EAAEL,KAAK,CAACM;IACpB,CAAC,EAAC;IACF,IAAIC,WAAW,GAAG;MAChB,kBAAkB,EAAE,IAAI;MACxB,iBAAiB,EAAE;IACrB,CAAC;IACD;AACJ;AACA;AACA;AACA;AACA;IACI,SAASC,gBAAgBA,CAACC,WAAW,EAAE;MACrC,IAAIC,MAAM,GAAGD,WAAW,CAACE,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;MACjD,IAAIC,aAAa,GAAG,uBAAuB,GAAGF,MAAM,GAAG,cAAc;MACrE,OAAO,KAAK,GAAGD,WAAW,GAAG,GAAG,GAAGG,aAAa,GAAG,GAAG;IACxD,CAAC,CAAC;IACF;IACA,IAAIC,OAAO;IACX,KAAK,IAAIJ,WAAW,IAAIR,aAAa,EAAE;MACrC,IAAIA,aAAa,CAACQ,WAAW,CAAC,EAAE;QAC9BI,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;QACvB,IAAIlB,OAAO,GAAGY,WAAW,CAACE,WAAW,CAAC,GAClCD,gBAAgB,CAACC,WAAW,CAAC,GAC7BA,WAAW;QACfI,OAAO,CAACJ,WAAW,CAAC,GAAG;UACrBd,OAAO,EAAEmB,MAAM,CACb,oBAAoB,GAClBnB,OAAO,GACP,wCAAwC,EAC1C,GACF,CAAC;UACDG,UAAU,EAAE,IAAI;UAChBF,MAAM,EAAE;YACNmB,IAAI,EAAEd,aAAa,CAACQ,WAAW;UACjC;QACF,CAAC;MACH;IACF;IACA,IAAII,OAAO,EAAE;MACXpB,KAAK,CAACC,SAAS,CAACsB,YAAY,CAAC,MAAM,EAAE,aAAa,EAAEH,OAAO,CAAC;IAC9D;EACF,CAAC,EAAEpB,KAAK,CAAC;AACX"},"metadata":{},"sourceType":"script","externalDependencies":[]}