{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColorModel = void 0;\nvar TexError_js_1 = __importDefault(require(\"../TexError.js\"));\nvar ColorConstants_js_1 = require(\"./ColorConstants.js\");\nvar ColorModelProcessors = new Map();\nvar ColorModel = function () {\n  function ColorModel() {\n    this.userColors = new Map();\n  }\n  ColorModel.prototype.normalizeColor = function (model, def) {\n    if (!model || model === 'named') {\n      return def;\n    }\n    if (ColorModelProcessors.has(model)) {\n      var modelProcessor = ColorModelProcessors.get(model);\n      return modelProcessor(def);\n    }\n    throw new TexError_js_1.default('UndefinedColorModel', 'Color model \\'%1\\' not defined', model);\n  };\n  ColorModel.prototype.getColor = function (model, def) {\n    if (!model || model === 'named') {\n      return this.getColorByName(def);\n    }\n    return this.normalizeColor(model, def);\n  };\n  ColorModel.prototype.getColorByName = function (name) {\n    if (this.userColors.has(name)) {\n      return this.userColors.get(name);\n    }\n    if (ColorConstants_js_1.COLORS.has(name)) {\n      return ColorConstants_js_1.COLORS.get(name);\n    }\n    return name;\n  };\n  ColorModel.prototype.defineColor = function (model, name, def) {\n    var normalized = this.normalizeColor(model, def);\n    this.userColors.set(name, normalized);\n  };\n  return ColorModel;\n}();\nexports.ColorModel = ColorModel;\nColorModelProcessors.set('rgb', function (rgb) {\n  var e_1, _a;\n  var rgbParts = rgb.trim().split(/\\s*,\\s*/);\n  var RGB = '#';\n  if (rgbParts.length !== 3) {\n    throw new TexError_js_1.default('ModelArg1', 'Color values for the %1 model require 3 numbers', 'rgb');\n  }\n  try {\n    for (var rgbParts_1 = __values(rgbParts), rgbParts_1_1 = rgbParts_1.next(); !rgbParts_1_1.done; rgbParts_1_1 = rgbParts_1.next()) {\n      var rgbPart = rgbParts_1_1.value;\n      if (!rgbPart.match(/^(\\d+(\\.\\d*)?|\\.\\d+)$/)) {\n        throw new TexError_js_1.default('InvalidDecimalNumber', 'Invalid decimal number');\n      }\n      var n = parseFloat(rgbPart);\n      if (n < 0 || n > 1) {\n        throw new TexError_js_1.default('ModelArg2', 'Color values for the %1 model must be between %2 and %3', 'rgb', '0', '1');\n      }\n      var pn = Math.floor(n * 255).toString(16);\n      if (pn.length < 2) {\n        pn = '0' + pn;\n      }\n      RGB += pn;\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (rgbParts_1_1 && !rgbParts_1_1.done && (_a = rgbParts_1.return)) _a.call(rgbParts_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return RGB;\n});\nColorModelProcessors.set('RGB', function (rgb) {\n  var e_2, _a;\n  var rgbParts = rgb.trim().split(/\\s*,\\s*/);\n  var RGB = '#';\n  if (rgbParts.length !== 3) {\n    throw new TexError_js_1.default('ModelArg1', 'Color values for the %1 model require 3 numbers', 'RGB');\n  }\n  try {\n    for (var rgbParts_2 = __values(rgbParts), rgbParts_2_1 = rgbParts_2.next(); !rgbParts_2_1.done; rgbParts_2_1 = rgbParts_2.next()) {\n      var rgbPart = rgbParts_2_1.value;\n      if (!rgbPart.match(/^\\d+$/)) {\n        throw new TexError_js_1.default('InvalidNumber', 'Invalid number');\n      }\n      var n = parseInt(rgbPart);\n      if (n > 255) {\n        throw new TexError_js_1.default('ModelArg2', 'Color values for the %1 model must be between %2 and %3', 'RGB', '0', '255');\n      }\n      var pn = n.toString(16);\n      if (pn.length < 2) {\n        pn = '0' + pn;\n      }\n      RGB += pn;\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (rgbParts_2_1 && !rgbParts_2_1.done && (_a = rgbParts_2.return)) _a.call(rgbParts_2);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n  return RGB;\n});\nColorModelProcessors.set('gray', function (gray) {\n  if (!gray.match(/^\\s*(\\d+(\\.\\d*)?|\\.\\d+)\\s*$/)) {\n    throw new TexError_js_1.default('InvalidDecimalNumber', 'Invalid decimal number');\n  }\n  var n = parseFloat(gray);\n  if (n < 0 || n > 1) {\n    throw new TexError_js_1.default('ModelArg2', 'Color values for the %1 model must be between %2 and %3', 'gray', '0', '1');\n  }\n  var pn = Math.floor(n * 255).toString(16);\n  if (pn.length < 2) {\n    pn = '0' + pn;\n  }\n  return \"#\".concat(pn).concat(pn).concat(pn);\n});","map":{"version":3,"names":["TexError_js_1","__importDefault","require","ColorConstants_js_1","ColorModelProcessors","Map","ColorModel","userColors","prototype","normalizeColor","model","def","has","modelProcessor","get","default","getColor","getColorByName","name","COLORS","defineColor","normalized","set","exports","rgb","rgbParts","trim","split","RGB","length","rgbParts_1","__values","rgbParts_1_1","next","done","rgbPart","value","match","n","parseFloat","pn","Math","floor","toString","rgbParts_2","rgbParts_2_1","parseInt","gray","concat"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/input/tex/color/ColorUtil.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2022 Omar Al-Ithawi and The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview Utility functions and classes for the color package.\n *\n * @author i@omardo.com (Omar Al-Ithawi)\n */\n\n\nimport TexError from '../TexError.js';\nimport {COLORS} from './ColorConstants.js';\n\ntype ColorModelProcessor = (def: string) => string;\nconst ColorModelProcessors: Map<string, ColorModelProcessor> = new Map<string, ColorModelProcessor>();\n\n\nexport class ColorModel {\n\n  /**\n   * User defined colors.\n   *\n   * This variable is local to the parser, so two parsers in the same\n   * JavaScript thread can have two different sets of user-defined colors.\n   */\n  private userColors: Map<string, string> = new Map<string, string>();\n\n  /**\n   * Converts a color model from string representation to its CSS format `#44ff00`\n   *\n   * @param {string} model The coloring model type: `rgb` `RGB` or `gray`.\n   * @param {string} def The color definition: `0.5,0,1`, `128,0,255`, `0.5`.\n   * @return {string} The color definition in CSS format e.g. `#44ff00`.\n   */\n  private normalizeColor(model: string, def: string): string {\n    if (!model || model === 'named') {\n      // Allow to define colors directly by using the CSS format e.g. `#888`\n      return def;\n    }\n\n    if (ColorModelProcessors.has(model)) {\n      const modelProcessor = ColorModelProcessors.get(model);\n      return modelProcessor(def);\n    }\n\n    throw new TexError('UndefinedColorModel', 'Color model \\'%1\\' not defined', model);\n  }\n\n  /**\n   * Look up a color based on its model and definition.\n   *\n   * @param {string} model The coloring model type: `named`, `rgb` `RGB` or `gray`.\n   * @param {string} def The color definition: `red, `0.5,0,1`, `128,0,255`, `0.5`.\n   * @return {string} The color definition in CSS format e.g. `#44ff00`.\n   */\n  public getColor(model: string, def: string): string {\n    if (!model || model === 'named') {\n      return this.getColorByName(def);\n    }\n\n    return this.normalizeColor(model, def);\n  }\n\n  /**\n   * Get a named color.\n   *\n   * @param {string} name The color name e.g. `darkblue`.\n   * @return {string} The color definition in CSS format e.g. `#44ff00`.\n   *\n   * To retain backward compatilbity with MathJax v2 this method returns\n   * unknown as-is, this is useful for both passing through CSS format colors like `#ff0`,\n   * or even standard CSS color names that this plugin is unaware of.\n   *\n   * In TeX format, this would help to let `\\textcolor{#f80}{\\text{Orange}}` show an\n   * orange word.\n   */\n  private getColorByName(name: string): string {\n    if (this.userColors.has(name)) {\n      return this.userColors.get(name);\n    }\n\n    if (COLORS.has(name)) {\n      return COLORS.get(name);\n    }\n\n    // Pass the color name as-is to CSS\n    return name;\n  }\n\n  /**\n   * Create a new user-defined color.\n   *\n   * This color is local to the parser, so another MathJax parser won't be poluted.\n   *\n   * @param {string} model The coloring model type: e.g. `rgb`, `RGB` or `gray`.\n   * @param {string} name The color name: `darkblue`.\n   * @param {string} def The color definition in the color model format: `128,0,255`.\n   */\n  public defineColor(model: string, name: string, def: string) {\n    const normalized = this.normalizeColor(model, def);\n    this.userColors.set(name, normalized);\n  }\n}\n\n\n/**\n * Get an rgb color.\n *\n * @param {OptionList} parserOptions The parser options object.\n * @param {string} rgb The color definition in rgb: `0.5,0,1`.\n * @return {string} The color definition in CSS format e.g. `#44ff00`.\n */\nColorModelProcessors.set('rgb', function (rgb: string): string {\n  const rgbParts: string[] = rgb.trim().split(/\\s*,\\s*/);\n  let RGB: string = '#';\n\n  if (rgbParts.length !== 3) {\n    throw new TexError('ModelArg1', 'Color values for the %1 model require 3 numbers', 'rgb');\n  }\n\n  for (const rgbPart of rgbParts) {\n    if (!rgbPart.match(/^(\\d+(\\.\\d*)?|\\.\\d+)$/)) {\n      throw new TexError('InvalidDecimalNumber', 'Invalid decimal number');\n    }\n\n    const n = parseFloat(rgbPart);\n    if (n < 0 || n > 1) {\n      throw new TexError('ModelArg2',\n                         'Color values for the %1 model must be between %2 and %3',\n                         'rgb', '0', '1');\n    }\n\n    let pn = Math.floor(n * 255).toString(16);\n    if (pn.length < 2) {\n      pn = '0' + pn;\n    }\n\n    RGB += pn;\n  }\n\n  return RGB;\n});\n\n/**\n * Get an RGB color.\n *\n * @param {OptionList} parserOptions The parser options object.\n * @param {string} rgb The color definition in RGB: `128,0,255`.\n * @return {string} The color definition in CSS format e.g. `#44ff00`.\n */\nColorModelProcessors.set('RGB', function (rgb: string): string {\n  const rgbParts: string[] = rgb.trim().split(/\\s*,\\s*/);\n  let RGB = '#';\n\n  if (rgbParts.length !== 3) {\n    throw new TexError('ModelArg1', 'Color values for the %1 model require 3 numbers', 'RGB');\n  }\n\n  for (const rgbPart of rgbParts) {\n    if (!rgbPart.match(/^\\d+$/)) {\n      throw new TexError('InvalidNumber', 'Invalid number');\n    }\n\n    const n = parseInt(rgbPart);\n    if (n > 255) {\n      throw new TexError('ModelArg2',\n                         'Color values for the %1 model must be between %2 and %3',\n                         'RGB', '0', '255');\n    }\n\n    let pn = n.toString(16);\n    if (pn.length < 2) {\n      pn = '0' + pn;\n    }\n    RGB += pn;\n  }\n  return RGB;\n});\n\n/**\n * Get a gray-scale value.\n *\n * @param {OptionList} parserOptions The parser options object.\n * @param {string} gray The color definition in RGB: `0.5`.\n * @return {string} The color definition in CSS format e.g. `#808080`.\n */\nColorModelProcessors.set('gray', function (gray: string): string {\n  if (!gray.match(/^\\s*(\\d+(\\.\\d*)?|\\.\\d+)\\s*$/)) {\n    throw new TexError('InvalidDecimalNumber', 'Invalid decimal number');\n  }\n\n  const n: number = parseFloat(gray);\n  if (n < 0 || n > 1) {\n    throw new TexError('ModelArg2',\n                       'Color values for the %1 model must be between %2 and %3',\n                       'gray', '0', '1');\n  }\n  let pn = Math.floor(n * 255).toString(16);\n  if (pn.length < 2) {\n    pn = '0' + pn;\n  }\n\n  return `#${pn}${pn}${pn}`;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}