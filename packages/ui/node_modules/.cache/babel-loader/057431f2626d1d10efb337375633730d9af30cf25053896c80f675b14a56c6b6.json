{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnvironmentMap = exports.CommandMap = exports.MacroMap = exports.DelimiterMap = exports.CharacterMap = exports.AbstractParseMap = exports.RegExpMap = exports.AbstractSymbolMap = exports.parseResult = void 0;\nvar Symbol_js_1 = require(\"./Symbol.js\");\nvar MapHandler_js_1 = require(\"./MapHandler.js\");\nfunction parseResult(result) {\n  return result === void 0 ? true : result;\n}\nexports.parseResult = parseResult;\nvar AbstractSymbolMap = function () {\n  function AbstractSymbolMap(_name, _parser) {\n    this._name = _name;\n    this._parser = _parser;\n    MapHandler_js_1.MapHandler.register(this);\n  }\n  Object.defineProperty(AbstractSymbolMap.prototype, \"name\", {\n    get: function () {\n      return this._name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  AbstractSymbolMap.prototype.parserFor = function (symbol) {\n    return this.contains(symbol) ? this.parser : null;\n  };\n  AbstractSymbolMap.prototype.parse = function (_a) {\n    var _b = __read(_a, 2),\n      env = _b[0],\n      symbol = _b[1];\n    var parser = this.parserFor(symbol);\n    var mapped = this.lookup(symbol);\n    return parser && mapped ? parseResult(parser(env, mapped)) : null;\n  };\n  Object.defineProperty(AbstractSymbolMap.prototype, \"parser\", {\n    get: function () {\n      return this._parser;\n    },\n    set: function (parser) {\n      this._parser = parser;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return AbstractSymbolMap;\n}();\nexports.AbstractSymbolMap = AbstractSymbolMap;\nvar RegExpMap = function (_super) {\n  __extends(RegExpMap, _super);\n  function RegExpMap(name, parser, _regExp) {\n    var _this = _super.call(this, name, parser) || this;\n    _this._regExp = _regExp;\n    return _this;\n  }\n  RegExpMap.prototype.contains = function (symbol) {\n    return this._regExp.test(symbol);\n  };\n  RegExpMap.prototype.lookup = function (symbol) {\n    return this.contains(symbol) ? symbol : null;\n  };\n  return RegExpMap;\n}(AbstractSymbolMap);\nexports.RegExpMap = RegExpMap;\nvar AbstractParseMap = function (_super) {\n  __extends(AbstractParseMap, _super);\n  function AbstractParseMap() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.map = new Map();\n    return _this;\n  }\n  AbstractParseMap.prototype.lookup = function (symbol) {\n    return this.map.get(symbol);\n  };\n  AbstractParseMap.prototype.contains = function (symbol) {\n    return this.map.has(symbol);\n  };\n  AbstractParseMap.prototype.add = function (symbol, object) {\n    this.map.set(symbol, object);\n  };\n  AbstractParseMap.prototype.remove = function (symbol) {\n    this.map.delete(symbol);\n  };\n  return AbstractParseMap;\n}(AbstractSymbolMap);\nexports.AbstractParseMap = AbstractParseMap;\nvar CharacterMap = function (_super) {\n  __extends(CharacterMap, _super);\n  function CharacterMap(name, parser, json) {\n    var e_1, _a;\n    var _this = _super.call(this, name, parser) || this;\n    try {\n      for (var _b = __values(Object.keys(json)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n        var value = json[key];\n        var _d = __read(typeof value === 'string' ? [value, null] : value, 2),\n          char = _d[0],\n          attrs = _d[1];\n        var character = new Symbol_js_1.Symbol(key, char, attrs);\n        _this.add(key, character);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return _this;\n  }\n  return CharacterMap;\n}(AbstractParseMap);\nexports.CharacterMap = CharacterMap;\nvar DelimiterMap = function (_super) {\n  __extends(DelimiterMap, _super);\n  function DelimiterMap() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DelimiterMap.prototype.parse = function (_a) {\n    var _b = __read(_a, 2),\n      env = _b[0],\n      symbol = _b[1];\n    return _super.prototype.parse.call(this, [env, '\\\\' + symbol]);\n  };\n  return DelimiterMap;\n}(CharacterMap);\nexports.DelimiterMap = DelimiterMap;\nvar MacroMap = function (_super) {\n  __extends(MacroMap, _super);\n  function MacroMap(name, json, functionMap) {\n    var e_2, _a;\n    var _this = _super.call(this, name, null) || this;\n    try {\n      for (var _b = __values(Object.keys(json)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n        var value = json[key];\n        var _d = __read(typeof value === 'string' ? [value] : value),\n          func = _d[0],\n          attrs = _d.slice(1);\n        var character = new Symbol_js_1.Macro(key, functionMap[func], attrs);\n        _this.add(key, character);\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return _this;\n  }\n  MacroMap.prototype.parserFor = function (symbol) {\n    var macro = this.lookup(symbol);\n    return macro ? macro.func : null;\n  };\n  MacroMap.prototype.parse = function (_a) {\n    var _b = __read(_a, 2),\n      env = _b[0],\n      symbol = _b[1];\n    var macro = this.lookup(symbol);\n    var parser = this.parserFor(symbol);\n    if (!macro || !parser) {\n      return null;\n    }\n    return parseResult(parser.apply(void 0, __spreadArray([env, macro.symbol], __read(macro.args), false)));\n  };\n  return MacroMap;\n}(AbstractParseMap);\nexports.MacroMap = MacroMap;\nvar CommandMap = function (_super) {\n  __extends(CommandMap, _super);\n  function CommandMap() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  CommandMap.prototype.parse = function (_a) {\n    var _b = __read(_a, 2),\n      env = _b[0],\n      symbol = _b[1];\n    var macro = this.lookup(symbol);\n    var parser = this.parserFor(symbol);\n    if (!macro || !parser) {\n      return null;\n    }\n    var saveCommand = env.currentCS;\n    env.currentCS = '\\\\' + symbol;\n    var result = parser.apply(void 0, __spreadArray([env, '\\\\' + macro.symbol], __read(macro.args), false));\n    env.currentCS = saveCommand;\n    return parseResult(result);\n  };\n  return CommandMap;\n}(MacroMap);\nexports.CommandMap = CommandMap;\nvar EnvironmentMap = function (_super) {\n  __extends(EnvironmentMap, _super);\n  function EnvironmentMap(name, parser, json, functionMap) {\n    var _this = _super.call(this, name, json, functionMap) || this;\n    _this.parser = parser;\n    return _this;\n  }\n  EnvironmentMap.prototype.parse = function (_a) {\n    var _b = __read(_a, 2),\n      env = _b[0],\n      symbol = _b[1];\n    var macro = this.lookup(symbol);\n    var envParser = this.parserFor(symbol);\n    if (!macro || !envParser) {\n      return null;\n    }\n    return parseResult(this.parser(env, macro.symbol, envParser, macro.args));\n  };\n  return EnvironmentMap;\n}(MacroMap);\nexports.EnvironmentMap = EnvironmentMap;","map":{"version":3,"names":["Symbol_js_1","require","MapHandler_js_1","parseResult","result","exports","AbstractSymbolMap","_name","_parser","MapHandler","register","Object","defineProperty","prototype","get","parserFor","symbol","contains","parser","parse","_a","_b","__read","env","mapped","lookup","set","RegExpMap","_super","__extends","name","_regExp","_this","call","test","AbstractParseMap","apply","arguments","map","Map","has","add","object","remove","delete","CharacterMap","json","__values","keys","_c","next","done","key","value","_d","char","attrs","character","Symbol","DelimiterMap","MacroMap","functionMap","func","slice","Macro","macro","__spreadArray","args","CommandMap","saveCommand","currentCS","EnvironmentMap","envParser"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/input/tex/SymbolMap.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Symbol map classes.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Attributes, Args, ParseMethod, ParseInput, ParseResult} from './Types.js';\nimport {Symbol, Macro} from './Symbol.js';\nimport {MapHandler} from './MapHandler.js';\n\n\n/**\n * SymbolMaps are the base components for the input parsers.\n *\n * They provide a contains method that checks if a map is applicable (contains)\n * a particular string. Implementing classes then perform the actual symbol\n * parsing, from simple regular expression test, straight forward symbol mapping\n * to transformational functionality on the parsed string.\n *\n * @interface\n */\nexport interface SymbolMap {\n\n  /**\n   * @return {string} The name of the map.\n   */\n  name: string;\n\n  /**\n   * @return {ParseMethod} The default parsing method.\n   */\n  parser: ParseMethod;\n\n  /**\n   * @param {string} symbol A symbol to parse.\n   * @return {boolean} True if the symbol map applies to the symbol.\n   */\n  contains(symbol: string): boolean;\n\n  /**\n   * @param {string} symbol A symbol to parse.\n   * @return {ParseMethod} A parse method for the symbol.\n   */\n  parserFor(symbol: string): ParseMethod;\n\n  /**\n   * @param {TexParser} env The current parser.\n   * @param {string} symbol A symbol to parse.\n   * @return {ParseResult} The parsed symbol and the rest of the string.\n   */\n  parse([env, symbol]: ParseInput): ParseResult;\n\n}\n\n/**\n * @param {ParseResult} result    The result to check\n * @return {ParseResult}          True if result was void, result otherwise\n */\nexport function parseResult(result: ParseResult): ParseResult {\n  return result === void 0 ? true : result;\n}\n\n/**\n * Abstract implementation of symbol maps.\n * @template T\n */\nexport abstract class AbstractSymbolMap<T> implements SymbolMap {\n\n  /**\n   * @constructor\n   * @implements {SymbolMap}\n   * @param {string} name Name of the mapping.\n   * @param {ParseMethod} parser The parser for the mappiong.\n   */\n  constructor(private _name: string, private _parser: ParseMethod) {\n    MapHandler.register(this);\n  }\n\n\n  /**\n   * @override\n   */\n  public get name(): string {\n    return this._name;\n  }\n\n\n  /**\n   * @override\n   */\n  public abstract contains(symbol: string): boolean;\n\n\n  /**\n   * @override\n   */\n  public parserFor(symbol: string) {\n    return this.contains(symbol) ? this.parser : null;\n  }\n\n\n  /**\n   * @override\n   */\n  public parse([env, symbol]: ParseInput) {\n    let parser = this.parserFor(symbol);\n    let mapped = this.lookup(symbol);\n    return (parser && mapped) ? parseResult(parser(env, mapped as any)) : null;\n  }\n\n\n  public set parser(parser: ParseMethod) {\n    this._parser = parser;\n  }\n\n  public get parser(): ParseMethod {\n    return this._parser;\n  }\n\n\n  /**\n   * @param {string} symbol\n   * @return {T}\n   */\n  public abstract lookup(symbol: string): T;\n\n}\n\n\n\n/**\n * Regular expressions used for parsing strings.\n */\nexport class RegExpMap extends AbstractSymbolMap<string> {\n\n  /**\n   * @constructor\n   * @extends {AbstractSymbolMap}\n   * @param {string} name Name of the mapping.\n   * @param {ParseMethod} parser The parser for the mappiong.\n   * @param {RegExp} regexp The regular expression.\n   */\n  constructor(name: string, parser: ParseMethod, private _regExp: RegExp) {\n    super(name, parser);\n  }\n\n\n  /**\n   * @override\n   */\n  public contains(symbol: string) {\n    return this._regExp.test(symbol);\n  }\n\n\n  /**\n   * @override\n   */\n  public lookup(symbol: string): string {\n    return this.contains(symbol) ? symbol : null;\n  }\n\n}\n\n\n/**\n * Parse maps associate strings with parsing functionality.\n * @constructor\n * @extends {AbstractSymbolMap}\n * @template K\n */\nexport abstract class AbstractParseMap<K> extends AbstractSymbolMap<K> {\n\n  private map: Map<string, K> = new Map<string, K>();\n\n  /**\n   * @override\n   */\n  public lookup(symbol: string): K {\n    return this.map.get(symbol);\n  }\n\n  /**\n   * @override\n   */\n  public contains(symbol: string) {\n    return this.map.has(symbol);\n  }\n\n  /**\n   * Sets mapping for a symbol.\n   * @param {string} symbol The symbol to map.\n   * @param {K} object The symbols value in the mapping's codomain.\n   */\n  public add(symbol: string, object: K) {\n    this.map.set(symbol, object);\n  }\n\n  /**\n   * Removes a symbol from the map\n   * @param {string} symbol The symbol to remove\n   */\n  public remove(symbol: string) {\n    this.map.delete(symbol);\n  }\n\n}\n\n\n/**\n * Maps symbols that can all be parsed with the same method.\n *\n * @constructor\n * @extends {AbstractParseMap}\n */\nexport class CharacterMap extends AbstractParseMap<Symbol> {\n\n  /**\n   * @constructor\n   * @param {string} name Name of the mapping.\n   * @param {ParseMethod} parser The parser for the mapping.\n   * @param {JSON} json The JSON representation of the character mapping.\n   */\n  constructor(name: string, parser: ParseMethod,\n              json: {[index: string]: string | [string, Attributes]}) {\n    super(name, parser);\n    for (const key of Object.keys(json)) {\n      let value = json[key];\n      let [char, attrs] = (typeof(value) === 'string') ? [value, null] : value;\n      let character = new Symbol(key, char, attrs);\n      this.add(key, character);\n    }\n  }\n\n}\n\n\n/**\n * Maps symbols that are delimiters, that are all parsed with the same method.\n *\n * @constructor\n * @extends {CharacterMap}\n */\nexport class DelimiterMap extends CharacterMap {\n\n  /**\n   * @override\n   */\n  public parse([env, symbol]: ParseInput) {\n    return super.parse([env, '\\\\' + symbol]);\n  }\n\n}\n\n\n/**\n * Maps macros that all bring their own parsing method.\n *\n * @constructor\n * @extends {AbstractParseMap}\n */\nexport class MacroMap extends AbstractParseMap<Macro> {\n\n  /**\n   * @constructor\n   * @param {string} name Name of the mapping.\n   * @param {JSON} json The JSON representation of the macro map.\n   * @param {Record<string, ParseMethod>} functionMap Collection of parse\n   *     functions for the single macros.\n   */\n  constructor(name: string,\n              json: {[index: string]: string | Args[]},\n              functionMap: Record<string, ParseMethod>) {\n    super(name, null);\n    for (const key of Object.keys(json)) {\n      let value = json[key];\n      let [func, ...attrs] = (typeof(value) === 'string') ? [value] : value;\n      let character = new Macro(key, functionMap[func as string], attrs);\n      this.add(key, character);\n    }\n  }\n\n\n  /**\n   * @override\n   */\n  public parserFor(symbol: string) {\n    let macro = this.lookup(symbol);\n    return macro ? macro.func : null;\n  }\n\n\n  /**\n   * @override\n   */\n  public parse([env, symbol]: ParseInput) {\n    let macro = this.lookup(symbol);\n    let parser = this.parserFor(symbol);\n    if (!macro || !parser) {\n      return null;\n    }\n    return parseResult(parser(env, macro.symbol, ...macro.args));\n  }\n\n}\n\n\n/**\n * Maps macros that all bring their own parsing method.\n *\n * @constructor\n * @extends {MacroMap}\n */\nexport class CommandMap extends MacroMap {\n\n  /**\n   * @override\n   */\n  public parse([env, symbol]: ParseInput) {\n    let macro = this.lookup(symbol);\n    let parser = this.parserFor(symbol);\n    if (!macro || !parser) {\n      return null;\n    }\n    let saveCommand = env.currentCS;\n    env.currentCS = '\\\\' + symbol;\n    let result = parser(env, '\\\\' + macro.symbol, ...macro.args);\n    env.currentCS = saveCommand;\n    return parseResult(result);\n  }\n\n}\n\n\n/**\n * Maps macros for environments. It has a general parsing method for\n * environments, i.e., one that deals with begin/end, and each environment has\n * its own parsing method returning the content.\n *\n * @constructor\n * @extends {MacroMap}\n */\nexport class EnvironmentMap extends MacroMap {\n\n  /**\n   * @constructor\n   * @param {string} name Name of the mapping.\n   * @param {ParseMethod} parser The parser for the environments.\n   * @param {JSON} json The JSON representation of the macro map.\n   * @param {Record<string, ParseMethod>} functionMap Collection of parse\n   *     functions for the single macros.\n   */\n  constructor(name: string,\n              parser: ParseMethod,\n              json: {[index: string]: string | Args[]},\n              functionMap: Record<string, ParseMethod>) {\n    super(name, json, functionMap);\n    this.parser = parser;\n  }\n\n\n  /**\n   * @override\n   */\n  public parse([env, symbol]: ParseInput) {\n    let macro = this.lookup(symbol);\n    let envParser = this.parserFor(symbol);\n    if (!macro || !envParser) {\n      return null;\n    }\n    return parseResult(this.parser(env, macro.symbol, envParser, macro.args));\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}