{"ast":null,"code":"'use strict';\n\nmodule.exports = twig;\ntwig.displayName = 'twig';\ntwig.aliases = [];\nfunction twig(Prism) {\n  Prism.languages.twig = {\n    comment: /\\{#[\\s\\S]*?#\\}/,\n    tag: {\n      pattern: /\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}/,\n      inside: {\n        ld: {\n          pattern: /^(?:\\{\\{-?|\\{%-?\\s*\\w+)/,\n          inside: {\n            punctuation: /^(?:\\{\\{|\\{%)-?/,\n            keyword: /\\w+/\n          }\n        },\n        rd: {\n          pattern: /-?(?:%\\}|\\}\\})$/,\n          inside: {\n            punctuation: /.+/\n          }\n        },\n        string: {\n          pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n          inside: {\n            punctuation: /^['\"]|['\"]$/\n          }\n        },\n        keyword: /\\b(?:even|if|odd)\\b/,\n        boolean: /\\b(?:true|false|null)\\b/,\n        number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n        operator: [{\n          pattern: /(\\s)(?:and|b-and|b-xor|b-or|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,\n          lookbehind: true\n        }, /[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/],\n        property: /\\b[a-zA-Z_]\\w*\\b/,\n        punctuation: /[()\\[\\]{}:.,]/\n      }\n    },\n    // The rest can be parsed as HTML\n    other: {\n      // We want non-blank matches\n      pattern: /\\S(?:[\\s\\S]*\\S)?/,\n      inside: Prism.languages.markup\n    }\n  };\n}","map":{"version":3,"names":["module","exports","twig","displayName","aliases","Prism","languages","comment","tag","pattern","inside","ld","punctuation","keyword","rd","string","boolean","number","operator","lookbehind","property","other","markup"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/refractor/lang/twig.js"],"sourcesContent":["'use strict'\n\nmodule.exports = twig\ntwig.displayName = 'twig'\ntwig.aliases = []\nfunction twig(Prism) {\n  Prism.languages.twig = {\n    comment: /\\{#[\\s\\S]*?#\\}/,\n    tag: {\n      pattern: /\\{\\{[\\s\\S]*?\\}\\}|\\{%[\\s\\S]*?%\\}/,\n      inside: {\n        ld: {\n          pattern: /^(?:\\{\\{-?|\\{%-?\\s*\\w+)/,\n          inside: {\n            punctuation: /^(?:\\{\\{|\\{%)-?/,\n            keyword: /\\w+/\n          }\n        },\n        rd: {\n          pattern: /-?(?:%\\}|\\}\\})$/,\n          inside: {\n            punctuation: /.+/\n          }\n        },\n        string: {\n          pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n          inside: {\n            punctuation: /^['\"]|['\"]$/\n          }\n        },\n        keyword: /\\b(?:even|if|odd)\\b/,\n        boolean: /\\b(?:true|false|null)\\b/,\n        number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n        operator: [\n          {\n            pattern: /(\\s)(?:and|b-and|b-xor|b-or|ends with|in|is|matches|not|or|same as|starts with)(?=\\s)/,\n            lookbehind: true\n          },\n          /[=<>]=?|!=|\\*\\*?|\\/\\/?|\\?:?|[-+~%|]/\n        ],\n        property: /\\b[a-zA-Z_]\\w*\\b/,\n        punctuation: /[()\\[\\]{}:.,]/\n      }\n    },\n    // The rest can be parsed as HTML\n    other: {\n      // We want non-blank matches\n      pattern: /\\S(?:[\\s\\S]*\\S)?/,\n      inside: Prism.languages.markup\n    }\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,IAAI;AACrBA,IAAI,CAACC,WAAW,GAAG,MAAM;AACzBD,IAAI,CAACE,OAAO,GAAG,EAAE;AACjB,SAASF,IAAIA,CAACG,KAAK,EAAE;EACnBA,KAAK,CAACC,SAAS,CAACJ,IAAI,GAAG;IACrBK,OAAO,EAAE,gBAAgB;IACzBC,GAAG,EAAE;MACHC,OAAO,EAAE,iCAAiC;MAC1CC,MAAM,EAAE;QACNC,EAAE,EAAE;UACFF,OAAO,EAAE,yBAAyB;UAClCC,MAAM,EAAE;YACNE,WAAW,EAAE,iBAAiB;YAC9BC,OAAO,EAAE;UACX;QACF,CAAC;QACDC,EAAE,EAAE;UACFL,OAAO,EAAE,iBAAiB;UAC1BC,MAAM,EAAE;YACNE,WAAW,EAAE;UACf;QACF,CAAC;QACDG,MAAM,EAAE;UACNN,OAAO,EAAE,iCAAiC;UAC1CC,MAAM,EAAE;YACNE,WAAW,EAAE;UACf;QACF,CAAC;QACDC,OAAO,EAAE,qBAAqB;QAC9BG,OAAO,EAAE,yBAAyB;QAClCC,MAAM,EAAE,0DAA0D;QAClEC,QAAQ,EAAE,CACR;UACET,OAAO,EAAE,uFAAuF;UAChGU,UAAU,EAAE;QACd,CAAC,EACD,qCAAqC,CACtC;QACDC,QAAQ,EAAE,kBAAkB;QAC5BR,WAAW,EAAE;MACf;IACF,CAAC;IACD;IACAS,KAAK,EAAE;MACL;MACAZ,OAAO,EAAE,kBAAkB;MAC3BC,MAAM,EAAEL,KAAK,CAACC,SAAS,CAACgB;IAC1B;EACF,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}