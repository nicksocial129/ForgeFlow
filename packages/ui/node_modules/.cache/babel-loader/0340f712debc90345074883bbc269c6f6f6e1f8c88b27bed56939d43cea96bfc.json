{"ast":null,"code":"module.exports =\n// We try to support full Ada2012\n//\n// We highlight all appearances of types, keywords, literals (string, char, number, bool)\n// and titles (user defined function/procedure/package)\n// CSS classes are set accordingly\n//\n// Languages causing problems for language detection:\n// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\n// sql (ada default.txt has a lot of sql keywords)\n\nfunction (hljs) {\n  // Regular expression for Ada numeric literals.\n  // stolen form the VHDL highlighter\n\n  // Decimal literal:\n  var INTEGER_RE = '\\\\d(_|\\\\d)*';\n  var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;\n  var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';\n\n  // Based literal:\n  var BASED_INTEGER_RE = '\\\\w+';\n  var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';\n  var NUMBER_RE = '\\\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';\n\n  // Identifier regex\n  var ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';\n\n  // bad chars, only allowed in literals\n  var BAD_CHARS = '[]{}%#\\'\\\"';\n\n  // Ada doesn't have block comments, only line comments\n  var COMMENTS = hljs.COMMENT('--', '$');\n\n  // variable declarations of the form\n  // Foo : Bar := Baz;\n  // where only Bar will be highlighted\n  var VAR_DECLS = {\n    // TODO: These spaces are not required by the Ada syntax\n    // however, I have yet to see handwritten Ada code where\n    // someone does not put spaces around :\n    begin: '\\\\s+:\\\\s+',\n    end: '\\\\s*(:=|;|\\\\)|=>|$)',\n    // endsWithParent: true,\n    // returnBegin: true,\n    illegal: BAD_CHARS,\n    contains: [{\n      // workaround to avoid highlighting\n      // named loops and declare blocks\n      beginKeywords: 'loop for declare others',\n      endsParent: true\n    }, {\n      // properly highlight all modifiers\n      className: 'keyword',\n      beginKeywords: 'not null constant access function procedure in out aliased exception'\n    }, {\n      className: 'type',\n      begin: ID_REGEX,\n      endsParent: true,\n      relevance: 0\n    }]\n  };\n  return {\n    case_insensitive: true,\n    keywords: {\n      keyword: 'abort else new return abs elsif not reverse abstract end ' + 'accept entry select access exception of separate aliased exit or some ' + 'all others subtype and for out synchronized array function overriding ' + 'at tagged generic package task begin goto pragma terminate ' + 'body private then if procedure type case in protected constant interface ' + 'is raise use declare range delay limited record when delta loop rem while ' + 'digits renames with do mod requeue xor',\n      literal: 'True False'\n    },\n    contains: [COMMENTS,\n    // strings \"foobar\"\n    {\n      className: 'string',\n      begin: /\"/,\n      end: /\"/,\n      contains: [{\n        begin: /\"\"/,\n        relevance: 0\n      }]\n    },\n    // characters ''\n    {\n      // character literals always contain one char\n      className: 'string',\n      begin: /'.'/\n    }, {\n      // number literals\n      className: 'number',\n      begin: NUMBER_RE,\n      relevance: 0\n    }, {\n      // Attributes\n      className: 'symbol',\n      begin: \"'\" + ID_REGEX\n    }, {\n      // package definition, maybe inside generic\n      className: 'title',\n      begin: '(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?',\n      end: '(is|$)',\n      keywords: 'package body',\n      excludeBegin: true,\n      excludeEnd: true,\n      illegal: BAD_CHARS\n    }, {\n      // function/procedure declaration/definition\n      // maybe inside generic\n      begin: '(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+',\n      end: '(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',\n      keywords: 'overriding function procedure with is renames return',\n      // we need to re-match the 'function' keyword, so that\n      // the title mode below matches only exactly once\n      returnBegin: true,\n      contains: [COMMENTS, {\n        // name of the function/procedure\n        className: 'title',\n        begin: '(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',\n        end: '(\\\\(|\\\\s+|$)',\n        excludeBegin: true,\n        excludeEnd: true,\n        illegal: BAD_CHARS\n      },\n      // 'self'\n      // // parameter types\n      VAR_DECLS, {\n        // return type\n        className: 'type',\n        begin: '\\\\breturn\\\\s+',\n        end: '(\\\\s+|;|$)',\n        keywords: 'return',\n        excludeBegin: true,\n        excludeEnd: true,\n        // we are done with functions\n        endsParent: true,\n        illegal: BAD_CHARS\n      }]\n    }, {\n      // new type declarations\n      // maybe inside generic\n      className: 'type',\n      begin: '\\\\b(sub)?type\\\\s+',\n      end: '\\\\s+',\n      keywords: 'type',\n      excludeBegin: true,\n      illegal: BAD_CHARS\n    },\n    // see comment above the definition\n    VAR_DECLS\n\n    // no markup\n    // relevance boosters for small snippets\n    // {begin: '\\\\s*=>\\\\s*'},\n    // {begin: '\\\\s*:=\\\\s*'},\n    // {begin: '\\\\s+:=\\\\s+'},\n    ]\n  };\n};","map":{"version":3,"names":["module","exports","hljs","INTEGER_RE","EXPONENT_RE","DECIMAL_LITERAL_RE","BASED_INTEGER_RE","BASED_LITERAL_RE","NUMBER_RE","ID_REGEX","BAD_CHARS","COMMENTS","COMMENT","VAR_DECLS","begin","end","illegal","contains","beginKeywords","endsParent","className","relevance","case_insensitive","keywords","keyword","literal","excludeBegin","excludeEnd","returnBegin"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/highlight.js/lib/languages/ada.js"],"sourcesContent":["module.exports = // We try to support full Ada2012\n//\n// We highlight all appearances of types, keywords, literals (string, char, number, bool)\n// and titles (user defined function/procedure/package)\n// CSS classes are set accordingly\n//\n// Languages causing problems for language detection:\n// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\n// sql (ada default.txt has a lot of sql keywords)\n\nfunction(hljs) {\n    // Regular expression for Ada numeric literals.\n    // stolen form the VHDL highlighter\n\n    // Decimal literal:\n    var INTEGER_RE = '\\\\d(_|\\\\d)*';\n    var EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;\n    var DECIMAL_LITERAL_RE = INTEGER_RE + '(\\\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';\n\n    // Based literal:\n    var BASED_INTEGER_RE = '\\\\w+';\n    var BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';\n\n    var NUMBER_RE = '\\\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';\n\n    // Identifier regex\n    var ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';\n\n    // bad chars, only allowed in literals\n    var BAD_CHARS = '[]{}%#\\'\\\"'\n\n    // Ada doesn't have block comments, only line comments\n    var COMMENTS = hljs.COMMENT('--', '$');\n\n    // variable declarations of the form\n    // Foo : Bar := Baz;\n    // where only Bar will be highlighted\n    var VAR_DECLS = {\n        // TODO: These spaces are not required by the Ada syntax\n        // however, I have yet to see handwritten Ada code where\n        // someone does not put spaces around :\n        begin: '\\\\s+:\\\\s+', end: '\\\\s*(:=|;|\\\\)|=>|$)',\n        // endsWithParent: true,\n        // returnBegin: true,\n        illegal: BAD_CHARS,\n        contains: [\n            {\n                // workaround to avoid highlighting\n                // named loops and declare blocks\n                beginKeywords: 'loop for declare others',\n                endsParent: true,\n            },\n            {\n                // properly highlight all modifiers\n                className: 'keyword',\n                beginKeywords: 'not null constant access function procedure in out aliased exception'\n            },\n            {\n                className: 'type',\n                begin: ID_REGEX,\n                endsParent: true,\n                relevance: 0,\n            }\n        ]\n    };\n\n    return {\n        case_insensitive: true,\n        keywords: {\n            keyword:\n                'abort else new return abs elsif not reverse abstract end ' +\n                'accept entry select access exception of separate aliased exit or some ' +\n                'all others subtype and for out synchronized array function overriding ' +\n                'at tagged generic package task begin goto pragma terminate ' +\n                'body private then if procedure type case in protected constant interface ' +\n                'is raise use declare range delay limited record when delta loop rem while ' +\n                'digits renames with do mod requeue xor',\n            literal:\n                'True False',\n        },\n        contains: [\n            COMMENTS,\n            // strings \"foobar\"\n            {\n                className: 'string',\n                begin: /\"/, end: /\"/,\n                contains: [{begin: /\"\"/, relevance: 0}]\n            },\n            // characters ''\n            {\n                // character literals always contain one char\n                className: 'string',\n                begin: /'.'/\n            },\n            {\n                // number literals\n                className: 'number',\n                begin: NUMBER_RE,\n                relevance: 0\n            },\n            {\n                // Attributes\n                className: 'symbol',\n                begin: \"'\" + ID_REGEX,\n            },\n            {\n                // package definition, maybe inside generic\n                className: 'title',\n                begin: '(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?', end: '(is|$)',\n                keywords: 'package body',\n                excludeBegin: true,\n                excludeEnd: true,\n                illegal: BAD_CHARS\n            },\n            {\n                // function/procedure declaration/definition\n                // maybe inside generic\n                begin: '(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+', end: '(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',\n                keywords: 'overriding function procedure with is renames return',\n                // we need to re-match the 'function' keyword, so that\n                // the title mode below matches only exactly once\n                returnBegin: true,\n                contains:\n                [\n                    COMMENTS,\n                    {\n                        // name of the function/procedure\n                        className: 'title',\n                        begin: '(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',\n                        end: '(\\\\(|\\\\s+|$)',\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        illegal: BAD_CHARS\n                    },\n                    // 'self'\n                    // // parameter types\n                    VAR_DECLS,\n                    {\n                        // return type\n                        className: 'type',\n                        begin: '\\\\breturn\\\\s+', end: '(\\\\s+|;|$)',\n                        keywords: 'return',\n                        excludeBegin: true,\n                        excludeEnd: true,\n                        // we are done with functions\n                        endsParent: true,\n                        illegal: BAD_CHARS\n\n                    },\n                ]\n            },\n            {\n                // new type declarations\n                // maybe inside generic\n                className: 'type',\n                begin: '\\\\b(sub)?type\\\\s+', end: '\\\\s+',\n                keywords: 'type',\n                excludeBegin: true,\n                illegal: BAD_CHARS\n            },\n\n            // see comment above the definition\n            VAR_DECLS,\n\n            // no markup\n            // relevance boosters for small snippets\n            // {begin: '\\\\s*=>\\\\s*'},\n            // {begin: '\\\\s*:=\\\\s*'},\n            // {begin: '\\\\s+:=\\\\s+'},\n        ]\n    };\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}