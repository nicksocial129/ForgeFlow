{"ast":null,"code":"'use strict';\n\nmodule.exports = scheme;\nscheme.displayName = 'scheme';\nscheme.aliases = [];\nfunction scheme(Prism) {\n  Prism.languages.scheme = {\n    comment: /;.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|'[^()#'\\s]+/,\n      greedy: true\n    },\n    character: {\n      pattern: /#\\\\(?:[ux][a-fA-F\\d]+|[a-zA-Z]+|\\S)/,\n      alias: 'string'\n    },\n    keyword: {\n      pattern: /(\\()(?:define(?:-syntax|-library|-values)?|(?:case-)?lambda|let(?:\\*|rec)?(?:-values)?|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-rules)(?=[()\\s])/,\n      lookbehind: true\n    },\n    builtin: {\n      pattern: /(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)(?=[()\\s])/,\n      lookbehind: true\n    },\n    number: {\n      pattern: /([\\s()])[-+]?(?:\\d+\\/\\d+|\\d*\\.?\\d+(?:\\s*[-+]\\s*\\d*\\.?\\d+i)?)\\b/,\n      lookbehind: true\n    },\n    boolean: /#[tf]/,\n    operator: {\n      pattern: /(\\()(?:[-+*%\\/]|[<>]=?|=>?)(?=\\s|$)/,\n      lookbehind: true\n    },\n    function: {\n      pattern: /(\\()[^()'\\s]+(?=[()\\s)]|$)/,\n      lookbehind: true\n    },\n    punctuation: /[()']/\n  };\n}","map":{"version":3,"names":["module","exports","scheme","displayName","aliases","Prism","languages","comment","string","pattern","greedy","character","alias","keyword","lookbehind","builtin","number","boolean","operator","function","punctuation"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/refractor/lang/scheme.js"],"sourcesContent":["'use strict'\n\nmodule.exports = scheme\nscheme.displayName = 'scheme'\nscheme.aliases = []\nfunction scheme(Prism) {\n  Prism.languages.scheme = {\n    comment: /;.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"|'[^()#'\\s]+/,\n      greedy: true\n    },\n    character: {\n      pattern: /#\\\\(?:[ux][a-fA-F\\d]+|[a-zA-Z]+|\\S)/,\n      alias: 'string'\n    },\n    keyword: {\n      pattern: /(\\()(?:define(?:-syntax|-library|-values)?|(?:case-)?lambda|let(?:\\*|rec)?(?:-values)?|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-rules)(?=[()\\s])/,\n      lookbehind: true\n    },\n    builtin: {\n      pattern: /(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)(?=[()\\s])/,\n      lookbehind: true\n    },\n    number: {\n      pattern: /([\\s()])[-+]?(?:\\d+\\/\\d+|\\d*\\.?\\d+(?:\\s*[-+]\\s*\\d*\\.?\\d+i)?)\\b/,\n      lookbehind: true\n    },\n    boolean: /#[tf]/,\n    operator: {\n      pattern: /(\\()(?:[-+*%\\/]|[<>]=?|=>?)(?=\\s|$)/,\n      lookbehind: true\n    },\n    function: {\n      pattern: /(\\()[^()'\\s]+(?=[()\\s)]|$)/,\n      lookbehind: true\n    },\n    punctuation: /[()']/\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,MAAM;AACvBA,MAAM,CAACC,WAAW,GAAG,QAAQ;AAC7BD,MAAM,CAACE,OAAO,GAAG,EAAE;AACnB,SAASF,MAAMA,CAACG,KAAK,EAAE;EACrBA,KAAK,CAACC,SAAS,CAACJ,MAAM,GAAG;IACvBK,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE;MACNC,OAAO,EAAE,+BAA+B;MACxCC,MAAM,EAAE;IACV,CAAC;IACDC,SAAS,EAAE;MACTF,OAAO,EAAE,qCAAqC;MAC9CG,KAAK,EAAE;IACT,CAAC;IACDC,OAAO,EAAE;MACPJ,OAAO,EAAE,6LAA6L;MACtMK,UAAU,EAAE;IACd,CAAC;IACDC,OAAO,EAAE;MACPN,OAAO,EAAE,yNAAyN;MAClOK,UAAU,EAAE;IACd,CAAC;IACDE,MAAM,EAAE;MACNP,OAAO,EAAE,gEAAgE;MACzEK,UAAU,EAAE;IACd,CAAC;IACDG,OAAO,EAAE,OAAO;IAChBC,QAAQ,EAAE;MACRT,OAAO,EAAE,qCAAqC;MAC9CK,UAAU,EAAE;IACd,CAAC;IACDK,QAAQ,EAAE;MACRV,OAAO,EAAE,4BAA4B;MACrCK,UAAU,EAAE;IACd,CAAC;IACDM,WAAW,EAAE;EACf,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}