{"ast":null,"code":"module.exports = function (hljs) {\n  var XML_IDENT_RE = '[A-Za-z0-9\\\\._:-]+';\n  var TAG_INTERNALS = {\n    endsWithParent: true,\n    illegal: /</,\n    relevance: 0,\n    contains: [{\n      className: 'attr',\n      begin: XML_IDENT_RE,\n      relevance: 0\n    }, {\n      begin: /=\\s*/,\n      relevance: 0,\n      contains: [{\n        className: 'string',\n        endsParent: true,\n        variants: [{\n          begin: /\"/,\n          end: /\"/\n        }, {\n          begin: /'/,\n          end: /'/\n        }, {\n          begin: /[^\\s\"'=<>`]+/\n        }]\n      }]\n    }]\n  };\n  return {\n    aliases: ['html', 'xhtml', 'rss', 'atom', 'xjb', 'xsd', 'xsl', 'plist', 'wsf'],\n    case_insensitive: true,\n    contains: [{\n      className: 'meta',\n      begin: '<!DOCTYPE',\n      end: '>',\n      relevance: 10,\n      contains: [{\n        begin: '\\\\[',\n        end: '\\\\]'\n      }]\n    }, hljs.COMMENT('<!--', '-->', {\n      relevance: 10\n    }), {\n      begin: '<\\\\!\\\\[CDATA\\\\[',\n      end: '\\\\]\\\\]>',\n      relevance: 10\n    }, {\n      className: 'meta',\n      begin: /<\\?xml/,\n      end: /\\?>/,\n      relevance: 10\n    }, {\n      begin: /<\\?(php)?/,\n      end: /\\?>/,\n      subLanguage: 'php',\n      contains: [\n      // We don't want the php closing tag ?> to close the PHP block when\n      // inside any of the following blocks:\n      {\n        begin: '/\\\\*',\n        end: '\\\\*/',\n        skip: true\n      }, {\n        begin: 'b\"',\n        end: '\"',\n        skip: true\n      }, {\n        begin: 'b\\'',\n        end: '\\'',\n        skip: true\n      }, hljs.inherit(hljs.APOS_STRING_MODE, {\n        illegal: null,\n        className: null,\n        contains: null,\n        skip: true\n      }), hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        illegal: null,\n        className: null,\n        contains: null,\n        skip: true\n      })]\n    }, {\n      className: 'tag',\n      /*\n      The lookahead pattern (?=...) ensures that 'begin' only matches\n      '<style' as a single word, followed by a whitespace or an\n      ending braket. The '$' is needed for the lexeme to be recognized\n      by hljs.subMode() that tests lexemes outside the stream.\n      */\n      begin: '<style(?=\\\\s|>|$)',\n      end: '>',\n      keywords: {\n        name: 'style'\n      },\n      contains: [TAG_INTERNALS],\n      starts: {\n        end: '</style>',\n        returnEnd: true,\n        subLanguage: ['css', 'xml']\n      }\n    }, {\n      className: 'tag',\n      // See the comment in the <style tag about the lookahead pattern\n      begin: '<script(?=\\\\s|>|$)',\n      end: '>',\n      keywords: {\n        name: 'script'\n      },\n      contains: [TAG_INTERNALS],\n      starts: {\n        end: '\\<\\/script\\>',\n        returnEnd: true,\n        subLanguage: ['actionscript', 'javascript', 'handlebars', 'xml', 'vbscript']\n      }\n    }, {\n      className: 'tag',\n      begin: '</?',\n      end: '/?>',\n      contains: [{\n        className: 'name',\n        begin: /[^\\/><\\s]+/,\n        relevance: 0\n      }, TAG_INTERNALS]\n    }]\n  };\n};","map":{"version":3,"names":["module","exports","hljs","XML_IDENT_RE","TAG_INTERNALS","endsWithParent","illegal","relevance","contains","className","begin","endsParent","variants","end","aliases","case_insensitive","COMMENT","subLanguage","skip","inherit","APOS_STRING_MODE","QUOTE_STRING_MODE","keywords","name","starts","returnEnd"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/highlight.js/lib/languages/xml.js"],"sourcesContent":["module.exports = function(hljs) {\n  var XML_IDENT_RE = '[A-Za-z0-9\\\\._:-]+';\n  var TAG_INTERNALS = {\n    endsWithParent: true,\n    illegal: /</,\n    relevance: 0,\n    contains: [\n      {\n        className: 'attr',\n        begin: XML_IDENT_RE,\n        relevance: 0\n      },\n      {\n        begin: /=\\s*/,\n        relevance: 0,\n        contains: [\n          {\n            className: 'string',\n            endsParent: true,\n            variants: [\n              {begin: /\"/, end: /\"/},\n              {begin: /'/, end: /'/},\n              {begin: /[^\\s\"'=<>`]+/}\n            ]\n          }\n        ]\n      }\n    ]\n  };\n  return {\n    aliases: ['html', 'xhtml', 'rss', 'atom', 'xjb', 'xsd', 'xsl', 'plist', 'wsf'],\n    case_insensitive: true,\n    contains: [\n      {\n        className: 'meta',\n        begin: '<!DOCTYPE', end: '>',\n        relevance: 10,\n        contains: [{begin: '\\\\[', end: '\\\\]'}]\n      },\n      hljs.COMMENT(\n        '<!--',\n        '-->',\n        {\n          relevance: 10\n        }\n      ),\n      {\n        begin: '<\\\\!\\\\[CDATA\\\\[', end: '\\\\]\\\\]>',\n        relevance: 10\n      },\n      {\n        className: 'meta',\n        begin: /<\\?xml/, end: /\\?>/, relevance: 10\n      },\n      {\n        begin: /<\\?(php)?/, end: /\\?>/,\n        subLanguage: 'php',\n        contains: [\n          // We don't want the php closing tag ?> to close the PHP block when\n          // inside any of the following blocks:\n          {begin: '/\\\\*', end: '\\\\*/', skip: true},\n          {begin: 'b\"', end: '\"', skip: true},\n          {begin: 'b\\'', end: '\\'', skip: true},\n          hljs.inherit(hljs.APOS_STRING_MODE, {illegal: null, className: null, contains: null, skip: true}),\n          hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null, className: null, contains: null, skip: true})\n        ]\n      },\n      {\n        className: 'tag',\n        /*\n        The lookahead pattern (?=...) ensures that 'begin' only matches\n        '<style' as a single word, followed by a whitespace or an\n        ending braket. The '$' is needed for the lexeme to be recognized\n        by hljs.subMode() that tests lexemes outside the stream.\n        */\n        begin: '<style(?=\\\\s|>|$)', end: '>',\n        keywords: {name: 'style'},\n        contains: [TAG_INTERNALS],\n        starts: {\n          end: '</style>', returnEnd: true,\n          subLanguage: ['css', 'xml']\n        }\n      },\n      {\n        className: 'tag',\n        // See the comment in the <style tag about the lookahead pattern\n        begin: '<script(?=\\\\s|>|$)', end: '>',\n        keywords: {name: 'script'},\n        contains: [TAG_INTERNALS],\n        starts: {\n          end: '\\<\\/script\\>', returnEnd: true,\n          subLanguage: ['actionscript', 'javascript', 'handlebars', 'xml', 'vbscript']\n        }\n      },\n      {\n        className: 'tag',\n        begin: '</?', end: '/?>',\n        contains: [\n          {\n            className: 'name', begin: /[^\\/><\\s]+/, relevance: 0\n          },\n          TAG_INTERNALS\n        ]\n      }\n    ]\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}