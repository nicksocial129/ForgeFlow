{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ColortblConfiguration = exports.ColorArrayItem = void 0;\nvar BaseItems_js_1 = require(\"../base/BaseItems.js\");\nvar Configuration_js_1 = require(\"../Configuration.js\");\nvar SymbolMap_js_1 = require(\"../SymbolMap.js\");\nvar TexError_js_1 = __importDefault(require(\"../TexError.js\"));\nvar ColorArrayItem = function (_super) {\n  __extends(ColorArrayItem, _super);\n  function ColorArrayItem() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.color = {\n      cell: '',\n      row: '',\n      col: []\n    };\n    _this.hasColor = false;\n    return _this;\n  }\n  ColorArrayItem.prototype.EndEntry = function () {\n    _super.prototype.EndEntry.call(this);\n    var cell = this.row[this.row.length - 1];\n    var color = this.color.cell || this.color.row || this.color.col[this.row.length - 1];\n    if (color) {\n      cell.attributes.set('mathbackground', color);\n      this.color.cell = '';\n      this.hasColor = true;\n    }\n  };\n  ColorArrayItem.prototype.EndRow = function () {\n    _super.prototype.EndRow.call(this);\n    this.color.row = '';\n  };\n  ColorArrayItem.prototype.createMml = function () {\n    var mml = _super.prototype.createMml.call(this);\n    var table = mml.isKind('mrow') ? mml.childNodes[1] : mml;\n    if (table.isKind('menclose')) {\n      table = table.childNodes[0].childNodes[0];\n    }\n    if (this.hasColor && table.attributes.get('frame') === 'none') {\n      table.attributes.set('frame', '');\n    }\n    return mml;\n  };\n  return ColorArrayItem;\n}(BaseItems_js_1.ArrayItem);\nexports.ColorArrayItem = ColorArrayItem;\nnew SymbolMap_js_1.CommandMap('colortbl', {\n  cellcolor: ['TableColor', 'cell'],\n  rowcolor: ['TableColor', 'row'],\n  columncolor: ['TableColor', 'col']\n}, {\n  TableColor: function (parser, name, type) {\n    var lookup = parser.configuration.packageData.get('color').model;\n    var model = parser.GetBrackets(name, '');\n    var color = lookup.getColor(model, parser.GetArgument(name));\n    var top = parser.stack.Top();\n    if (!(top instanceof ColorArrayItem)) {\n      throw new TexError_js_1.default('UnsupportedTableColor', 'Unsupported use of %1', parser.currentCS);\n    }\n    if (type === 'col') {\n      if (top.table.length) {\n        throw new TexError_js_1.default('ColumnColorNotTop', '%1 must be in the top row', name);\n      }\n      top.color.col[top.row.length] = color;\n      if (parser.GetBrackets(name, '')) {\n        parser.GetBrackets(name, '');\n      }\n    } else {\n      top.color[type] = color;\n      if (type === 'row' && (top.Size() || top.row.length)) {\n        throw new TexError_js_1.default('RowColorNotFirst', '%1 must be at the beginning of a row', name);\n      }\n    }\n  }\n});\nvar config = function (config, jax) {\n  if (!jax.parseOptions.packageData.has('color')) {\n    Configuration_js_1.ConfigurationHandler.get('color').config(config, jax);\n  }\n};\nexports.ColortblConfiguration = Configuration_js_1.Configuration.create('colortbl', {\n  handler: {\n    macro: ['colortbl']\n  },\n  items: {\n    'array': ColorArrayItem\n  },\n  priority: 10,\n  config: [config, 10]\n});","map":{"version":3,"names":["BaseItems_js_1","require","Configuration_js_1","SymbolMap_js_1","TexError_js_1","__importDefault","ColorArrayItem","_super","__extends","_this","apply","arguments","color","cell","row","col","hasColor","prototype","EndEntry","call","length","attributes","set","EndRow","createMml","mml","table","isKind","childNodes","get","ArrayItem","exports","CommandMap","cellcolor","rowcolor","columncolor","TableColor","parser","name","type","lookup","configuration","packageData","model","GetBrackets","getColor","GetArgument","top","stack","Top","default","currentCS","Size","config","jax","parseOptions","has","ConfigurationHandler","ColortblConfiguration","Configuration","create","handler","macro","items","priority"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/input/tex/colortbl/ColortblConfiguration.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2021-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview    Configuration file for the colortbl package.\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport {ArrayItem} from '../base/BaseItems.js';\nimport {Configuration, ParserConfiguration, ConfigurationHandler} from '../Configuration.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport TexParser from '../TexParser.js';\nimport TexError from '../TexError.js';\nimport {MmlNode} from '../../../core/MmlTree/MmlNode.js';\n\nimport {TeX} from '../../tex.js';\n\n/**\n * Information about table colors.\n */\nexport interface ColorData {\n  cell: string;\n  row: string;\n  col: string[];\n}\n\n//\n//  Sublcass the ArrayItem to handle colored entries\n//\nexport class ColorArrayItem extends ArrayItem {\n  /**\n   *  Store current color for cell, row, and columns.\n   */\n  public color: ColorData = {\n    cell: '',\n    row: '',\n    col: []\n  };\n\n  /**\n   * True if any cell is colored (we will make sure the edge cells are full sized).\n   */\n  public hasColor: boolean = false;\n\n  /**\n   * @override\n   */\n  public EndEntry() {\n    super.EndEntry();\n    const cell = this.row[this.row.length - 1];\n    const color = this.color.cell || this.color.row || this.color.col[this.row.length - 1];\n    if (color) {\n      cell.attributes.set('mathbackground', color);\n      this.color.cell = '';\n      this.hasColor = true;\n    }\n  }\n\n  /**\n   * @override\n   */\n  public EndRow() {\n    super.EndRow();\n    this.color.row = '';\n  }\n\n  /**\n   * @override\n   */\n  public createMml() {\n    //\n    // If there is any color in the array, give it an empty frame,\n    //   if there isn't one already.  This will make sure the color\n    //   in edge cells extends past their contents.\n    //\n    const mml = super.createMml();\n    let table = (mml.isKind('mrow') ? mml.childNodes[1] : mml) as MmlNode;\n    if (table.isKind('menclose')) {\n      table = table.childNodes[0].childNodes[0] as MmlNode;\n    }\n    if (this.hasColor && table.attributes.get('frame') === 'none') {\n      table.attributes.set('frame', '');\n    }\n    return mml;\n  }\n\n}\n\n//\n//  Define macros for table coloring.\n//\nnew CommandMap('colortbl', {\n  cellcolor: ['TableColor', 'cell'],\n  rowcolor:  ['TableColor', 'row'],\n  columncolor: ['TableColor', 'col']\n}, {\n  /**\n   * Add color to a column, row, or cell.\n   *\n   * @param {TexParser} parser       The active TeX parser\n   * @param {string} name            The name of the macro that is being processed\n   * @param {keyof ColorData} type   The type (col, row, cell) of color being added\n   */\n  TableColor(parser: TexParser, name: string, type: keyof ColorData) {\n    const lookup = parser.configuration.packageData.get('color').model;  // use the color extension's color model\n    const model = parser.GetBrackets(name, '');\n    const color = lookup.getColor(model, parser.GetArgument(name));\n    //\n    // Check that we are in a colorable array.\n    //\n    const top = parser.stack.Top() as ColorArrayItem;\n    if (!(top instanceof ColorArrayItem)) {\n      throw new TexError('UnsupportedTableColor', 'Unsupported use of %1', parser.currentCS);\n    }\n    //\n    //  Check the position of the macro and save the color.\n    //\n    if (type === 'col') {\n      if (top.table.length) {\n        throw new TexError('ColumnColorNotTop', '%1 must be in the top row', name);\n      }\n      top.color.col[top.row.length] = color;\n      //\n      // Ignore the left and right overlap options.\n      //\n      if (parser.GetBrackets(name, '')) {\n        parser.GetBrackets(name, '');\n      }\n    } else {\n      top.color[type] = color;\n      if (type === 'row' && (top.Size() || top.row.length)) {\n        throw new TexError('RowColorNotFirst', '%1 must be at the beginning of a row', name);\n      }\n    }\n  }\n});\n\n/**\n * The configuration function for colortbl.\n *\n * @param {ParserConfiguration} config   The configuration being used.\n * @param {Tex} jax                      The TeX jax using this configuration.\n */\nconst config = function (config: ParserConfiguration, jax: TeX<any, any, any>) {\n  //\n  //  Make sure color is configured.  (It doesn't have to be included in tex.packages.)\n  //\n  if (!jax.parseOptions.packageData.has('color')) {\n    ConfigurationHandler.get('color').config(config, jax);\n  }\n};\n\n//\n//  Create the color-table configuration.\n//\nexport const ColortblConfiguration = Configuration.create('colortbl', {\n  handler: {macro: ['colortbl']},\n  items: {'array': ColorArrayItem},  // overrides original array class\n  priority: 10,                      // make sure we are processed after the base package (to override its array)\n  config: [config, 10]               // make sure we configure after the color package, if it is used.\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}