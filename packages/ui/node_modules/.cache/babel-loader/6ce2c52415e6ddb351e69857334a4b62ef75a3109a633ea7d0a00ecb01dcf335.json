{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractInputJax = void 0;\nvar Options_js_1 = require(\"../util/Options.js\");\nvar FunctionList_js_1 = require(\"../util/FunctionList.js\");\nvar AbstractInputJax = function () {\n  function AbstractInputJax(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.adaptor = null;\n    this.mmlFactory = null;\n    var CLASS = this.constructor;\n    this.options = (0, Options_js_1.userOptions)((0, Options_js_1.defaultOptions)({}, CLASS.OPTIONS), options);\n    this.preFilters = new FunctionList_js_1.FunctionList();\n    this.postFilters = new FunctionList_js_1.FunctionList();\n  }\n  Object.defineProperty(AbstractInputJax.prototype, \"name\", {\n    get: function () {\n      return this.constructor.NAME;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  AbstractInputJax.prototype.setAdaptor = function (adaptor) {\n    this.adaptor = adaptor;\n  };\n  AbstractInputJax.prototype.setMmlFactory = function (mmlFactory) {\n    this.mmlFactory = mmlFactory;\n  };\n  AbstractInputJax.prototype.initialize = function () {};\n  AbstractInputJax.prototype.reset = function () {\n    var _args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    }\n  };\n  Object.defineProperty(AbstractInputJax.prototype, \"processStrings\", {\n    get: function () {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  AbstractInputJax.prototype.findMath = function (_node, _options) {\n    return [];\n  };\n  AbstractInputJax.prototype.executeFilters = function (filters, math, document, data) {\n    var args = {\n      math: math,\n      document: document,\n      data: data\n    };\n    filters.execute(args);\n    return args.data;\n  };\n  AbstractInputJax.NAME = 'generic';\n  AbstractInputJax.OPTIONS = {};\n  return AbstractInputJax;\n}();\nexports.AbstractInputJax = AbstractInputJax;","map":{"version":3,"names":["Options_js_1","require","FunctionList_js_1","AbstractInputJax","options","adaptor","mmlFactory","CLASS","constructor","userOptions","defaultOptions","OPTIONS","preFilters","FunctionList","postFilters","Object","defineProperty","prototype","get","NAME","setAdaptor","setMmlFactory","initialize","reset","_args","_i","arguments","length","findMath","_node","_options","executeFilters","filters","math","document","data","args","execute","exports"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/core/InputJax.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the interface and abstract class for the InputJax\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {MathDocument} from './MathDocument.js';\nimport {MathItem, ProtoItem} from './MathItem.js';\nimport {MmlNode} from './MmlTree/MmlNode.js';\nimport {MmlFactory} from './MmlTree/MmlFactory.js';\nimport {userOptions, defaultOptions, OptionList} from '../util/Options.js';\nimport {FunctionList} from '../util/FunctionList.js';\nimport {DOMAdaptor} from '../core/DOMAdaptor.js';\n\n/*****************************************************************/\n/**\n *  The InputJax interface\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface InputJax<N, T, D> {\n  /**\n   * The name of the input jax subclass (e.g,. 'TeX')\n   */\n  name: string;\n\n  /**\n   * Whether this input jax processes string arrays or DOM nodes\n   * (TeX and AsciiMath process strings, MathML processes DOM nodes)\n   */\n  processStrings: boolean;\n\n  /**\n   * The options for this input jax instance\n   */\n  options: OptionList;\n\n  /**\n   * Lists of pre- and post-filters to call before and after processing the input\n   */\n  preFilters: FunctionList;\n  postFilters: FunctionList;\n\n  /**\n   * The DOM adaptor for managing HTML elements\n   */\n  adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * The MmlFactory for this input jax\n   */\n  mmlFactory: MmlFactory;\n\n  /**\n   * @param {DOMAdaptor} adaptor The adaptor to use in this jax\n   */\n  setAdaptor(adaptor: DOMAdaptor<N, T, D>): void;\n\n  /**\n   * @param {MmlFactory} mmlFactory The MmlFactory to use in this jax\n   */\n  setMmlFactory(mmlFactory: MmlFactory): void;\n\n  /**\n   * Do any initialization that depends on the document being set up\n   */\n  initialize(): void;\n\n  /**\n   * Reset any needed features of the input jax\n   *\n   * @param {any[]} args   The arguments needed by the reset operation\n   */\n  reset(...args: any[]): void;\n\n  /**\n   * Finds the math within the DOM or the list of strings\n   *\n   * @param {N | string[]} which   The element or array of strings to be searched for math\n   * @param {OptionList} options   The options for the search, if any\n   * @return {ProtoItem[]}         Array of proto math items found (further processed by the\n   *                                handler to produce actual MathItem objects)\n   */\n  findMath(which: N | string[], options?: OptionList): ProtoItem<N, T>[];\n\n  /**\n   * Convert the math in a math item into the internal format\n   *\n   * @param {MathItem} math  The MathItem whose math content is to processed\n   * @param {MathDocument} document The MathDocument for this input jax.\n   * @return {MmlNode}       The resulting internal node tree for the math\n   */\n  compile(math: MathItem<N, T, D>, document: MathDocument<N, T, D>): MmlNode;\n}\n\n/*****************************************************************/\n/**\n *  The abstract InputJax class\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport abstract class AbstractInputJax<N, T, D> implements InputJax<N, T, D> {\n\n  /**\n   * The name of the input jax\n   */\n  public static NAME: string = 'generic';\n\n  /**\n   * The default options for the input jax\n   */\n  public static OPTIONS: OptionList = {};\n\n  /**\n   * The actual options supplied to the input jax\n   */\n  public options: OptionList;\n\n  /**\n   * Filters to run on the TeX string before it is processed\n   */\n  public preFilters: FunctionList;\n\n  /**\n   * Filters to run on the generated MathML after the TeX string is processed\n   */\n  public postFilters: FunctionList;\n\n  /**\n   * The DOMAdaptor for the MathDocument for this input jax\n   */\n  public adaptor: DOMAdaptor<N, T, D> = null;  // set by the handler\n  /**\n   * The MathML node factory\n   */\n  public mmlFactory: MmlFactory = null;        // set by the handler\n\n  /**\n   * @param {OptionList} options  The options to apply to this input jax\n   *\n   * @constructor\n   */\n  constructor(options: OptionList = {}) {\n    let CLASS = this.constructor as typeof AbstractInputJax;\n    this.options = userOptions(defaultOptions({}, CLASS.OPTIONS), options);\n    this.preFilters = new FunctionList();\n    this.postFilters = new FunctionList();\n  }\n\n  /**\n   * @return {string}  The name of this input jax class\n   */\n  public get name(): string {\n    return (this.constructor as typeof AbstractInputJax).NAME;\n  }\n\n  /**\n   * @override\n   */\n  public setAdaptor(adaptor: DOMAdaptor<N, T, D>) {\n    this.adaptor = adaptor;\n  }\n\n  /**\n   * @override\n   */\n  public setMmlFactory(mmlFactory: MmlFactory) {\n    this.mmlFactory = mmlFactory;\n  }\n\n  /**\n   * @override\n   */\n  public initialize() {\n  }\n\n  /**\n   * @override\n   */\n  public reset(..._args: any[]) {\n  }\n\n  /**\n   * @return {boolean}  True means find math in string array, false means in DOM element\n   */\n  public get processStrings(): boolean {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public findMath(_node: N | string[], _options?: OptionList) {\n    return [] as ProtoItem<N, T>[];\n  }\n\n  /**\n   * @override\n   */\n  public abstract compile(math: MathItem<N, T, D>, document: MathDocument<N, T, D>): MmlNode;\n\n  /**\n   * Execute a set of filters, passing them the MathItem and any needed data,\n   *  and return the (possibly modified) data\n   *\n   * @param {FunctionList} filters   The list of functions to be performed\n   * @param {MathItem} math          The math item that is being processed\n   * @param {MathDocument} document  The math document containg the math item\n   * @param {any} data               Whatever other data is needed\n   * @return {any}                   The (possibly modified) data\n   */\n  protected executeFilters(\n    filters: FunctionList, math: MathItem<N, T, D>,\n    document: MathDocument<N, T, D>, data: any\n  ): any {\n    let args = {math: math, document: document, data: data};\n    filters.execute(args);\n    return args.data;\n  }\n\n}\n"],"mappings":";;;;;;AA2BA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAAC,iBAAA,GAAAD,OAAA;AA8FA,IAAAE,gBAAA;EAyCE,SAAAA,iBAAYC,OAAwB;IAAxB,IAAAA,OAAA;MAAAA,OAAA,KAAwB;IAAA;IAX7B,KAAAC,OAAO,GAAwB,IAAI;IAInC,KAAAC,UAAU,GAAe,IAAI;IAQlC,IAAIC,KAAK,GAAG,IAAI,CAACC,WAAsC;IACvD,IAAI,CAACJ,OAAO,GAAG,IAAAJ,YAAA,CAAAS,WAAW,EAAC,IAAAT,YAAA,CAAAU,cAAc,EAAC,EAAE,EAAEH,KAAK,CAACI,OAAO,CAAC,EAAEP,OAAO,CAAC;IACtE,IAAI,CAACQ,UAAU,GAAG,IAAIV,iBAAA,CAAAW,YAAY,EAAE;IACpC,IAAI,CAACC,WAAW,GAAG,IAAIZ,iBAAA,CAAAW,YAAY,EAAE;EACvC;EAKAE,MAAA,CAAAC,cAAA,CAAWb,gBAAA,CAAAc,SAAA,QAAI;SAAf,SAAAC,CAAA;MACE,OAAQ,IAAI,CAACV,WAAuC,CAACW,IAAI;IAC3D,CAAC;;;;EAKMhB,gBAAA,CAAAc,SAAA,CAAAG,UAAU,GAAjB,UAAkBf,OAA4B;IAC5C,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB,CAAC;EAKMF,gBAAA,CAAAc,SAAA,CAAAI,aAAa,GAApB,UAAqBf,UAAsB;IACzC,IAAI,CAACA,UAAU,GAAGA,UAAU;EAC9B,CAAC;EAKMH,gBAAA,CAAAc,SAAA,CAAAK,UAAU,GAAjB,aACA,CAAC;EAKMnB,gBAAA,CAAAc,SAAA,CAAAM,KAAK,GAAZ;IAAa,IAAAC,KAAA;SAAA,IAAAC,EAAA,IAAe,EAAfA,EAAA,GAAAC,SAAA,CAAAC,MAAe,EAAfF,EAAA,EAAe;MAAfD,KAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;EACb,CAAC;EAKDV,MAAA,CAAAC,cAAA,CAAWb,gBAAA,CAAAc,SAAA,kBAAc;SAAzB,SAAAC,CAAA;MACE,OAAO,IAAI;IACb,CAAC;;;;EAKMf,gBAAA,CAAAc,SAAA,CAAAW,QAAQ,GAAf,UAAgBC,KAAmB,EAAEC,QAAqB;IACxD,OAAO,EAAuB;EAChC,CAAC;EAiBS3B,gBAAA,CAAAc,SAAA,CAAAc,cAAc,GAAxB,UACEC,OAAqB,EAAEC,IAAuB,EAC9CC,QAA+B,EAAEC,IAAS;IAE1C,IAAIC,IAAI,GAAG;MAACH,IAAI,EAAEA,IAAI;MAAEC,QAAQ,EAAEA,QAAQ;MAAEC,IAAI,EAAEA;IAAI,CAAC;IACvDH,OAAO,CAACK,OAAO,CAACD,IAAI,CAAC;IACrB,OAAOA,IAAI,CAACD,IAAI;EAClB,CAAC;EAhHahC,gBAAA,CAAAgB,IAAI,GAAW,SAAS;EAKxBhB,gBAAA,CAAAQ,OAAO,GAAe,EAAE;EA6GxC,OAAAR,gBAAC;CAAA,CAvHD;AAAsBmC,OAAA,CAAAnC,gBAAA,GAAAA,gBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}