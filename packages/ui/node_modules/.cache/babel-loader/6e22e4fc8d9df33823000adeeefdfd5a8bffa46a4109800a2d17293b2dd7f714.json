{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SetOptionsConfiguration = exports.SetOptionsUtil = void 0;\nvar Configuration_js_1 = require(\"../Configuration.js\");\nvar SymbolMap_js_1 = require(\"../SymbolMap.js\");\nvar TexError_js_1 = __importDefault(require(\"../TexError.js\"));\nvar ParseUtil_js_1 = __importDefault(require(\"../ParseUtil.js\"));\nvar Symbol_js_1 = require(\"../Symbol.js\");\nvar BaseMethods_js_1 = __importDefault(require(\"../base/BaseMethods.js\"));\nvar Options_js_1 = require(\"../../../util/Options.js\");\nexports.SetOptionsUtil = {\n  filterPackage: function (parser, extension) {\n    if (extension !== 'tex' && !Configuration_js_1.ConfigurationHandler.get(extension)) {\n      throw new TexError_js_1.default('NotAPackage', 'Not a defined package: %1', extension);\n    }\n    var config = parser.options.setoptions;\n    var options = config.allowOptions[extension];\n    if (options === undefined && !config.allowPackageDefault || options === false) {\n      throw new TexError_js_1.default('PackageNotSettable', 'Options can\\'t be set for package \"%1\"', extension);\n    }\n    return true;\n  },\n  filterOption: function (parser, extension, option) {\n    var _a;\n    var config = parser.options.setoptions;\n    var options = config.allowOptions[extension] || {};\n    var allow = options.hasOwnProperty(option) && !(0, Options_js_1.isObject)(options[option]) ? options[option] : null;\n    if (allow === false || allow === null && !config.allowOptionsDefault) {\n      throw new TexError_js_1.default('OptionNotSettable', 'Option \"%1\" is not allowed to be set', option);\n    }\n    if (!((_a = extension === 'tex' ? parser.options : parser.options[extension]) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(option))) {\n      if (extension === 'tex') {\n        throw new TexError_js_1.default('InvalidTexOption', 'Invalid TeX option \"%1\"', option);\n      } else {\n        throw new TexError_js_1.default('InvalidOptionKey', 'Invalid option \"%1\" for package \"%2\"', option, extension);\n      }\n    }\n    return true;\n  },\n  filterValue: function (_parser, _extension, _option, value) {\n    return value;\n  }\n};\nvar setOptionsMap = new SymbolMap_js_1.CommandMap('setoptions', {\n  setOptions: 'SetOptions'\n}, {\n  SetOptions: function (parser, name) {\n    var e_1, _a;\n    var extension = parser.GetBrackets(name) || 'tex';\n    var options = ParseUtil_js_1.default.keyvalOptions(parser.GetArgument(name));\n    var config = parser.options.setoptions;\n    if (!config.filterPackage(parser, extension)) return;\n    try {\n      for (var _b = __values(Object.keys(options)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n        if (config.filterOption(parser, extension, key)) {\n          (extension === 'tex' ? parser.options : parser.options[extension])[key] = config.filterValue(parser, extension, key, options[key]);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  }\n});\nfunction setoptionsConfig(_config, jax) {\n  var require = jax.parseOptions.handlers.get('macro').lookup('require');\n  if (require) {\n    setOptionsMap.add('Require', new Symbol_js_1.Macro('Require', require._func));\n    setOptionsMap.add('require', new Symbol_js_1.Macro('require', BaseMethods_js_1.default.Macro, ['\\\\Require{#2}\\\\setOptions[#2]{#1}', 2, '']));\n  }\n}\nexports.SetOptionsConfiguration = Configuration_js_1.Configuration.create('setoptions', {\n  handler: {\n    macro: ['setoptions']\n  },\n  config: setoptionsConfig,\n  priority: 3,\n  options: {\n    setoptions: {\n      filterPackage: exports.SetOptionsUtil.filterPackage,\n      filterOption: exports.SetOptionsUtil.filterOption,\n      filterValue: exports.SetOptionsUtil.filterValue,\n      allowPackageDefault: true,\n      allowOptionsDefault: true,\n      allowOptions: (0, Options_js_1.expandable)({\n        tex: {\n          FindTeX: false,\n          formatError: false,\n          package: false,\n          baseURL: false,\n          tags: false,\n          maxBuffer: false,\n          maxMaxros: false,\n          macros: false,\n          environments: false\n        },\n        setoptions: false,\n        autoload: false,\n        require: false,\n        configmacros: false,\n        tagformat: false\n      })\n    }\n  }\n});","map":{"version":3,"names":["Configuration_js_1","require","SymbolMap_js_1","TexError_js_1","__importDefault","ParseUtil_js_1","Symbol_js_1","BaseMethods_js_1","Options_js_1","exports","SetOptionsUtil","filterPackage","parser","extension","ConfigurationHandler","get","default","config","options","setoptions","allowOptions","undefined","allowPackageDefault","filterOption","option","allow","hasOwnProperty","isObject","allowOptionsDefault","_a","filterValue","_parser","_extension","_option","value","setOptionsMap","CommandMap","setOptions","SetOptions","name","GetBrackets","keyvalOptions","GetArgument","_b","__values","Object","keys","_c","next","done","key","setoptionsConfig","_config","jax","parseOptions","handlers","lookup","add","Macro","_func","SetOptionsConfiguration","Configuration","create","handler","macro","priority","expandable","tex","FindTeX","formatError","package","baseURL","tags","maxBuffer","maxMaxros","macros","environments","autoload","configmacros","tagformat"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/input/tex/setoptions/SetOptionsConfiguration.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2021-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the setoptions package.\n *\n * @author dpvc@mathjax.org (Davide P. Cervone)\n */\n\nimport {Configuration, ConfigurationHandler, ParserConfiguration} from '../Configuration.js';\nimport {TeX} from '../../tex.js';\nimport TexParser from '../TexParser.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport TexError from '../TexError.js';\nimport ParseUtil from '../ParseUtil.js';\nimport {Macro} from '../Symbol.js';\nimport BaseMethods from '../base/BaseMethods.js';\nimport {expandable, isObject} from '../../../util/Options.js';\n\nexport const SetOptionsUtil = {\n\n  /**\n   * Check if options can be set for a given pacakge, and error otherwise.\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {string} extension   The name of the package whose option is being set.\n   * @return {boolean}           True when options can be set for this package.\n   */\n  filterPackage(parser: TexParser, extension: string): boolean {\n    if (extension !== 'tex' && !ConfigurationHandler.get(extension)) {\n      throw new TexError('NotAPackage', 'Not a defined package: %1', extension);\n    }\n    const config = parser.options.setoptions;\n    const options = config.allowOptions[extension];\n    if ((options === undefined && !config.allowPackageDefault) || options === false) {\n      throw new TexError('PackageNotSettable', 'Options can\\'t be set for package \"%1\"', extension);\n    }\n    return true;\n  },\n\n  /**\n   * Check if an option can be set and error otherwise.\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {string} extension   The name of the package whose option is being set.\n   * @param {string} option      The name of the option being set.\n   * @return {boolean}           True when the option can be set.\n   */\n  filterOption(parser: TexParser, extension: string, option: string): boolean {\n    const config = parser.options.setoptions;\n    const options = config.allowOptions[extension] || {};\n    const allow = (options.hasOwnProperty(option) && !isObject(options[option]) ? options[option] : null);\n    if (allow === false || (allow === null && !config.allowOptionsDefault)) {\n      throw new TexError('OptionNotSettable', 'Option \"%1\" is not allowed to be set', option);\n    }\n    if (!(extension === 'tex' ? parser.options : parser.options[extension])?.hasOwnProperty(option)) {\n      if (extension === 'tex') {\n        throw new TexError('InvalidTexOption', 'Invalid TeX option \"%1\"', option);\n      } else {\n        throw new TexError('InvalidOptionKey', 'Invalid option \"%1\" for package \"%2\"', option, extension);\n      }\n    }\n    return true;\n  },\n\n  /**\n   * Verify an option's value before setting it.\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {string} extension   The name of the package whose option this is.\n   * @param {string} option      The name of the option being set.\n   * @param {string} value       The value to give to the option.\n   * @return {string}            The (possibly modified) value for the option\n   */\n  filterValue(_parser: TexParser, _extension: string, _option: string, value: string): string {\n    return value;\n  }\n\n};\n\nconst setOptionsMap = new CommandMap('setoptions', {\n  setOptions: 'SetOptions'\n}, {\n  /**\n   * Implements \\setOptions[package]{option-values}\n   *\n   * @param {TexParser} parser   The active tex parser.\n   * @param {string} name        The name of the macro being processed.\n   */\n  SetOptions(parser: TexParser, name: string) {\n    const extension = parser.GetBrackets(name) || 'tex';\n    const options = ParseUtil.keyvalOptions(parser.GetArgument(name));\n    const config = parser.options.setoptions;\n    if (!config.filterPackage(parser, extension)) return;\n    for (const key of Object.keys(options)) {\n      if (config.filterOption(parser, extension, key)) {\n        (extension === 'tex' ? parser.options : parser.options[extension])[key] =\n          config.filterValue(parser, extension, key, options[key]);\n      }\n    }\n  }\n});\n\n/**\n * If the require package is available, save the original require,\n *   and define a macro that loads the extension and sets\n *   its options, if any.\n *\n * @param {ParserConfiguration} config  The current configuration.\n * @param {TeX} jax                     The active tex input jax.\n */\nfunction setoptionsConfig(_config: ParserConfiguration, jax: TeX<any, any, any>) {\n  const require = jax.parseOptions.handlers.get('macro').lookup('require') as any;\n  if (require) {\n    setOptionsMap.add('Require', new Macro('Require', require._func));\n    setOptionsMap.add('require', new Macro('require', BaseMethods.Macro,\n                                           ['\\\\Require{#2}\\\\setOptions[#2]{#1}', 2, '']));\n  }\n}\n\nexport const SetOptionsConfiguration = Configuration.create(\n  'setoptions', {\n    handler: {macro: ['setoptions']},\n    config: setoptionsConfig,\n    priority: 3,  // must be less than the priority of the require package (which is 5).\n    options: {\n      setoptions: {\n        filterPackage: SetOptionsUtil.filterPackage,  // filter for whether a package can be configured\n        filterOption: SetOptionsUtil.filterOption,    // filter for whether an option can be set\n        filterValue: SetOptionsUtil.filterValue,      // filter for the value to assign to an option\n        allowPackageDefault: true,       // default for allowing packages when not explicitly set in allowOptions\n        allowOptionsDefault: true,       // default for allowing option that isn't explicitly set in allowOptions\n        allowOptions: expandable({       // list of packages to allow/disallow, and their options to allow/disallow\n          //\n          //  top-level tex items can be set, but not these\n          //    (that leaves digits and the tagging options)\n          //\n          tex: {\n            FindTeX: false,\n            formatError: false,\n            package: false,\n            baseURL: false,\n            tags: false,\n            maxBuffer: false,\n            maxMaxros: false,\n            macros: false,\n            environments: false\n          },\n          //\n          // These packages can't be configured at all\n          //\n          setoptions: false,\n          autoload: false,\n          require: false,\n          configmacros: false,\n          tagformat: false\n        })\n      }\n    }\n  }\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}