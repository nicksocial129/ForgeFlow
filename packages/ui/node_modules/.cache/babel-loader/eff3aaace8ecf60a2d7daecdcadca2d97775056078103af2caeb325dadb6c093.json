{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractMathDocument = exports.resetAllOptions = exports.resetOptions = exports.RenderList = void 0;\nvar Options_js_1 = require(\"../util/Options.js\");\nvar InputJax_js_1 = require(\"./InputJax.js\");\nvar OutputJax_js_1 = require(\"./OutputJax.js\");\nvar MathList_js_1 = require(\"./MathList.js\");\nvar MathItem_js_1 = require(\"./MathItem.js\");\nvar MmlFactory_js_1 = require(\"../core/MmlTree/MmlFactory.js\");\nvar BitField_js_1 = require(\"../util/BitField.js\");\nvar PrioritizedList_js_1 = require(\"../util/PrioritizedList.js\");\nvar RenderList = function (_super) {\n  __extends(RenderList, _super);\n  function RenderList() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  RenderList.create = function (actions) {\n    var e_1, _a;\n    var list = new this();\n    try {\n      for (var _b = __values(Object.keys(actions)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var id = _c.value;\n        var _d = __read(this.action(id, actions[id]), 2),\n          action = _d[0],\n          priority = _d[1];\n        if (priority) {\n          list.add(action, priority);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return list;\n  };\n  RenderList.action = function (id, action) {\n    var _a, _b, _c, _d;\n    var renderDoc, renderMath;\n    var convert = true;\n    var priority = action[0];\n    if (action.length === 1 || typeof action[1] === 'boolean') {\n      action.length === 2 && (convert = action[1]);\n      _a = __read(this.methodActions(id), 2), renderDoc = _a[0], renderMath = _a[1];\n    } else if (typeof action[1] === 'string') {\n      if (typeof action[2] === 'string') {\n        action.length === 4 && (convert = action[3]);\n        var _e = __read(action.slice(1), 2),\n          method1 = _e[0],\n          method2 = _e[1];\n        _b = __read(this.methodActions(method1, method2), 2), renderDoc = _b[0], renderMath = _b[1];\n      } else {\n        action.length === 3 && (convert = action[2]);\n        _c = __read(this.methodActions(action[1]), 2), renderDoc = _c[0], renderMath = _c[1];\n      }\n    } else {\n      action.length === 4 && (convert = action[3]);\n      _d = __read(action.slice(1), 2), renderDoc = _d[0], renderMath = _d[1];\n    }\n    return [{\n      id: id,\n      renderDoc: renderDoc,\n      renderMath: renderMath,\n      convert: convert\n    }, priority];\n  };\n  RenderList.methodActions = function (method1, method2) {\n    if (method2 === void 0) {\n      method2 = method1;\n    }\n    return [function (document) {\n      method1 && document[method1]();\n      return false;\n    }, function (math, document) {\n      method2 && math[method2](document);\n      return false;\n    }];\n  };\n  RenderList.prototype.renderDoc = function (document, start) {\n    var e_2, _a;\n    if (start === void 0) {\n      start = MathItem_js_1.STATE.UNPROCESSED;\n    }\n    try {\n      for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var item = _c.value;\n        if (item.priority >= start) {\n          if (item.item.renderDoc(document)) return;\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n  RenderList.prototype.renderMath = function (math, document, start) {\n    var e_3, _a;\n    if (start === void 0) {\n      start = MathItem_js_1.STATE.UNPROCESSED;\n    }\n    try {\n      for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var item = _c.value;\n        if (item.priority >= start) {\n          if (item.item.renderMath(math, document)) return;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  RenderList.prototype.renderConvert = function (math, document, end) {\n    var e_4, _a;\n    if (end === void 0) {\n      end = MathItem_js_1.STATE.LAST;\n    }\n    try {\n      for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var item = _c.value;\n        if (item.priority > end) return;\n        if (item.item.convert) {\n          if (item.item.renderMath(math, document)) return;\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n  };\n  RenderList.prototype.findID = function (id) {\n    var e_5, _a;\n    try {\n      for (var _b = __values(this.items), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var item = _c.value;\n        if (item.item.id === id) {\n          return item.item;\n        }\n      }\n    } catch (e_5_1) {\n      e_5 = {\n        error: e_5_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_5) throw e_5.error;\n      }\n    }\n    return null;\n  };\n  return RenderList;\n}(PrioritizedList_js_1.PrioritizedList);\nexports.RenderList = RenderList;\nexports.resetOptions = {\n  all: false,\n  processed: false,\n  inputJax: null,\n  outputJax: null\n};\nexports.resetAllOptions = {\n  all: true,\n  processed: true,\n  inputJax: [],\n  outputJax: []\n};\nvar DefaultInputJax = function (_super) {\n  __extends(DefaultInputJax, _super);\n  function DefaultInputJax() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DefaultInputJax.prototype.compile = function (_math) {\n    return null;\n  };\n  return DefaultInputJax;\n}(InputJax_js_1.AbstractInputJax);\nvar DefaultOutputJax = function (_super) {\n  __extends(DefaultOutputJax, _super);\n  function DefaultOutputJax() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  DefaultOutputJax.prototype.typeset = function (_math, _document) {\n    if (_document === void 0) {\n      _document = null;\n    }\n    return null;\n  };\n  DefaultOutputJax.prototype.escaped = function (_math, _document) {\n    return null;\n  };\n  return DefaultOutputJax;\n}(OutputJax_js_1.AbstractOutputJax);\nvar DefaultMathList = function (_super) {\n  __extends(DefaultMathList, _super);\n  function DefaultMathList() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return DefaultMathList;\n}(MathList_js_1.AbstractMathList);\nvar DefaultMathItem = function (_super) {\n  __extends(DefaultMathItem, _super);\n  function DefaultMathItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return DefaultMathItem;\n}(MathItem_js_1.AbstractMathItem);\nvar AbstractMathDocument = function () {\n  function AbstractMathDocument(document, adaptor, options) {\n    var _this = this;\n    var CLASS = this.constructor;\n    this.document = document;\n    this.options = (0, Options_js_1.userOptions)((0, Options_js_1.defaultOptions)({}, CLASS.OPTIONS), options);\n    this.math = new (this.options['MathList'] || DefaultMathList)();\n    this.renderActions = RenderList.create(this.options['renderActions']);\n    this.processed = new AbstractMathDocument.ProcessBits();\n    this.outputJax = this.options['OutputJax'] || new DefaultOutputJax();\n    var inputJax = this.options['InputJax'] || [new DefaultInputJax()];\n    if (!Array.isArray(inputJax)) {\n      inputJax = [inputJax];\n    }\n    this.inputJax = inputJax;\n    this.adaptor = adaptor;\n    this.outputJax.setAdaptor(adaptor);\n    this.inputJax.map(function (jax) {\n      return jax.setAdaptor(adaptor);\n    });\n    this.mmlFactory = this.options['MmlFactory'] || new MmlFactory_js_1.MmlFactory();\n    this.inputJax.map(function (jax) {\n      return jax.setMmlFactory(_this.mmlFactory);\n    });\n    this.outputJax.initialize();\n    this.inputJax.map(function (jax) {\n      return jax.initialize();\n    });\n  }\n  Object.defineProperty(AbstractMathDocument.prototype, \"kind\", {\n    get: function () {\n      return this.constructor.KIND;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  AbstractMathDocument.prototype.addRenderAction = function (id) {\n    var action = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      action[_i - 1] = arguments[_i];\n    }\n    var _a = __read(RenderList.action(id, action), 2),\n      fn = _a[0],\n      p = _a[1];\n    this.renderActions.add(fn, p);\n  };\n  AbstractMathDocument.prototype.removeRenderAction = function (id) {\n    var action = this.renderActions.findID(id);\n    if (action) {\n      this.renderActions.remove(action);\n    }\n  };\n  AbstractMathDocument.prototype.render = function () {\n    this.renderActions.renderDoc(this);\n    return this;\n  };\n  AbstractMathDocument.prototype.rerender = function (start) {\n    if (start === void 0) {\n      start = MathItem_js_1.STATE.RERENDER;\n    }\n    this.state(start - 1);\n    this.render();\n    return this;\n  };\n  AbstractMathDocument.prototype.convert = function (math, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _a = (0, Options_js_1.userOptions)({\n        format: this.inputJax[0].name,\n        display: true,\n        end: MathItem_js_1.STATE.LAST,\n        em: 16,\n        ex: 8,\n        containerWidth: null,\n        lineWidth: 1000000,\n        scale: 1,\n        family: ''\n      }, options),\n      format = _a.format,\n      display = _a.display,\n      end = _a.end,\n      ex = _a.ex,\n      em = _a.em,\n      containerWidth = _a.containerWidth,\n      lineWidth = _a.lineWidth,\n      scale = _a.scale,\n      family = _a.family;\n    if (containerWidth === null) {\n      containerWidth = 80 * ex;\n    }\n    var jax = this.inputJax.reduce(function (jax, ijax) {\n      return ijax.name === format ? ijax : jax;\n    }, null);\n    var mitem = new this.options.MathItem(math, jax, display);\n    mitem.start.node = this.adaptor.body(this.document);\n    mitem.setMetrics(em, ex, containerWidth, lineWidth, scale);\n    if (this.outputJax.options.mtextInheritFont) {\n      mitem.outputData.mtextFamily = family;\n    }\n    if (this.outputJax.options.merrorInheritFont) {\n      mitem.outputData.merrorFamily = family;\n    }\n    mitem.convert(this, end);\n    return mitem.typesetRoot || mitem.root;\n  };\n  AbstractMathDocument.prototype.findMath = function (_options) {\n    if (_options === void 0) {\n      _options = null;\n    }\n    this.processed.set('findMath');\n    return this;\n  };\n  AbstractMathDocument.prototype.compile = function () {\n    var e_6, _a, e_7, _b;\n    if (!this.processed.isSet('compile')) {\n      var recompile = [];\n      try {\n        for (var _c = __values(this.math), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var math = _d.value;\n          this.compileMath(math);\n          if (math.inputData.recompile !== undefined) {\n            recompile.push(math);\n          }\n        }\n      } catch (e_6_1) {\n        e_6 = {\n          error: e_6_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_6) throw e_6.error;\n        }\n      }\n      try {\n        for (var recompile_1 = __values(recompile), recompile_1_1 = recompile_1.next(); !recompile_1_1.done; recompile_1_1 = recompile_1.next()) {\n          var math = recompile_1_1.value;\n          var data = math.inputData.recompile;\n          math.state(data.state);\n          math.inputData.recompile = data;\n          this.compileMath(math);\n        }\n      } catch (e_7_1) {\n        e_7 = {\n          error: e_7_1\n        };\n      } finally {\n        try {\n          if (recompile_1_1 && !recompile_1_1.done && (_b = recompile_1.return)) _b.call(recompile_1);\n        } finally {\n          if (e_7) throw e_7.error;\n        }\n      }\n      this.processed.set('compile');\n    }\n    return this;\n  };\n  AbstractMathDocument.prototype.compileMath = function (math) {\n    try {\n      math.compile(this);\n    } catch (err) {\n      if (err.retry || err.restart) {\n        throw err;\n      }\n      this.options['compileError'](this, math, err);\n      math.inputData['error'] = err;\n    }\n  };\n  AbstractMathDocument.prototype.compileError = function (math, err) {\n    math.root = this.mmlFactory.create('math', null, [this.mmlFactory.create('merror', {\n      'data-mjx-error': err.message,\n      title: err.message\n    }, [this.mmlFactory.create('mtext', null, [this.mmlFactory.create('text').setText('Math input error')])])]);\n    if (math.display) {\n      math.root.attributes.set('display', 'block');\n    }\n    math.inputData.error = err.message;\n  };\n  AbstractMathDocument.prototype.typeset = function () {\n    var e_8, _a;\n    if (!this.processed.isSet('typeset')) {\n      try {\n        for (var _b = __values(this.math), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var math = _c.value;\n          try {\n            math.typeset(this);\n          } catch (err) {\n            if (err.retry || err.restart) {\n              throw err;\n            }\n            this.options['typesetError'](this, math, err);\n            math.outputData['error'] = err;\n          }\n        }\n      } catch (e_8_1) {\n        e_8 = {\n          error: e_8_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_8) throw e_8.error;\n        }\n      }\n      this.processed.set('typeset');\n    }\n    return this;\n  };\n  AbstractMathDocument.prototype.typesetError = function (math, err) {\n    math.typesetRoot = this.adaptor.node('mjx-container', {\n      class: 'MathJax mjx-output-error',\n      jax: this.outputJax.name\n    }, [this.adaptor.node('span', {\n      'data-mjx-error': err.message,\n      title: err.message,\n      style: {\n        color: 'red',\n        'background-color': 'yellow',\n        'line-height': 'normal'\n      }\n    }, [this.adaptor.text('Math output error')])]);\n    if (math.display) {\n      this.adaptor.setAttributes(math.typesetRoot, {\n        style: {\n          display: 'block',\n          margin: '1em 0',\n          'text-align': 'center'\n        }\n      });\n    }\n    math.outputData.error = err.message;\n  };\n  AbstractMathDocument.prototype.getMetrics = function () {\n    if (!this.processed.isSet('getMetrics')) {\n      this.outputJax.getMetrics(this);\n      this.processed.set('getMetrics');\n    }\n    return this;\n  };\n  AbstractMathDocument.prototype.updateDocument = function () {\n    var e_9, _a;\n    if (!this.processed.isSet('updateDocument')) {\n      try {\n        for (var _b = __values(this.math.reversed()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var math = _c.value;\n          math.updateDocument(this);\n        }\n      } catch (e_9_1) {\n        e_9 = {\n          error: e_9_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_9) throw e_9.error;\n        }\n      }\n      this.processed.set('updateDocument');\n    }\n    return this;\n  };\n  AbstractMathDocument.prototype.removeFromDocument = function (_restore) {\n    if (_restore === void 0) {\n      _restore = false;\n    }\n    return this;\n  };\n  AbstractMathDocument.prototype.state = function (state, restore) {\n    var e_10, _a;\n    if (restore === void 0) {\n      restore = false;\n    }\n    try {\n      for (var _b = __values(this.math), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var math = _c.value;\n        math.state(state, restore);\n      }\n    } catch (e_10_1) {\n      e_10 = {\n        error: e_10_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_10) throw e_10.error;\n      }\n    }\n    if (state < MathItem_js_1.STATE.INSERTED) {\n      this.processed.clear('updateDocument');\n    }\n    if (state < MathItem_js_1.STATE.TYPESET) {\n      this.processed.clear('typeset');\n      this.processed.clear('getMetrics');\n    }\n    if (state < MathItem_js_1.STATE.COMPILED) {\n      this.processed.clear('compile');\n    }\n    return this;\n  };\n  AbstractMathDocument.prototype.reset = function (options) {\n    var _a;\n    if (options === void 0) {\n      options = {\n        processed: true\n      };\n    }\n    options = (0, Options_js_1.userOptions)(Object.assign({}, exports.resetOptions), options);\n    options.all && Object.assign(options, exports.resetAllOptions);\n    options.processed && this.processed.reset();\n    options.inputJax && this.inputJax.forEach(function (jax) {\n      return jax.reset.apply(jax, __spreadArray([], __read(options.inputJax), false));\n    });\n    options.outputJax && (_a = this.outputJax).reset.apply(_a, __spreadArray([], __read(options.outputJax), false));\n    return this;\n  };\n  AbstractMathDocument.prototype.clear = function () {\n    this.reset();\n    this.math.clear();\n    return this;\n  };\n  AbstractMathDocument.prototype.concat = function (list) {\n    this.math.merge(list);\n    return this;\n  };\n  AbstractMathDocument.prototype.clearMathItemsWithin = function (containers) {\n    var _a;\n    var items = this.getMathItemsWithin(containers);\n    (_a = this.math).remove.apply(_a, __spreadArray([], __read(items), false));\n    return items;\n  };\n  AbstractMathDocument.prototype.getMathItemsWithin = function (elements) {\n    var e_11, _a, e_12, _b;\n    if (!Array.isArray(elements)) {\n      elements = [elements];\n    }\n    var adaptor = this.adaptor;\n    var items = [];\n    var containers = adaptor.getElements(elements, this.document);\n    try {\n      ITEMS: for (var _c = __values(this.math), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var item = _d.value;\n        try {\n          for (var containers_1 = (e_12 = void 0, __values(containers)), containers_1_1 = containers_1.next(); !containers_1_1.done; containers_1_1 = containers_1.next()) {\n            var container = containers_1_1.value;\n            if (item.start.node && adaptor.contains(container, item.start.node)) {\n              items.push(item);\n              continue ITEMS;\n            }\n          }\n        } catch (e_12_1) {\n          e_12 = {\n            error: e_12_1\n          };\n        } finally {\n          try {\n            if (containers_1_1 && !containers_1_1.done && (_b = containers_1.return)) _b.call(containers_1);\n          } finally {\n            if (e_12) throw e_12.error;\n          }\n        }\n      }\n    } catch (e_11_1) {\n      e_11 = {\n        error: e_11_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_11) throw e_11.error;\n      }\n    }\n    return items;\n  };\n  AbstractMathDocument.KIND = 'MathDocument';\n  AbstractMathDocument.OPTIONS = {\n    OutputJax: null,\n    InputJax: null,\n    MmlFactory: null,\n    MathList: DefaultMathList,\n    MathItem: DefaultMathItem,\n    compileError: function (doc, math, err) {\n      doc.compileError(math, err);\n    },\n    typesetError: function (doc, math, err) {\n      doc.typesetError(math, err);\n    },\n    renderActions: (0, Options_js_1.expandable)({\n      find: [MathItem_js_1.STATE.FINDMATH, 'findMath', '', false],\n      compile: [MathItem_js_1.STATE.COMPILED],\n      metrics: [MathItem_js_1.STATE.METRICS, 'getMetrics', '', false],\n      typeset: [MathItem_js_1.STATE.TYPESET],\n      update: [MathItem_js_1.STATE.INSERTED, 'updateDocument', false]\n    })\n  };\n  AbstractMathDocument.ProcessBits = (0, BitField_js_1.BitFieldClass)('findMath', 'compile', 'getMetrics', 'typeset', 'updateDocument');\n  return AbstractMathDocument;\n}();\nexports.AbstractMathDocument = AbstractMathDocument;","map":{"version":3,"names":["Options_js_1","require","InputJax_js_1","OutputJax_js_1","MathList_js_1","MathItem_js_1","MmlFactory_js_1","BitField_js_1","PrioritizedList_js_1","RenderList","_super","__extends","create","actions","list","_b","__values","Object","keys","_c","next","done","id","value","_d","__read","action","priority","add","renderDoc","renderMath","convert","length","_a","methodActions","_e","slice","method1","method2","document","math","prototype","start","STATE","UNPROCESSED","items","item","renderConvert","end","LAST","findID","PrioritizedList","exports","resetOptions","all","processed","inputJax","outputJax","resetAllOptions","DefaultInputJax","compile","_math","AbstractInputJax","DefaultOutputJax","typeset","_document","escaped","AbstractOutputJax","DefaultMathList","AbstractMathList","DefaultMathItem","AbstractMathItem","AbstractMathDocument","adaptor","options","_this","CLASS","constructor","userOptions","defaultOptions","OPTIONS","renderActions","ProcessBits","Array","isArray","setAdaptor","map","jax","mmlFactory","MmlFactory","setMmlFactory","initialize","defineProperty","get","KIND","addRenderAction","_i","arguments","fn","p","removeRenderAction","remove","render","rerender","RERENDER","state","format","name","display","em","ex","containerWidth","lineWidth","scale","family","reduce","ijax","mitem","MathItem","node","body","setMetrics","mtextInheritFont","outputData","mtextFamily","merrorInheritFont","merrorFamily","typesetRoot","root","findMath","_options","set","isSet","recompile","compileMath","inputData","undefined","push","recompile_1","recompile_1_1","data","err","retry","restart","compileError","message","title","setText","attributes","error","typesetError","class","style","color","text","setAttributes","margin","getMetrics","updateDocument","reversed","removeFromDocument","_restore","restore","INSERTED","clear","TYPESET","COMPILED","reset","assign","forEach","apply","__spreadArray","concat","merge","clearMathItemsWithin","containers","getMathItemsWithin","elements","getElements","ITEMS","containers_1","e_12","containers_1_1","container","contains","OutputJax","InputJax","MathList","doc","expandable","find","FINDMATH","metrics","METRICS","update","BitFieldClass"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/core/MathDocument.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the interface and abstract class for MathDocument objects\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {userOptions, defaultOptions, OptionList, expandable} from '../util/Options.js';\nimport {InputJax, AbstractInputJax} from './InputJax.js';\nimport {OutputJax, AbstractOutputJax} from './OutputJax.js';\nimport {MathList, AbstractMathList} from './MathList.js';\nimport {MathItem, AbstractMathItem, STATE} from './MathItem.js';\nimport {MmlNode, TextNode} from './MmlTree/MmlNode.js';\nimport {MmlFactory} from '../core/MmlTree/MmlFactory.js';\nimport {DOMAdaptor} from '../core/DOMAdaptor.js';\nimport {BitField, BitFieldClass} from '../util/BitField.js';\n\nimport {PrioritizedList} from '../util/PrioritizedList.js';\n\n/*****************************************************************/\n\n/**\n * A function to call while rendering a document (usually calls a MathDocument method)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type RenderDoc<N, T, D> = (document: MathDocument<N, T, D>) => boolean;\n\n/**\n * A function to call while rendering a MathItem (usually calls one of its methods)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type RenderMath<N, T, D> = (math: MathItem<N, T, D>, document: MathDocument<N, T, D>) => boolean;\n\n/**\n * The data for an action to perform during rendering or conversion\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type RenderData<N, T, D> = {\n  id: string,                           //  The name for the action\n  renderDoc: RenderDoc<N, T, D>,        //  The action to take during a render() call\n  renderMath: RenderMath<N, T, D>,      //  The action to take during a rerender() or convert() call\n  convert: boolean                      //  Whether the action is to be used during convert()\n};\n\n/**\n * The data used to define a render action in configurations and options objects\n *   (the key is used as the id, the number in the data below is the priority, and\n *    the remainind data is as described below; if no boolean is given, convert = true\n *    by default)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type RenderAction<N, T, D> =\n  [number] |                                                     // id (i.e., key) is method name to use\n  [number, string] |                                             // string is method to call\n  [number, string, string] |                                     // the strings are methods names for doc and math\n  [number, RenderDoc<N, T, D>, RenderMath<N, T, D>] |            // explicit functions for doc and math\n  [number, boolean] |                                            // same as first above, with boolean for convert\n  [number, string, boolean] |                                    // same as second above, with boolean for convert\n  [number, string, string, boolean] |                            // same as third above, with boolean for convert\n  [number, RenderDoc<N, T, D>, RenderMath<N, T, D>, boolean];    // same as forth above, with boolean for convert\n\n/**\n * An object representing a collection of rendering actions (id's tied to priority-and-method data)\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport type RenderActions<N, T, D> = {[id: string]: RenderAction<N, T, D>};\n\n/**\n * Implements a prioritized list of render actions.  Extensions can add actions to the list\n *   to make it easy to extend the normal typesetting and conversion operations.\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport class RenderList<N, T, D> extends PrioritizedList<RenderData<N, T, D>> {\n\n  /**\n   * Creates a new RenderList from an initial list of rendering actions\n   *\n   * @param {RenderActions} actions The list of actions to take during render(), rerender(), and convert() calls\n   * @returns {RenderList}    The newly created prioritied list\n   */\n  public static create<N, T, D>(actions: RenderActions<N, T, D>): RenderList<N, T, D> {\n    const list = new this<N, T, D>();\n    for (const id of Object.keys(actions)) {\n      const [action, priority] = this.action<N, T, D>(id, actions[id]);\n      if (priority) {\n        list.add(action, priority);\n      }\n    }\n    return list;\n  }\n\n  /**\n   * Parses a RenderAction to produce the correspinding RenderData item\n   *  (e.g., turn method names into actual functions that call the method)\n   *\n   * @param {string} id               The id of the action\n   * @param {RenderAction} action     The RenderAction defining the action\n   * @returns {[RenderData,number]}   The corresponding RenderData definition for the action and its priority\n   */\n  public static action<N, T, D>(id: string, action: RenderAction<N, T, D>): [RenderData<N, T, D>, number] {\n    let renderDoc, renderMath;\n    let convert = true;\n    let priority = action[0];\n    if (action.length === 1 || typeof action[1] === 'boolean') {\n      action.length === 2 && (convert = action[1] as boolean);\n      [renderDoc, renderMath] = this.methodActions(id);\n    } else if (typeof action[1] === 'string') {\n      if (typeof action[2] === 'string') {\n        action.length === 4 && (convert = action[3] as boolean);\n        const [method1, method2] = action.slice(1) as [string, string];\n        [renderDoc, renderMath] = this.methodActions(method1, method2);\n      } else {\n        action.length === 3 && (convert = action[2] as boolean);\n        [renderDoc, renderMath] = this.methodActions(action[1] as string);\n      }\n    } else {\n      action.length === 4 && (convert = action[3] as boolean);\n      [renderDoc, renderMath] = action.slice(1) as [RenderDoc<N, T, D>, RenderMath<N, T, D>];\n    }\n    return [{id, renderDoc, renderMath, convert} as RenderData<N, T, D>, priority];\n  }\n\n  /**\n   * Produces the doc and math actions for the given method name(s)\n   *   (a blank name is a no-op)\n   *\n   * @param {string} method1    The method to use for the render() call\n   * @param {string} method1    The method to use for the rerender() and convert() calls\n   */\n  protected static methodActions(method1: string, method2: string = method1) {\n    return [\n      (document: any) => {method1 && document[method1](); return false; },\n      (math: any, document: any) => {method2 && math[method2](document); return false; }\n    ];\n  }\n\n  /**\n   * Perform the document-level rendering functions\n   *\n   * @param {MathDocument} document   The MathDocument whose methods are to be called\n   * @param {number=} start           The state at which to start rendering (default is UNPROCESSED)\n   */\n  public renderDoc(document: MathDocument<N, T, D>, start: number = STATE.UNPROCESSED) {\n    for (const item of this.items) {\n      if (item.priority >= start) {\n        if (item.item.renderDoc(document)) return;\n      }\n    }\n  }\n\n  /**\n   * Perform the MathItem-level rendering functions\n   *\n   * @param {MathItem} math           The MathItem whose methods are to be called\n   * @param {MathDocument} document   The MathDocument to pass to the MathItem methods\n   * @param {number=} start           The state at which to start rendering (default is UNPROCESSED)\n   */\n  public renderMath(math: MathItem<N, T, D>, document: MathDocument<N, T, D>, start: number = STATE.UNPROCESSED) {\n    for (const item of this.items) {\n      if (item.priority >= start) {\n        if (item.item.renderMath(math, document)) return;\n      }\n    }\n  }\n\n  /**\n   * Perform the MathItem-level conversion functions\n   *\n   * @param {MathItem} math           The MathItem whose methods are to be called\n   * @param {MathDocument} document   The MathDocument to pass to the MathItem methods\n   * @param {number=} end             The state at which to end rendering (default is LAST)\n   */\n  public renderConvert(math: MathItem<N, T, D>, document: MathDocument<N, T, D>, end: number = STATE.LAST) {\n    for (const item of this.items) {\n      if (item.priority > end) return;\n      if (item.item.convert) {\n        if (item.item.renderMath(math, document)) return;\n      }\n    }\n  }\n\n  /**\n   * Find an entry in the list with a given ID\n   *\n   * @param {string} id            The id to search for\n   * @returns {RenderData|null}   The data for the given id, if found, or null\n   */\n  public findID(id: string): RenderData<N, T, D> | null {\n    for (const item of this.items) {\n      if (item.item.id === id) {\n        return item.item;\n      }\n    }\n    return null;\n  }\n\n}\n\n/*****************************************************************/\n\n/**\n * The ways of specifying a container (a selector string, an actual node,\n * or an array of those (e.g., the result of document.getElementsByTagName())\n *\n * @template N  The HTMLElement node class\n */\nexport type ContainerList<N> = string | N | (string | N | N[])[];\n\n/**\n * The options allowed for the reset() method\n */\nexport type ResetList = {\n  all?: boolean,\n  processed?: boolean,\n  inputJax?: any[],\n  outputJax?: any[]\n};\n\n/**\n * The default option list for the reset() method\n */\nexport const resetOptions: ResetList = {\n  all: false,\n  processed: false,\n  inputJax: null,\n  outputJax: null\n};\n\n/**\n * The option list for when all options are to be reset\n */\nexport const resetAllOptions: ResetList = {\n  all: true,\n  processed: true,\n  inputJax: [],\n  outputJax: []\n};\n\n/*****************************************************************/\n/**\n *  The MathDocument interface\n *\n *  The MathDocument is created by MathJax.Document() and holds the\n *  document, the math found in it, and so on.  The methods of the\n *  MathDocument all return the MathDocument itself, so you can\n *  chain the method calls.  E.g.,\n *\n *    const html = MathJax.Document('<html>...</html>');\n *    html.findMath()\n *        .compile()\n *        .getMetrics()\n *        .typeset()\n *        .updateDocument();\n *\n *  The MathDocument is the main interface for page authors to\n *  interact with MathJax.\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport interface MathDocument<N, T, D> {\n  /**\n   * The document being processed (e.g., DOM document, or Markdown string)\n   */\n  document: D;\n\n  /**\n   * The kind of MathDocument (e.g., \"HTML\")\n   */\n  kind: string;\n\n  /**\n   * The options for the document\n   */\n  options: OptionList;\n\n  /**\n   * The list of MathItems found in this page\n   */\n  math: MathList<N, T, D>;\n\n  /**\n   * The list of actions to take during a render() or convert() call\n   */\n  renderActions: RenderList<N, T, D>;\n\n  /**\n   * This object tracks what operations have been performed, so that (when\n   *  asynchronous operations are used), the ones that have already been\n   *  completed won't be performed again.\n   */\n  processed: BitField;\n\n  /**\n   * An array of input jax to run on the document\n   */\n  inputJax: InputJax<N, T, D>[];\n\n  /**\n   * The output jax to use for the document\n   */\n  outputJax: OutputJax<N, T, D>;\n\n  /**\n   * The DOM adaptor to use for input and output\n   */\n  adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * The MmlFactory to be used for input jax and error processing\n   */\n  mmlFactory: MmlFactory;\n\n  /**\n   * @param {string} id      The id of the action to add\n   * @param {any[]} action   The RenderAction to take\n   */\n  addRenderAction(id: string, ...action: any[]): void;\n\n  /**\n   * @param {string} id   The id of the action to remove\n   */\n  removeRenderAction(id: string): void;\n\n  /**\n   * Perform the renderActions on the document\n   */\n  render(): MathDocument<N, T, D>;\n\n  /**\n   * Rerender the MathItems on the page\n   *\n   * @param {number=} start    The state to start rerendering at\n   * @return {MathDocument}    The math document instance\n   */\n  rerender(start?: number): MathDocument<N, T, D>;\n\n  /**\n   * Convert a math string to the document's output format\n   *\n   * @param {string} math           The math string to convert\n   * @params {OptionList} options   The options for the conversion (e.g., format, ex, em, etc.)\n   * @return {MmlNode|N}            The MmlNode or N node for the converted content\n   */\n  convert(math: string, options?: OptionList): MmlNode | N;\n\n  /**\n   * Locates the math in the document and constructs the MathList\n   *  for the document.\n   *\n   * @param {OptionList} options  The options for locating the math\n   * @return {MathDocument}       The math document instance\n   */\n  findMath(options?: OptionList): MathDocument<N, T, D>;\n\n  /**\n   * Calls the input jax to process the MathItems in the MathList\n   *\n   * @return {MathDocument}  The math document instance\n   */\n  compile(): MathDocument<N, T, D>;\n\n  /**\n   * Gets the metric information for the MathItems\n   *\n   * @return {MathDocument}  The math document instance\n   */\n  getMetrics(): MathDocument<N, T, D>;\n\n  /**\n   * Calls the output jax to process the compiled math in the MathList\n   *\n   * @return {MathDocument}  The math document instance\n   */\n  typeset(): MathDocument<N, T, D>;\n\n  /**\n   * Updates the document to include the typeset math\n   *\n   * @return {MathDocument}  The math document instance\n   */\n  updateDocument(): MathDocument<N, T, D>;\n\n  /**\n   * Removes the typeset math from the document\n   *\n   * @param {boolean} restore  True if the original math should be put\n   *                            back into the document as well\n   * @return {MathDocument}    The math document instance\n   */\n  removeFromDocument(restore?: boolean): MathDocument<N, T, D>;\n\n  /**\n   * Set the state of the document (allowing you to roll back\n   *  the state to a previous one, if needed).\n   *\n   * @param {number} state     The new state of the document\n   * @param {boolean} restore  True if the original math should be put\n   *                            back into the document during the rollback\n   * @return {MathDocument}    The math document instance\n   */\n  state(state: number, restore?: boolean): MathDocument<N, T, D>;\n\n  /**\n   * Clear the processed values so that the document can be reprocessed\n   *\n   * @param {ResetList} options   The things to be reset\n   * @return {MathDocument}       The math document instance\n   */\n  reset(options?: ResetList): MathDocument<N, T, D>;\n\n  /**\n   * Reset the processed values and clear the MathList (so that new math\n   * can be processed in the document).\n   *\n   * @return {MathDocument}  The math document instance\n   */\n  clear(): MathDocument<N, T, D>;\n\n  /**\n   * Merges a MathList into the list for this document.\n   *\n   * @param {MathList} list   The MathList to be merged into this document's list\n   * @return {MathDocument}   The math document instance\n   */\n  concat(list: MathList<N, T, D>): MathDocument<N, T, D>;\n\n  /**\n   * Clear the typeset MathItems that are within the given container\n   *   from the document's MathList.  (E.g., when the content of the\n   *   container has been updated and you want to remove the\n   *   associated MathItems)\n   *\n   * @param {ContainerList<N>} elements   The container DOM elements whose math items are to be removed\n   * @return {MathItem<N,T,D>[]}          The removed MathItems\n   */\n  clearMathItemsWithin(containers: ContainerList<N>): MathItem<N, T, D>[];\n\n  /**\n   * Get the typeset MathItems that are within a given container.\n   *\n   * @param {ContainerList<N>} elements   The container DOM elements whose math items are to be found\n   * @return {MathItem<N,T,D>[]}          The list of MathItems within that container\n   */\n  getMathItemsWithin(elements: ContainerList<N>): MathItem<N, T, D>[];\n\n}\n\n/*****************************************************************/\n\n/**\n * Defaults used when input jax isn't specified\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nclass DefaultInputJax<N, T, D> extends AbstractInputJax<N, T, D> {\n  /**\n   * @override\n   */\n  public compile(_math: MathItem<N, T, D>) {\n    return null as MmlNode;\n  }\n}\n\n/**\n * Defaults used when ouput jax isn't specified\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nclass DefaultOutputJax<N, T, D> extends AbstractOutputJax<N, T, D> {\n  /**\n   * @override\n   */\n  public typeset(_math: MathItem<N, T, D>, _document: MathDocument<N, T, D> = null) {\n    return null as N;\n  }\n  /**\n   * @override\n   */\n  public escaped(_math: MathItem<N, T, D>, _document?: MathDocument<N, T, D>) {\n    return null as N;\n  }\n}\n\n/**\n * Default for the MathList when one isn't specified\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nclass DefaultMathList<N, T, D> extends AbstractMathList<N, T, D> {}\n\n/**\n * Default for the Mathitem when one isn't specified\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nclass DefaultMathItem<N, T, D> extends AbstractMathItem<N, T, D> {}\n\n/*****************************************************************/\n/**\n *  Implements the abstract MathDocument class\n *\n * @template N  The HTMLElement node class\n * @template T  The Text node class\n * @template D  The Document class\n */\nexport abstract class AbstractMathDocument<N, T, D> implements MathDocument<N, T, D> {\n\n  /**\n   * The type of MathDocument\n   */\n  public static KIND: string = 'MathDocument';\n\n  /**\n   * The default options for the document\n   */\n  public static OPTIONS: OptionList = {\n    OutputJax: null,           // instance of an OutputJax for the document\n    InputJax: null,            // instance of an InputJax or an array of them\n    MmlFactory: null,          // instance of a MmlFactory for this document\n    MathList: DefaultMathList, // constructor for a MathList to use for the document\n    MathItem: DefaultMathItem, // constructor for a MathItem to use for the MathList\n    compileError: (doc: AbstractMathDocument<any, any, any>, math: MathItem<any, any, any>, err: Error) => {\n      doc.compileError(math, err);\n    },\n    typesetError: (doc: AbstractMathDocument<any, any, any>, math: MathItem<any, any, any>, err: Error) => {\n      doc.typesetError(math, err);\n    },\n    renderActions: expandable({\n      find:    [STATE.FINDMATH, 'findMath', '', false],\n      compile: [STATE.COMPILED],\n      metrics: [STATE.METRICS, 'getMetrics', '', false],\n      typeset: [STATE.TYPESET],\n      update:  [STATE.INSERTED, 'updateDocument', false]\n    }) as RenderActions<any, any, any>\n  };\n\n  /**\n   * A bit-field for the actions that have been processed\n   */\n  public static ProcessBits = BitFieldClass('findMath', 'compile', 'getMetrics', 'typeset', 'updateDocument');\n\n  /**\n   * The document managed by this MathDocument\n   */\n  public document: D;\n  /**\n   * The actual options for this document (with user-supplied ones merged in)\n   */\n  public options: OptionList;\n\n  /**\n   * The list of MathItems for this document\n   */\n  public math: MathList<N, T, D>;\n\n  /**\n   * The list of render actions\n   */\n  public renderActions: RenderList<N, T, D>;\n\n  /**\n   * The bit-field used to tell what steps have been taken on the document (for retries)\n   */\n  public processed: BitField;\n\n  /**\n   * The list of input jax for the document\n   */\n  public inputJax: InputJax<N, T, D>[];\n\n  /**\n   * The output jax for the document\n   */\n  public outputJax: OutputJax<N, T, D>;\n\n  /**\n   * The DOM adaptor for the document\n   */\n  public adaptor: DOMAdaptor<N, T, D>;\n\n  /**\n   * The MathML node factory for the internal MathML representation\n   */\n  public mmlFactory: MmlFactory;\n\n\n  /**\n   * @param {any} document           The document (HTML string, parsed DOM, etc.) to be processed\n   * @param {DOMAdaptor} adaptor     The DOM adaptor for this document\n   * @param {OptionList} options     The options for this document\n   * @constructor\n   */\n  constructor (document: D, adaptor: DOMAdaptor<N, T, D>, options: OptionList) {\n    let CLASS = this.constructor as typeof AbstractMathDocument;\n    this.document = document;\n    this.options = userOptions(defaultOptions({}, CLASS.OPTIONS), options);\n    this.math = new (this.options['MathList'] || DefaultMathList)();\n    this.renderActions = RenderList.create<N, T, D>(this.options['renderActions']);\n    this.processed = new AbstractMathDocument.ProcessBits();\n    this.outputJax = this.options['OutputJax'] || new DefaultOutputJax<N, T, D>();\n    let inputJax = this.options['InputJax'] || [new DefaultInputJax<N, T, D>()];\n    if (!Array.isArray(inputJax)) {\n      inputJax = [inputJax];\n    }\n    this.inputJax = inputJax;\n    //\n    // Pass the DOM adaptor to the jax\n    //\n    this.adaptor = adaptor;\n    this.outputJax.setAdaptor(adaptor);\n    this.inputJax.map(jax => jax.setAdaptor(adaptor));\n    //\n    // Pass the MmlFactory to the jax\n    //\n    this.mmlFactory = this.options['MmlFactory'] || new MmlFactory();\n    this.inputJax.map(jax => jax.setMmlFactory(this.mmlFactory));\n    //\n    // Do any initialization that requires adaptors or factories\n    //\n    this.outputJax.initialize();\n    this.inputJax.map(jax => jax.initialize());\n  }\n\n  /**\n   * @return {string}  The kind of document\n   */\n  public get kind(): string {\n    return (this.constructor as typeof AbstractMathDocument).KIND;\n  }\n\n  /**\n   * @override\n   */\n  public addRenderAction(id: string, ...action: any[]) {\n    const [fn, p] = RenderList.action<N, T, D>(id, action as RenderAction<N, T, D>);\n    this.renderActions.add(fn, p);\n  }\n\n  /**\n   * @override\n   */\n  public removeRenderAction(id: string) {\n    const action = this.renderActions.findID(id);\n    if (action) {\n      this.renderActions.remove(action);\n    }\n  }\n\n  /**\n   * @override\n   */\n  public render() {\n    this.renderActions.renderDoc(this);\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public rerender(start: number = STATE.RERENDER) {\n    this.state(start - 1);\n    this.render();\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public convert(math: string, options: OptionList = {}) {\n    let {format, display, end, ex, em, containerWidth, lineWidth, scale, family} = userOptions({\n      format: this.inputJax[0].name, display: true, end: STATE.LAST,\n      em: 16, ex: 8, containerWidth: null, lineWidth: 1000000, scale: 1, family: ''\n    }, options);\n    if (containerWidth === null) {\n      containerWidth = 80 * ex;\n    }\n    const jax = this.inputJax.reduce((jax, ijax) => (ijax.name === format ? ijax : jax), null);\n    const mitem = new this.options.MathItem(math, jax, display);\n    mitem.start.node = this.adaptor.body(this.document);\n    mitem.setMetrics(em, ex, containerWidth, lineWidth, scale);\n    if (this.outputJax.options.mtextInheritFont) {\n      mitem.outputData.mtextFamily = family;\n    }\n    if (this.outputJax.options.merrorInheritFont) {\n      mitem.outputData.merrorFamily = family;\n    }\n    mitem.convert(this, end);\n    return (mitem.typesetRoot || mitem.root);\n  }\n\n  /**\n   * @override\n   */\n  public findMath(_options: OptionList = null) {\n    this.processed.set('findMath');\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public compile() {\n    if (!this.processed.isSet('compile')) {\n      //\n      //  Compile all the math in the list\n      //\n      const recompile = [];\n      for (const math of this.math) {\n        this.compileMath(math);\n        if (math.inputData.recompile !== undefined) {\n          recompile.push(math);\n        }\n      }\n      //\n      //  If any were added to the recompile list,\n      //    compile them again\n      //\n      for (const math of recompile) {\n        const data = math.inputData.recompile;\n        math.state(data.state);\n        math.inputData.recompile = data;\n        this.compileMath(math);\n      }\n      this.processed.set('compile');\n    }\n    return this;\n  }\n\n  /**\n   * @param {MathItem} math   The item to compile\n   */\n  protected compileMath(math: MathItem<N, T, D>) {\n    try {\n      math.compile(this);\n    } catch (err) {\n      if (err.retry || err.restart) {\n        throw err;\n      }\n      this.options['compileError'](this, math, err);\n      math.inputData['error'] = err;\n    }\n  }\n\n  /**\n   * Produce an error using MmlNodes\n   *\n   * @param {MathItem} math  The MathItem producing the error\n   * @param {Error} err      The Error object for the error\n   */\n  public compileError(math: MathItem<N, T, D>, err: Error) {\n    math.root = this.mmlFactory.create('math', null, [\n      this.mmlFactory.create('merror', {'data-mjx-error': err.message, title: err.message}, [\n        this.mmlFactory.create('mtext', null, [\n          (this.mmlFactory.create('text') as TextNode).setText('Math input error')\n        ])\n      ])\n    ]);\n    if (math.display) {\n      math.root.attributes.set('display', 'block');\n    }\n    math.inputData.error = err.message;\n  }\n\n  /**\n   * @override\n   */\n  public typeset() {\n    if (!this.processed.isSet('typeset')) {\n      for (const math of this.math) {\n        try {\n          math.typeset(this);\n        } catch (err) {\n          if (err.retry || err.restart) {\n            throw err;\n          }\n          this.options['typesetError'](this, math, err);\n          math.outputData['error'] = err;\n        }\n      }\n      this.processed.set('typeset');\n    }\n    return this;\n  }\n\n  /**\n   * Produce an error using HTML\n   *\n   * @param {MathItem} math  The MathItem producing the error\n   * @param {Error} err      The Error object for the error\n   */\n  public typesetError(math: MathItem<N, T, D>, err: Error) {\n    math.typesetRoot = this.adaptor.node('mjx-container', {\n      class: 'MathJax mjx-output-error',\n      jax: this.outputJax.name,\n    }, [\n      this.adaptor.node('span', {\n        'data-mjx-error': err.message,\n        title: err.message,\n        style: {\n          color: 'red',\n          'background-color': 'yellow',\n          'line-height': 'normal'\n        }\n      }, [\n        this.adaptor.text('Math output error')\n      ])\n    ]);\n    if (math.display) {\n      this.adaptor.setAttributes(math.typesetRoot, {\n        style: {\n          display: 'block',\n          margin: '1em 0',\n          'text-align': 'center'\n        }\n      });\n    }\n    math.outputData.error = err.message;\n  }\n\n  /**\n   * @override\n   */\n  public getMetrics() {\n    if (!this.processed.isSet('getMetrics')) {\n      this.outputJax.getMetrics(this);\n      this.processed.set('getMetrics');\n    }\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public updateDocument() {\n    if (!this.processed.isSet('updateDocument')) {\n      for (const math of this.math.reversed()) {\n        math.updateDocument(this);\n      }\n      this.processed.set('updateDocument');\n    }\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public removeFromDocument(_restore: boolean = false) {\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public state(state: number, restore: boolean = false) {\n    for (const math of this.math) {\n      math.state(state, restore);\n    }\n    if (state < STATE.INSERTED) {\n      this.processed.clear('updateDocument');\n    }\n    if (state < STATE.TYPESET) {\n      this.processed.clear('typeset');\n      this.processed.clear('getMetrics');\n    }\n    if (state < STATE.COMPILED) {\n      this.processed.clear('compile');\n    }\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public reset(options: ResetList = {processed: true}) {\n    options = userOptions(Object.assign({}, resetOptions), options);\n    options.all && Object.assign(options, resetAllOptions);\n    options.processed && this.processed.reset();\n    options.inputJax && this.inputJax.forEach(jax => jax.reset(...options.inputJax));\n    options.outputJax && this.outputJax.reset(...options.outputJax);\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public clear() {\n    this.reset();\n    this.math.clear();\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public concat(list: MathList<N, T, D>) {\n    this.math.merge(list);\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  public clearMathItemsWithin(containers: ContainerList<N>) {\n    const items = this.getMathItemsWithin(containers);\n    this.math.remove(...items);\n    return items;\n  }\n\n  /**\n   * @override\n   */\n  public getMathItemsWithin(elements: ContainerList<N>) {\n    if (!Array.isArray(elements)) {\n      elements = [elements];\n    }\n    const adaptor = this.adaptor;\n    const items = [] as MathItem<N, T, D>[];\n    const containers = adaptor.getElements(elements, this.document);\n    ITEMS:\n    for (const item of this.math) {\n      for (const container of containers) {\n        if (item.start.node && adaptor.contains(container, item.start.node)) {\n          items.push(item);\n          continue ITEMS;\n        }\n      }\n    }\n    return items;\n  }\n\n}\n\n/**\n * The constructor type for a MathDocument\n *\n * @template D    The MathDocument type this constructor is for\n */\nexport interface MathDocumentConstructor<D extends MathDocument<any, any, any>> {\n  KIND: string;\n  OPTIONS: OptionList;\n  ProcessBits: typeof BitField;\n  new (...args: any[]): D;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}