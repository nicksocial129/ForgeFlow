{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.px = exports.emRounded = exports.em = exports.percent = exports.length2em = exports.MATHSPACE = exports.RELUNITS = exports.UNITS = exports.BIGDIMEN = void 0;\nexports.BIGDIMEN = 1000000;\nexports.UNITS = {\n  px: 1,\n  'in': 96,\n  cm: 96 / 2.54,\n  mm: 96 / 25.4\n};\nexports.RELUNITS = {\n  em: 1,\n  ex: .431,\n  pt: 1 / 10,\n  pc: 12 / 10,\n  mu: 1 / 18\n};\nexports.MATHSPACE = {\n  veryverythinmathspace: 1 / 18,\n  verythinmathspace: 2 / 18,\n  thinmathspace: 3 / 18,\n  mediummathspace: 4 / 18,\n  thickmathspace: 5 / 18,\n  verythickmathspace: 6 / 18,\n  veryverythickmathspace: 7 / 18,\n  negativeveryverythinmathspace: -1 / 18,\n  negativeverythinmathspace: -2 / 18,\n  negativethinmathspace: -3 / 18,\n  negativemediummathspace: -4 / 18,\n  negativethickmathspace: -5 / 18,\n  negativeverythickmathspace: -6 / 18,\n  negativeveryverythickmathspace: -7 / 18,\n  thin: .04,\n  medium: .06,\n  thick: .1,\n  normal: 1,\n  big: 2,\n  small: 1 / Math.sqrt(2),\n  infinity: exports.BIGDIMEN\n};\nfunction length2em(length, size, scale, em) {\n  if (size === void 0) {\n    size = 0;\n  }\n  if (scale === void 0) {\n    scale = 1;\n  }\n  if (em === void 0) {\n    em = 16;\n  }\n  if (typeof length !== 'string') {\n    length = String(length);\n  }\n  if (length === '' || length == null) {\n    return size;\n  }\n  if (exports.MATHSPACE[length]) {\n    return exports.MATHSPACE[length];\n  }\n  var match = length.match(/^\\s*([-+]?(?:\\.\\d+|\\d+(?:\\.\\d*)?))?(pt|em|ex|mu|px|pc|in|mm|cm|%)?/);\n  if (!match) {\n    return size;\n  }\n  var m = parseFloat(match[1] || '1'),\n    unit = match[2];\n  if (exports.UNITS.hasOwnProperty(unit)) {\n    return m * exports.UNITS[unit] / em / scale;\n  }\n  if (exports.RELUNITS.hasOwnProperty(unit)) {\n    return m * exports.RELUNITS[unit];\n  }\n  if (unit === '%') {\n    return m / 100 * size;\n  }\n  return m * size;\n}\nexports.length2em = length2em;\nfunction percent(m) {\n  return (100 * m).toFixed(1).replace(/\\.?0+$/, '') + '%';\n}\nexports.percent = percent;\nfunction em(m) {\n  if (Math.abs(m) < .001) return '0';\n  return m.toFixed(3).replace(/\\.?0+$/, '') + 'em';\n}\nexports.em = em;\nfunction emRounded(m, em) {\n  if (em === void 0) {\n    em = 16;\n  }\n  m = (Math.round(m * em) + .05) / em;\n  if (Math.abs(m) < .001) return '0em';\n  return m.toFixed(3).replace(/\\.?0+$/, '') + 'em';\n}\nexports.emRounded = emRounded;\nfunction px(m, M, em) {\n  if (M === void 0) {\n    M = -exports.BIGDIMEN;\n  }\n  if (em === void 0) {\n    em = 16;\n  }\n  m *= em;\n  if (M && m < M) m = M;\n  if (Math.abs(m) < .1) return '0';\n  return m.toFixed(1).replace(/\\.0$/, '') + 'px';\n}\nexports.px = px;","map":{"version":3,"names":["exports","BIGDIMEN","UNITS","px","cm","mm","RELUNITS","em","ex","pt","pc","mu","MATHSPACE","veryverythinmathspace","verythinmathspace","thinmathspace","mediummathspace","thickmathspace","verythickmathspace","veryverythickmathspace","negativeveryverythinmathspace","negativeverythinmathspace","negativethinmathspace","negativemediummathspace","negativethickmathspace","negativeverythickmathspace","negativeveryverythickmathspace","thin","medium","thick","normal","big","small","Math","sqrt","infinity","length2em","length","size","scale","String","match","m","parseFloat","unit","hasOwnProperty","percent","toFixed","replace","abs","emRounded","round","M"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/util/lengths.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Utility functions for handling dimensions (lengths)\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n/**\n *  A very large number\n */\nexport const BIGDIMEN = 1000000;\n\n/**\n *  Sizes of various units in pixels\n */\nexport const UNITS: {[unit: string]: number} = {\n  px: 1,\n  'in': 96,            // 96 px to an inch\n  cm: 96 / 2.54,       // 2.54 cm to an inch\n  mm: 96 / 25.4        // 10 mm to a cm\n};\n\n/**\n *  Sizes of various relative units in em's\n */\nexport const RELUNITS: {[unit: string]: number} = {\n  em: 1,\n  ex: .431,        // this.TEX.x_height;\n  pt: 1 / 10,      // 10 pt to an em\n  pc: 12 / 10,     // 12 pc to a pt\n  mu: 1 / 18       // 18mu to an em for the scriptlevel\n};\n\n/**\n *  The various named spaces\n */\nexport const MATHSPACE: {[name: string]: number} = {\n  /* tslint:disable:whitespace */\n  veryverythinmathspace:           1/18,\n  verythinmathspace:               2/18,\n  thinmathspace:                   3/18,\n  mediummathspace:                 4/18,\n  thickmathspace:                  5/18,\n  verythickmathspace:              6/18,\n  veryverythickmathspace:          7/18,\n  negativeveryverythinmathspace:  -1/18,\n  negativeverythinmathspace:      -2/18,\n  negativethinmathspace:          -3/18,\n  negativemediummathspace:        -4/18,\n  negativethickmathspace:         -5/18,\n  negativeverythickmathspace:     -6/18,\n  negativeveryverythickmathspace: -7/18,\n  /* tslint:enable */\n\n  thin:   .04,\n  medium: .06,\n  thick:  .1,\n\n  normal:  1,\n  big:     2,\n  small:   1 / Math.sqrt(2),\n\n  infinity:  BIGDIMEN\n};\n\n\n/**\n * @param {string|number} length  A dimension (giving number and units) to be converted to ems\n * @param {number} size           The default size of the dimension (for percentage values)\n * @param {number} scale          The current scaling factor (to handle absolute units)\n * @param {number} em             The size of an em in pixels\n * @return {number}               The dimension converted to ems\n */\nexport function length2em(length: string | number, size: number = 0, scale: number = 1, em: number = 16): number {\n  if (typeof length !== 'string') {\n    length = String(length);\n  }\n  if (length === '' || length == null) {\n    return size;\n  }\n  if (MATHSPACE[length]) {\n    return MATHSPACE[length];\n  }\n  let match = length.match(/^\\s*([-+]?(?:\\.\\d+|\\d+(?:\\.\\d*)?))?(pt|em|ex|mu|px|pc|in|mm|cm|%)?/);\n  if (!match) {\n    return size;\n  }\n  let m = parseFloat(match[1] || '1'), unit = match[2];\n  if (UNITS.hasOwnProperty(unit)) {\n    return m * UNITS[unit] / em / scale;\n  }\n  if (RELUNITS.hasOwnProperty(unit)) {\n    return m * RELUNITS[unit];\n  }\n  if (unit === '%') {\n    return m / 100 * size;  // percentage of the size\n  }\n  return m * size;            // relative to size\n}\n\n/**\n * @param {number} m  A number to be shown as a percent\n * @return {string}   The number m as a percent\n */\nexport function percent(m: number): string {\n  return (100 * m).toFixed(1).replace(/\\.?0+$/, '') + '%';\n}\n\n/**\n * @param {number} m  A number to be shown in ems\n * @return {string}   The number with units of ems\n */\nexport function em(m: number): string {\n  if (Math.abs(m) < .001) return '0';\n  return (m.toFixed(3).replace(/\\.?0+$/, '')) + 'em';\n}\n\n/**\n * @param {number} m   A number to be shown in ems, but rounded to pixel boundaries\n * @param {number} em  The number of pixels in an em\n * @return {string}    The number with units of em\n */\nexport function emRounded(m: number, em: number = 16): string {\n  m = (Math.round(m * em) + .05) / em;\n  if (Math.abs(m) < .001) return '0em';\n  return m.toFixed(3).replace(/\\.?0+$/, '') + 'em';\n}\n\n\n/**\n * @param {number} m   A number of em's to be shown as pixels\n * @param {number} M   The minimum number of pixels to allow\n * @param {number} em  The number of pixels in an em\n * @return {string}    The number with units of px\n */\nexport function px(m: number, M: number = -BIGDIMEN, em: number = 16): string {\n  m *= em;\n  if (M && m < M) m = M;\n  if (Math.abs(m) < .1) return '0';\n  return m.toFixed(1).replace(/\\.0$/, '') + 'px';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}