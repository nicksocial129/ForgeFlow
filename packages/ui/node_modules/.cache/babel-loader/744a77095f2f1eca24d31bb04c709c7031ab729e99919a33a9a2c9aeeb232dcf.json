{"ast":null,"code":"'use strict';\n\nmodule.exports = csharp;\ncsharp.displayName = 'csharp';\ncsharp.aliases = ['dotnet', 'cs'];\nfunction csharp(Prism) {\n  Prism.languages.csharp = Prism.languages.extend('clike', {\n    keyword: /\\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\\b/,\n    string: [{\n      pattern: /@(\"|')(?:\\1\\1|\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n      greedy: true\n    }, {\n      pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*?\\1/,\n      greedy: true\n    }],\n    'class-name': [{\n      // (Foo bar, Bar baz)\n      pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=\\s+\\w+)/,\n      inside: {\n        punctuation: /\\./\n      }\n    }, {\n      // [Foo]\n      pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }, {\n      // class Foo : Bar\n      pattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }, {\n      // class Foo\n      pattern: /((?:\\b(?:class|interface|new)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n      lookbehind: true,\n      inside: {\n        punctuation: /\\./\n      }\n    }],\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)f?/i,\n    operator: />>=?|<<=?|[-=]>|([-+&|?])\\1|~|[-+*/%&|^!=<>]=?/,\n    punctuation: /\\?\\.?|::|[{}[\\];(),.:]/\n  });\n  Prism.languages.insertBefore('csharp', 'class-name', {\n    'generic-method': {\n      pattern: /\\w+\\s*<[^>\\r\\n]+?>\\s*(?=\\()/,\n      inside: {\n        function: /^\\w+/,\n        'class-name': {\n          pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        keyword: Prism.languages.csharp.keyword,\n        punctuation: /[<>(),.:]/\n      }\n    },\n    preprocessor: {\n      pattern: /(^\\s*)#.*/m,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        // highlight preprocessor directives as keywords\n        directive: {\n          pattern: /(\\s*#)\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\b/,\n          lookbehind: true,\n          alias: 'keyword'\n        }\n      }\n    }\n  });\n  Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp;\n}","map":{"version":3,"names":["module","exports","csharp","displayName","aliases","Prism","languages","extend","keyword","string","pattern","greedy","inside","punctuation","lookbehind","number","operator","insertBefore","function","preprocessor","alias","directive","dotnet","cs"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/refractor/lang/csharp.js"],"sourcesContent":["'use strict'\n\nmodule.exports = csharp\ncsharp.displayName = 'csharp'\ncsharp.aliases = ['dotnet', 'cs']\nfunction csharp(Prism) {\n  Prism.languages.csharp = Prism.languages.extend('clike', {\n    keyword: /\\b(?:abstract|add|alias|as|ascending|async|await|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|descending|do|double|dynamic|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|from|get|global|goto|group|if|implicit|in|int|interface|internal|into|is|join|let|lock|long|namespace|new|null|object|operator|orderby|out|override|params|partial|private|protected|public|readonly|ref|remove|return|sbyte|sealed|select|set|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|value|var|virtual|void|volatile|where|while|yield)\\b/,\n    string: [\n      {\n        pattern: /@(\"|')(?:\\1\\1|\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/,\n        greedy: true\n      },\n      {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*?\\1/,\n        greedy: true\n      }\n    ],\n    'class-name': [\n      {\n        // (Foo bar, Bar baz)\n        pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b(?=\\s+\\w+)/,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // [Foo]\n        pattern: /(\\[)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // class Foo : Bar\n        pattern: /(\\b(?:class|interface)\\s+[A-Z]\\w*(?:\\.\\w+)*\\s*:\\s*)[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      },\n      {\n        // class Foo\n        pattern: /((?:\\b(?:class|interface|new)\\s+)|(?:catch\\s+\\())[A-Z]\\w*(?:\\.\\w+)*\\b/,\n        lookbehind: true,\n        inside: {\n          punctuation: /\\./\n        }\n      }\n    ],\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)f?/i,\n    operator: />>=?|<<=?|[-=]>|([-+&|?])\\1|~|[-+*/%&|^!=<>]=?/,\n    punctuation: /\\?\\.?|::|[{}[\\];(),.:]/\n  })\n  Prism.languages.insertBefore('csharp', 'class-name', {\n    'generic-method': {\n      pattern: /\\w+\\s*<[^>\\r\\n]+?>\\s*(?=\\()/,\n      inside: {\n        function: /^\\w+/,\n        'class-name': {\n          pattern: /\\b[A-Z]\\w*(?:\\.\\w+)*\\b/,\n          inside: {\n            punctuation: /\\./\n          }\n        },\n        keyword: Prism.languages.csharp.keyword,\n        punctuation: /[<>(),.:]/\n      }\n    },\n    preprocessor: {\n      pattern: /(^\\s*)#.*/m,\n      lookbehind: true,\n      alias: 'property',\n      inside: {\n        // highlight preprocessor directives as keywords\n        directive: {\n          pattern: /(\\s*#)\\b(?:define|elif|else|endif|endregion|error|if|line|pragma|region|undef|warning)\\b/,\n          lookbehind: true,\n          alias: 'keyword'\n        }\n      }\n    }\n  })\n  Prism.languages.dotnet = Prism.languages.cs = Prism.languages.csharp\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,MAAM;AACvBA,MAAM,CAACC,WAAW,GAAG,QAAQ;AAC7BD,MAAM,CAACE,OAAO,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC;AACjC,SAASF,MAAMA,CAACG,KAAK,EAAE;EACrBA,KAAK,CAACC,SAAS,CAACJ,MAAM,GAAGG,KAAK,CAACC,SAAS,CAACC,MAAM,CAAC,OAAO,EAAE;IACvDC,OAAO,EAAE,4oBAA4oB;IACrpBC,MAAM,EAAE,CACN;MACEC,OAAO,EAAE,wCAAwC;MACjDC,MAAM,EAAE;IACV,CAAC,EACD;MACED,OAAO,EAAE,kCAAkC;MAC3CC,MAAM,EAAE;IACV,CAAC,CACF;IACD,YAAY,EAAE,CACZ;MACE;MACAD,OAAO,EAAE,kCAAkC;MAC3CE,MAAM,EAAE;QACNC,WAAW,EAAE;MACf;IACF,CAAC,EACD;MACE;MACAH,OAAO,EAAE,0BAA0B;MACnCI,UAAU,EAAE,IAAI;MAChBF,MAAM,EAAE;QACNC,WAAW,EAAE;MACf;IACF,CAAC,EACD;MACE;MACAH,OAAO,EAAE,yEAAyE;MAClFI,UAAU,EAAE,IAAI;MAChBF,MAAM,EAAE;QACNC,WAAW,EAAE;MACf;IACF,CAAC,EACD;MACE;MACAH,OAAO,EAAE,uEAAuE;MAChFI,UAAU,EAAE,IAAI;MAChBF,MAAM,EAAE;QACNC,WAAW,EAAE;MACf;IACF,CAAC,CACF;IACDE,MAAM,EAAE,2CAA2C;IACnDC,QAAQ,EAAE,gDAAgD;IAC1DH,WAAW,EAAE;EACf,CAAC,CAAC;EACFR,KAAK,CAACC,SAAS,CAACW,YAAY,CAAC,QAAQ,EAAE,YAAY,EAAE;IACnD,gBAAgB,EAAE;MAChBP,OAAO,EAAE,6BAA6B;MACtCE,MAAM,EAAE;QACNM,QAAQ,EAAE,MAAM;QAChB,YAAY,EAAE;UACZR,OAAO,EAAE,wBAAwB;UACjCE,MAAM,EAAE;YACNC,WAAW,EAAE;UACf;QACF,CAAC;QACDL,OAAO,EAAEH,KAAK,CAACC,SAAS,CAACJ,MAAM,CAACM,OAAO;QACvCK,WAAW,EAAE;MACf;IACF,CAAC;IACDM,YAAY,EAAE;MACZT,OAAO,EAAE,YAAY;MACrBI,UAAU,EAAE,IAAI;MAChBM,KAAK,EAAE,UAAU;MACjBR,MAAM,EAAE;QACN;QACAS,SAAS,EAAE;UACTX,OAAO,EAAE,0FAA0F;UACnGI,UAAU,EAAE,IAAI;UAChBM,KAAK,EAAE;QACT;MACF;IACF;EACF,CAAC,CAAC;EACFf,KAAK,CAACC,SAAS,CAACgB,MAAM,GAAGjB,KAAK,CAACC,SAAS,CAACiB,EAAE,GAAGlB,KAAK,CAACC,SAAS,CAACJ,MAAM;AACtE"},"metadata":{},"sourceType":"script","externalDependencies":[]}