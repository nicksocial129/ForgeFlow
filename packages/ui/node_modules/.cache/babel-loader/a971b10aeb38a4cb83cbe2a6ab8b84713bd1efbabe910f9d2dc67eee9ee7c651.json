{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Styles = void 0;\nvar TRBL = ['top', 'right', 'bottom', 'left'];\nvar WSC = ['width', 'style', 'color'];\nfunction splitSpaces(text) {\n  var parts = text.split(/((?:'[^']*'|\"[^\"]*\"|,[\\s\\n]|[^\\s\\n])*)/g);\n  var split = [];\n  while (parts.length > 1) {\n    parts.shift();\n    split.push(parts.shift());\n  }\n  return split;\n}\nfunction splitTRBL(name) {\n  var e_1, _a;\n  var parts = splitSpaces(this.styles[name]);\n  if (parts.length === 0) {\n    parts.push('');\n  }\n  if (parts.length === 1) {\n    parts.push(parts[0]);\n  }\n  if (parts.length === 2) {\n    parts.push(parts[0]);\n  }\n  if (parts.length === 3) {\n    parts.push(parts[1]);\n  }\n  try {\n    for (var _b = __values(Styles.connect[name].children), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var child = _c.value;\n      this.setStyle(this.childName(name, child), parts.shift());\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n}\nfunction combineTRBL(name) {\n  var e_2, _a;\n  var children = Styles.connect[name].children;\n  var parts = [];\n  try {\n    for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {\n      var child = children_1_1.value;\n      var part = this.styles[name + '-' + child];\n      if (!part) {\n        delete this.styles[name];\n        return;\n      }\n      parts.push(part);\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n  if (parts[3] === parts[1]) {\n    parts.pop();\n    if (parts[2] === parts[0]) {\n      parts.pop();\n      if (parts[1] === parts[0]) {\n        parts.pop();\n      }\n    }\n  }\n  this.styles[name] = parts.join(' ');\n}\nfunction splitSame(name) {\n  var e_3, _a;\n  try {\n    for (var _b = __values(Styles.connect[name].children), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var child = _c.value;\n      this.setStyle(this.childName(name, child), this.styles[name]);\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n}\nfunction combineSame(name) {\n  var e_4, _a;\n  var children = __spreadArray([], __read(Styles.connect[name].children), false);\n  var value = this.styles[this.childName(name, children.shift())];\n  try {\n    for (var children_2 = __values(children), children_2_1 = children_2.next(); !children_2_1.done; children_2_1 = children_2.next()) {\n      var child = children_2_1.value;\n      if (this.styles[this.childName(name, child)] !== value) {\n        delete this.styles[name];\n        return;\n      }\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (children_2_1 && !children_2_1.done && (_a = children_2.return)) _a.call(children_2);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n  this.styles[name] = value;\n}\nvar BORDER = {\n  width: /^(?:[\\d.]+(?:[a-z]+)|thin|medium|thick|inherit|initial|unset)$/,\n  style: /^(?:none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|inherit|initial|unset)$/\n};\nfunction splitWSC(name) {\n  var e_5, _a, e_6, _b;\n  var parts = {\n    width: '',\n    style: '',\n    color: ''\n  };\n  try {\n    for (var _c = __values(splitSpaces(this.styles[name])), _d = _c.next(); !_d.done; _d = _c.next()) {\n      var part = _d.value;\n      if (part.match(BORDER.width) && parts.width === '') {\n        parts.width = part;\n      } else if (part.match(BORDER.style) && parts.style === '') {\n        parts.style = part;\n      } else {\n        parts.color = part;\n      }\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n  try {\n    for (var _e = __values(Styles.connect[name].children), _f = _e.next(); !_f.done; _f = _e.next()) {\n      var child = _f.value;\n      this.setStyle(this.childName(name, child), parts[child]);\n    }\n  } catch (e_6_1) {\n    e_6 = {\n      error: e_6_1\n    };\n  } finally {\n    try {\n      if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n    } finally {\n      if (e_6) throw e_6.error;\n    }\n  }\n}\nfunction combineWSC(name) {\n  var e_7, _a;\n  var parts = [];\n  try {\n    for (var _b = __values(Styles.connect[name].children), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var child = _c.value;\n      var value = this.styles[this.childName(name, child)];\n      if (value) {\n        parts.push(value);\n      }\n    }\n  } catch (e_7_1) {\n    e_7 = {\n      error: e_7_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_7) throw e_7.error;\n    }\n  }\n  if (parts.length) {\n    this.styles[name] = parts.join(' ');\n  } else {\n    delete this.styles[name];\n  }\n}\nvar FONT = {\n  style: /^(?:normal|italic|oblique|inherit|initial|unset)$/,\n  variant: new RegExp('^(?:' + ['normal|none', 'inherit|initial|unset', 'common-ligatures|no-common-ligatures', 'discretionary-ligatures|no-discretionary-ligatures', 'historical-ligatures|no-historical-ligatures', 'contextual|no-contextual', '(?:stylistic|character-variant|swash|ornaments|annotation)\\\\([^)]*\\\\)', 'small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps', 'lining-nums|oldstyle-nums|proportional-nums|tabular-nums', 'diagonal-fractions|stacked-fractions', 'ordinal|slashed-zero', 'jis78|jis83|jis90|jis04|simplified|traditional', 'full-width|proportional-width', 'ruby'].join('|') + ')$'),\n  weight: /^(?:normal|bold|bolder|lighter|[1-9]00|inherit|initial|unset)$/,\n  stretch: new RegExp('^(?:' + ['normal', '(?:(?:ultra|extra|semi)-)?condensed', '(?:(?:semi|extra|ulta)-)?expanded', 'inherit|initial|unset'].join('|') + ')$'),\n  size: new RegExp('^(?:' + ['xx-small|x-small|small|medium|large|x-large|xx-large|larger|smaller', '[\\d.]+%|[\\d.]+[a-z]+', 'inherit|initial|unset'].join('|') + ')' + '(?:\\/(?:normal|[\\d.\\+](?:%|[a-z]+)?))?$')\n};\nfunction splitFont(name) {\n  var e_8, _a, e_9, _b;\n  var parts = splitSpaces(this.styles[name]);\n  var value = {\n    style: '',\n    variant: [],\n    weight: '',\n    stretch: '',\n    size: '',\n    family: '',\n    'line-height': ''\n  };\n  try {\n    for (var parts_1 = __values(parts), parts_1_1 = parts_1.next(); !parts_1_1.done; parts_1_1 = parts_1.next()) {\n      var part = parts_1_1.value;\n      value.family = part;\n      try {\n        for (var _c = (e_9 = void 0, __values(Object.keys(FONT))), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var name_1 = _d.value;\n          if ((Array.isArray(value[name_1]) || value[name_1] === '') && part.match(FONT[name_1])) {\n            if (name_1 === 'size') {\n              var _e = __read(part.split(/\\//), 2),\n                size = _e[0],\n                height = _e[1];\n              value[name_1] = size;\n              if (height) {\n                value['line-height'] = height;\n              }\n            } else if (value.size === '') {\n              if (Array.isArray(value[name_1])) {\n                value[name_1].push(part);\n              } else {\n                value[name_1] = part;\n              }\n            }\n          }\n        }\n      } catch (e_9_1) {\n        e_9 = {\n          error: e_9_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n        } finally {\n          if (e_9) throw e_9.error;\n        }\n      }\n    }\n  } catch (e_8_1) {\n    e_8 = {\n      error: e_8_1\n    };\n  } finally {\n    try {\n      if (parts_1_1 && !parts_1_1.done && (_a = parts_1.return)) _a.call(parts_1);\n    } finally {\n      if (e_8) throw e_8.error;\n    }\n  }\n  saveFontParts(name, value);\n  delete this.styles[name];\n}\nfunction saveFontParts(name, value) {\n  var e_10, _a;\n  try {\n    for (var _b = __values(Styles.connect[name].children), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var child = _c.value;\n      var cname = this.childName(name, child);\n      if (Array.isArray(value[child])) {\n        var values = value[child];\n        if (values.length) {\n          this.styles[cname] = values.join(' ');\n        }\n      } else if (value[child] !== '') {\n        this.styles[cname] = value[child];\n      }\n    }\n  } catch (e_10_1) {\n    e_10 = {\n      error: e_10_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_10) throw e_10.error;\n    }\n  }\n}\nfunction combineFont(_name) {}\nvar Styles = function () {\n  function Styles(cssText) {\n    if (cssText === void 0) {\n      cssText = '';\n    }\n    this.parse(cssText);\n  }\n  Object.defineProperty(Styles.prototype, \"cssText\", {\n    get: function () {\n      var e_11, _a;\n      var styles = [];\n      try {\n        for (var _b = __values(Object.keys(this.styles)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var name_2 = _c.value;\n          var parent_1 = this.parentName(name_2);\n          if (!this.styles[parent_1]) {\n            styles.push(name_2 + ': ' + this.styles[name_2] + ';');\n          }\n        }\n      } catch (e_11_1) {\n        e_11 = {\n          error: e_11_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_11) throw e_11.error;\n        }\n      }\n      return styles.join(' ');\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Styles.prototype.set = function (name, value) {\n    name = this.normalizeName(name);\n    this.setStyle(name, value);\n    if (Styles.connect[name] && !Styles.connect[name].combine) {\n      this.combineChildren(name);\n      delete this.styles[name];\n    }\n    while (name.match(/-/)) {\n      name = this.parentName(name);\n      if (!Styles.connect[name]) break;\n      Styles.connect[name].combine.call(this, name);\n    }\n  };\n  Styles.prototype.get = function (name) {\n    name = this.normalizeName(name);\n    return this.styles.hasOwnProperty(name) ? this.styles[name] : '';\n  };\n  Styles.prototype.setStyle = function (name, value) {\n    this.styles[name] = value;\n    if (Styles.connect[name] && Styles.connect[name].children) {\n      Styles.connect[name].split.call(this, name);\n    }\n    if (value === '') {\n      delete this.styles[name];\n    }\n  };\n  Styles.prototype.combineChildren = function (name) {\n    var e_12, _a;\n    var parent = this.parentName(name);\n    try {\n      for (var _b = __values(Styles.connect[name].children), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        var cname = this.childName(parent, child);\n        Styles.connect[cname].combine.call(this, cname);\n      }\n    } catch (e_12_1) {\n      e_12 = {\n        error: e_12_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_12) throw e_12.error;\n      }\n    }\n  };\n  Styles.prototype.parentName = function (name) {\n    var parent = name.replace(/-[^-]*$/, '');\n    return name === parent ? '' : parent;\n  };\n  Styles.prototype.childName = function (name, child) {\n    if (child.match(/-/)) {\n      return child;\n    }\n    if (Styles.connect[name] && !Styles.connect[name].combine) {\n      child += name.replace(/.*-/, '-');\n      name = this.parentName(name);\n    }\n    return name + '-' + child;\n  };\n  Styles.prototype.normalizeName = function (name) {\n    return name.replace(/[A-Z]/g, function (c) {\n      return '-' + c.toLowerCase();\n    });\n  };\n  Styles.prototype.parse = function (cssText) {\n    if (cssText === void 0) {\n      cssText = '';\n    }\n    var PATTERN = this.constructor.pattern;\n    this.styles = {};\n    var parts = cssText.replace(PATTERN.comment, '').split(PATTERN.style);\n    while (parts.length > 1) {\n      var _a = __read(parts.splice(0, 3), 3),\n        space = _a[0],\n        name_3 = _a[1],\n        value = _a[2];\n      if (space.match(/[^\\s\\n]/)) return;\n      this.set(name_3, value);\n    }\n  };\n  Styles.pattern = {\n    style: /([-a-z]+)[\\s\\n]*:[\\s\\n]*((?:'[^']*'|\"[^\"]*\"|\\n|.)*?)[\\s\\n]*(?:;|$)/g,\n    comment: /\\/\\*[^]*?\\*\\//g\n  };\n  Styles.connect = {\n    padding: {\n      children: TRBL,\n      split: splitTRBL,\n      combine: combineTRBL\n    },\n    border: {\n      children: TRBL,\n      split: splitSame,\n      combine: combineSame\n    },\n    'border-top': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-right': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-bottom': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-left': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-width': {\n      children: TRBL,\n      split: splitTRBL,\n      combine: null\n    },\n    'border-style': {\n      children: TRBL,\n      split: splitTRBL,\n      combine: null\n    },\n    'border-color': {\n      children: TRBL,\n      split: splitTRBL,\n      combine: null\n    },\n    font: {\n      children: ['style', 'variant', 'weight', 'stretch', 'line-height', 'size', 'family'],\n      split: splitFont,\n      combine: combineFont\n    }\n  };\n  return Styles;\n}();\nexports.Styles = Styles;","map":{"version":3,"names":["TRBL","WSC","splitSpaces","text","parts","split","length","shift","push","splitTRBL","name","styles","_b","__values","Styles","connect","children","_c","next","done","child","value","setStyle","childName","combineTRBL","children_1","children_1_1","part","pop","join","splitSame","combineSame","__spreadArray","__read","children_2","children_2_1","BORDER","width","style","splitWSC","color","_d","match","_e","_f","combineWSC","FONT","variant","RegExp","weight","stretch","size","splitFont","family","parts_1","parts_1_1","e_9","Object","keys","name_1","Array","isArray","height","saveFontParts","cname","values","combineFont","_name","cssText","parse","defineProperty","prototype","get","name_2","parent_1","parentName","set","normalizeName","combine","combineChildren","call","hasOwnProperty","parent","replace","c","toLowerCase","PATTERN","constructor","pattern","comment","_a","splice","space","name_3","padding","border","font","exports"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/util/Styles.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements a lite CssStyleDeclaration replacement\n *                (very limited in scope)\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\n/**\n * An object contining name: value pairs\n */\nexport type StyleList = {[name: string]: string};\n\n/**\n * Data for how to map a combined style (like border) to its children\n */\nexport type connection = {\n  children: string[],               // suffix names to add to the base name\n  split: (name: string) => void,    // function to split the value for the children\n  combine: (name: string) => void   // function to combine the child values when one changes\n};\n\n/**\n * A collection of connections\n */\nexport type connections = {[name: string]: connection};\n\n/*********************************************************/\n/**\n * Some common children arrays\n */\nconst TRBL = ['top', 'right', 'bottom', 'left'];\nconst WSC = ['width', 'style', 'color'];\n\n/**\n * Split a style at spaces (taking quotation marks and commas into account)\n *\n * @param {string} text  The combined styles to be split at spaces\n * @return {string[]}    Array of parts of the style (separated by spaces)\n */\nfunction splitSpaces(text: string): string[] {\n  const parts = text.split(/((?:'[^']*'|\"[^\"]*\"|,[\\s\\n]|[^\\s\\n])*)/g);\n  const split = [] as string[];\n  while (parts.length > 1) {\n    parts.shift();\n    split.push(parts.shift());\n  }\n  return split;\n}\n\n/*********************************************************/\n/**\n * Split a top-right-bottom-left group into its parts\n * Format:\n *    x           all are the same value\n *    x y         same as x y x y\n *    x y z       same as x y z y\n *    x y z w     each specified\n *\n * @param {string} name   The style to be processed\n */\n\nfunction splitTRBL(name: string) {\n  const parts = splitSpaces(this.styles[name]);\n  if (parts.length === 0) {\n    parts.push('');\n  }\n  if (parts.length === 1) {\n    parts.push(parts[0]);\n  }\n  if (parts.length === 2) {\n    parts.push(parts[0]);\n  }\n  if (parts.length === 3) {\n    parts.push(parts[1]);\n  }\n  for (const child of Styles.connect[name].children) {\n    this.setStyle(this.childName(name, child), parts.shift());\n  }\n}\n\n/**\n * Combine top-right-bottom-left into one entry\n * (removing unneeded values)\n *\n * @param {string} name   The style to be processed\n */\nfunction combineTRBL(name: string) {\n  const children = Styles.connect[name].children;\n  const parts = [] as string[];\n  for (const child of children) {\n    const part = this.styles[name + '-' + child];\n    if (!part) {\n      delete this.styles[name];\n      return;\n    }\n    parts.push(part);\n  }\n  if (parts[3] === parts[1]) {\n    parts.pop();\n    if (parts[2] === parts[0]) {\n      parts.pop();\n      if (parts[1] === parts[0]) {\n        parts.pop();\n      }\n    }\n  }\n  this.styles[name] = parts.join(' ');\n}\n\n/*********************************************************/\n/**\n * Use the same value for all children\n *\n * @param {string} name   The style to be processed\n */\nfunction splitSame(name: string) {\n  for (const child of Styles.connect[name].children) {\n    this.setStyle(this.childName(name, child), this.styles[name]);\n  }\n}\n\n/**\n * Check that all children have the same values and\n * if so, set the parent to that value\n *\n * @param {string} name   The style to be processed\n */\nfunction combineSame(name: string) {\n  const children = [...Styles.connect[name].children];\n  const value = this.styles[this.childName(name, children.shift())];\n  for (const child of children) {\n    if (this.styles[this.childName(name, child)] !== value) {\n      delete this.styles[name];\n      return;\n    }\n  }\n  this.styles[name] = value;\n}\n\n/*********************************************************/\n/**\n * Patterns for the parts of a boarder\n */\nconst BORDER: {[name: string]: RegExp} = {\n  width: /^(?:[\\d.]+(?:[a-z]+)|thin|medium|thick|inherit|initial|unset)$/,\n  style: /^(?:none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|inherit|initial|unset)$/\n};\n\n/**\n * Split a width-style-color border definition\n *\n * @param {string} name   The style to be processed\n */\nfunction splitWSC(name: string) {\n  let parts = {width: '', style: '', color: ''} as StyleList;\n  for (const part of splitSpaces(this.styles[name])) {\n    if (part.match(BORDER.width) && parts.width === '') {\n      parts.width = part;\n    } else if (part.match(BORDER.style) && parts.style === '') {\n      parts.style = part;\n    } else {\n      parts.color = part;\n    }\n  }\n  for (const child of Styles.connect[name].children) {\n    this.setStyle(this.childName(name, child), parts[child]);\n  }\n}\n\n/**\n * Combine with-style-color border definition from children\n *\n * @param {string} name   The style to be processed\n */\nfunction combineWSC(name: string) {\n  const parts = [] as string[];\n  for (const child of Styles.connect[name].children) {\n    const value = this.styles[this.childName(name, child)];\n    if (value) {\n      parts.push(value);\n    }\n  }\n  if (parts.length) {\n    this.styles[name] = parts.join(' ');\n  } else {\n    delete this.styles[name];\n  }\n}\n\n/*********************************************************/\n/**\n * Patterns for the parts of a font declaration\n */\nconst FONT: {[name: string]: RegExp} = {\n  style: /^(?:normal|italic|oblique|inherit|initial|unset)$/,\n  variant: new RegExp('^(?:' +\n                      ['normal|none',\n                       'inherit|initial|unset',\n                       'common-ligatures|no-common-ligatures',\n                       'discretionary-ligatures|no-discretionary-ligatures',\n                       'historical-ligatures|no-historical-ligatures',\n                       'contextual|no-contextual',\n                       '(?:stylistic|character-variant|swash|ornaments|annotation)\\\\([^)]*\\\\)',\n                       'small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps',\n                       'lining-nums|oldstyle-nums|proportional-nums|tabular-nums',\n                       'diagonal-fractions|stacked-fractions',\n                       'ordinal|slashed-zero',\n                       'jis78|jis83|jis90|jis04|simplified|traditional',\n                       'full-width|proportional-width',\n                       'ruby'].join('|') + ')$'),\n  weight: /^(?:normal|bold|bolder|lighter|[1-9]00|inherit|initial|unset)$/,\n  stretch: new RegExp('^(?:' +\n                      ['normal',\n                       '(?:(?:ultra|extra|semi)-)?condensed',\n                       '(?:(?:semi|extra|ulta)-)?expanded',\n                       'inherit|initial|unset']. join('|') + ')$'),\n  size: new RegExp('^(?:' +\n                   ['xx-small|x-small|small|medium|large|x-large|xx-large|larger|smaller',\n                    '[\\d.]+%|[\\d.]+[a-z]+',\n                    'inherit|initial|unset'].join('|') + ')' +\n                   '(?:\\/(?:normal|[\\d.\\+](?:%|[a-z]+)?))?$')\n};\n\n/**\n * Split a font declaration into is parts (not perfect but good enough for now)\n *\n * @param {string} name   The style to be processed\n */\nfunction splitFont(name: string) {\n  const parts = splitSpaces(this.styles[name]);\n  //\n  //  The parts found (array means can be more than one word)\n  //\n  const value = {\n    style: '', variant: [], weight: '', stretch: '',\n    size: '', family: '', 'line-height': ''\n  } as {[name: string]: string | string[]};\n  for (const part of parts) {\n    value.family = part; // assume it is family unless otherwise (family must be present)\n    for (const name of Object.keys(FONT)) {\n      if ((Array.isArray(value[name]) || value[name] === '') && part.match(FONT[name])) {\n        if (name === 'size') {\n          //\n          // Handle size/line-height\n          //\n          const [size, height] = part.split(/\\//);\n          value[name] = size;\n          if (height) {\n            value['line-height'] = height;\n          }\n        } else if (value.size === '') {\n          //\n          // style, weight, variant, stretch must appear before size\n          //\n          if (Array.isArray(value[name])) {\n            (value[name] as string[]).push(part);\n          } else {\n            value[name] = part;\n          }\n        }\n      }\n    }\n  }\n  saveFontParts(name, value);\n  delete this.styles[name]; // only use the parts, not the font declaration itself\n}\n\n/**\n * @param {string} name   The style to be processed\n * @param {{[name: string]: string | string[]}} value  The list of parts detected above\n */\nfunction saveFontParts(name: string, value: {[name: string]: string | string[]}) {\n  for (const child of Styles.connect[name].children) {\n    const cname = this.childName(name, child);\n    if (Array.isArray(value[child])) {\n      const values = value[child] as string[];\n      if (values.length) {\n        this.styles[cname] = values.join(' ');\n      }\n    } else  if (value[child] !== '') {\n      this.styles[cname] = value[child];\n    }\n  }\n}\n\n/**\n * Combine font parts into one (we don't actually do that)\n */\nfunction combineFont(_name: string) {}\n\n/*********************************************************/\n/**\n * Implements the Styles object (lite version of CssStyleDeclaration)\n */\nexport class Styles {\n\n  /**\n   * Patterns for style values and comments\n   */\n  public static pattern: {[name: string]: RegExp} = {\n    style: /([-a-z]+)[\\s\\n]*:[\\s\\n]*((?:'[^']*'|\"[^\"]*\"|\\n|.)*?)[\\s\\n]*(?:;|$)/g,\n    comment: /\\/\\*[^]*?\\*\\//g\n  };\n\n  /**\n   * The mapping of parents to children, and how to split and combine them\n   */\n  public static connect: connections = {\n    padding: {\n      children: TRBL,\n      split: splitTRBL,\n      combine: combineTRBL\n    },\n\n    border: {\n      children: TRBL,\n      split: splitSame,\n      combine: combineSame\n    },\n    'border-top': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-right': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-bottom': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-left': {\n      children: WSC,\n      split: splitWSC,\n      combine: combineWSC\n    },\n    'border-width': {\n      children: TRBL,\n      split: splitTRBL,\n      combine: null      // means its children combine to a different parent\n    },\n    'border-style': {\n      children: TRBL,\n      split: splitTRBL,\n      combine: null      // means its children combine to a different parent\n    },\n    'border-color': {\n      children: TRBL,\n      split: splitTRBL,\n      combine: null      // means its children combine to a different parent\n    },\n\n    font: {\n      children: ['style', 'variant', 'weight', 'stretch', 'line-height', 'size', 'family'],\n      split: splitFont,\n      combine: combineFont\n    }\n  };\n\n  /**\n   * The list of styles defined for this declaration\n   */\n  protected styles: StyleList;\n\n  /**\n   * @param {string} cssText  The initial definition for the style\n   * @constructor\n   */\n  constructor(cssText: string = '') {\n    this.parse(cssText);\n  }\n\n  /**\n   * @return {string}  The CSS string for the styles currently defined\n   */\n  public get cssText(): string {\n    const styles = [] as string[];\n    for (const name of Object.keys(this.styles)) {\n      const parent = this.parentName(name);\n      if (!this.styles[parent]) {\n        styles.push(name + ': ' + this.styles[name] + ';');\n      }\n    }\n    return styles.join(' ');\n  }\n\n  /**\n   * @param {string} name   The name of the style to set\n   * @param {string|number|boolean} value The value to set it to\n   */\n  public set(name: string, value: string | number | boolean) {\n    name = this.normalizeName(name);\n    this.setStyle(name, value as string);\n    //\n    // If there is no combine function ,the children combine to\n    // a separate parent (e.g., border-width sets border-top-width, etc.\n    // and combines to border-top)\n    //\n    if (Styles.connect[name] && !Styles.connect[name].combine) {\n      this.combineChildren(name);\n      delete this.styles[name];\n    }\n    //\n    // If we just changed a child, we need to try to combine\n    // it with its parent's other children\n    //\n    while (name.match(/-/)) {\n      name = this.parentName(name);\n      if (!Styles.connect[name]) break;\n      Styles.connect[name].combine.call(this, name);\n    }\n  }\n\n  /**\n   * @param {string} name  The name of the style to get\n   * @return {string}      The value of the style (or empty string if not defined)\n   */\n  public get(name: string): string {\n    name = this.normalizeName(name);\n    return (this.styles.hasOwnProperty(name) ? this.styles[name] : '');\n  }\n\n  /**\n   * @param {string} name   The name of the style to set (without causing parent updates)\n   * @param {string} value  The value to set it to\n   */\n  protected setStyle(name: string, value: string) {\n    this.styles[name] = value;\n    if (Styles.connect[name] && Styles.connect[name].children) {\n      Styles.connect[name].split.call(this, name);\n    }\n    if (value === '') {\n      delete this.styles[name];\n    }\n  }\n\n  /**\n   * @param {string} name   The name of the style whose parent is to be combined\n   */\n  protected combineChildren(name: string) {\n    const parent = this.parentName(name);\n    for (const child of Styles.connect[name].children) {\n      const cname = this.childName(parent, child);\n      Styles.connect[cname].combine.call(this, cname);\n    }\n  }\n\n  /**\n   * @param {string} name   The name of the style whose parent style is to be found\n   * @return {string}       The name of the parent, or '' if none\n   */\n  protected parentName(name: string): string {\n    const parent = name.replace(/-[^-]*$/, '');\n    return (name === parent ? '' : parent);\n  }\n\n  /**\n   * @param {string} name   The name of the parent style\n   * @param {string} child  The suffix to be added to the parent\n   * @preturn {string}      The combined name\n   */\n  protected childName(name: string, child: string) {\n    //\n    // If the child contains a dash, it is already the fill name\n    //\n    if (child.match(/-/)) {\n      return child;\n    }\n    //\n    // For non-combining styles, like border-width, insert\n    //   the child name before the find word, e.g., border-top-width\n    //\n    if (Styles.connect[name] && !Styles.connect[name].combine) {\n      child += name.replace(/.*-/, '-');\n      name = this.parentName(name);\n    }\n    return name + '-' + child;\n  }\n\n  /**\n   * @param {string} name  The name of a style to normalize\n   * @return {string}      The name converted from CamelCase to lowercase with dashes\n   */\n  protected normalizeName(name: string): string {\n    return name.replace(/[A-Z]/g, c => '-' + c.toLowerCase());\n  }\n\n  /**\n   * @param {string} cssText  A style text string to be parsed into separate styles\n   *                          (by using this.set(), we get all the sub-styles created\n   *                           as well as the merged style shorthands)\n   */\n  protected parse(cssText: string = '') {\n    let PATTERN = (this.constructor as typeof Styles).pattern;\n    this.styles = {};\n    const parts = cssText.replace(PATTERN.comment, '').split(PATTERN.style);\n    while (parts.length > 1) {\n      let [space, name, value] = parts.splice(0, 3);\n      if (space.match(/[^\\s\\n]/)) return;\n      this.set(name, value);\n    }\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}