{"ast":null,"code":"module.exports = function (hljs) {\n  var keywords = {\n    'builtin-name':\n    // Clojure keywords\n    'def defonce cond apply if-not if-let if not not= = < > <= >= == + / * - rem ' + 'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? ' + 'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? ' + 'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? ' + 'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . ' + 'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last ' + 'drop-while while intern condp case reduced cycle split-at split-with repeat replicate ' + 'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext ' + 'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends ' + 'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler ' + 'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter ' + 'monitor-exit defmacro defn defn- macroexpand macroexpand-1 for dosync and or ' + 'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert ' + 'peek pop doto proxy defstruct first rest cons defprotocol cast coll deftype defrecord last butlast ' + 'sigs reify second ffirst fnext nfirst nnext defmulti defmethod meta with-meta ns in-ns create-ns import ' + 'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! ' + 'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger ' + 'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline ' + 'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking ' + 'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! ' + 'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! ' + 'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty ' + 'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list ' + 'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer ' + 'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate ' + 'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta ' + 'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\n  };\n  var SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  var SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n  var SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  var NUMBER = {\n    className: 'number',\n    begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    illegal: null\n  });\n  var COMMENT = hljs.COMMENT(';', '$', {\n    relevance: 0\n  });\n  var LITERAL = {\n    className: 'literal',\n    begin: /\\b(true|false|nil)\\b/\n  };\n  var COLLECTION = {\n    begin: '[\\\\[\\\\{]',\n    end: '[\\\\]\\\\}]'\n  };\n  var HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  var HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  var KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  var LIST = {\n    begin: '\\\\(',\n    end: '\\\\)'\n  };\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  var NAME = {\n    keywords: keywords,\n    lexemes: SYMBOL_RE,\n    className: 'name',\n    begin: SYMBOL_RE,\n    starts: BODY\n  };\n  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\n  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n  HINT_COL.contains = [COLLECTION];\n  return {\n    aliases: ['clj'],\n    illegal: /\\S/,\n    contains: [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\n  };\n};","map":{"version":3,"names":["module","exports","hljs","keywords","SYMBOLSTART","SYMBOL_RE","SIMPLE_NUMBER_RE","SYMBOL","begin","relevance","NUMBER","className","STRING","inherit","QUOTE_STRING_MODE","illegal","COMMENT","LITERAL","COLLECTION","end","HINT","HINT_COL","KEY","LIST","BODY","endsWithParent","NAME","lexemes","starts","DEFAULT_CONTAINS","contains","aliases"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/highlight.js/lib/languages/clojure.js"],"sourcesContent":["module.exports = function(hljs) {\n  var keywords = {\n    'builtin-name':\n      // Clojure keywords\n      'def defonce cond apply if-not if-let if not not= = < > <= >= == + / * - rem '+\n      'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? '+\n      'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? '+\n      'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? '+\n      'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . '+\n      'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last '+\n      'drop-while while intern condp case reduced cycle split-at split-with repeat replicate '+\n      'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext '+\n      'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends '+\n      'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler '+\n      'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter '+\n      'monitor-exit defmacro defn defn- macroexpand macroexpand-1 for dosync and or '+\n      'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert '+\n      'peek pop doto proxy defstruct first rest cons defprotocol cast coll deftype defrecord last butlast '+\n      'sigs reify second ffirst fnext nfirst nnext defmulti defmethod meta with-meta ns in-ns create-ns import '+\n      'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! '+\n      'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger '+\n      'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline '+\n      'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking '+\n      'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! '+\n      'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! '+\n      'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty '+\n      'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list '+\n      'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer '+\n      'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate '+\n      'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta '+\n      'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'\n   };\n\n  var SYMBOLSTART = 'a-zA-Z_\\\\-!.?+*=<>&#\\'';\n  var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n  var SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n\n  var SYMBOL = {\n    begin: SYMBOL_RE,\n    relevance: 0\n  };\n  var NUMBER = {\n    className: 'number', begin: SIMPLE_NUMBER_RE,\n    relevance: 0\n  };\n  var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null});\n  var COMMENT = hljs.COMMENT(\n    ';',\n    '$',\n    {\n      relevance: 0\n    }\n  );\n  var LITERAL = {\n    className: 'literal',\n    begin: /\\b(true|false|nil)\\b/\n  };\n  var COLLECTION = {\n    begin: '[\\\\[\\\\{]', end: '[\\\\]\\\\}]'\n  };\n  var HINT = {\n    className: 'comment',\n    begin: '\\\\^' + SYMBOL_RE\n  };\n  var HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n  var KEY = {\n    className: 'symbol',\n    begin: '[:]{1,2}' + SYMBOL_RE\n  };\n  var LIST = {\n    begin: '\\\\(', end: '\\\\)'\n  };\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  var NAME = {\n    keywords: keywords,\n    lexemes: SYMBOL_RE,\n    className: 'name', begin: SYMBOL_RE,\n    starts: BODY\n  };\n  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];\n\n  LIST.contains = [hljs.COMMENT('comment', ''), NAME, BODY];\n  BODY.contains = DEFAULT_CONTAINS;\n  COLLECTION.contains = DEFAULT_CONTAINS;\n  HINT_COL.contains = [COLLECTION];\n\n  return {\n    aliases: ['clj'],\n    illegal: /\\S/,\n    contains: [LIST, STRING, HINT, HINT_COL, COMMENT, KEY, COLLECTION, NUMBER, LITERAL]\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}