{"ast":null,"code":"import{useState,useEffect,useRef}from'react';import{FormControl,OutlinedInput,Popover}from'@mui/material';import ExpandTextDialog from'ui-component/dialog/ExpandTextDialog';import SelectVariable from'ui-component/json/SelectVariable';import{getAvailableNodesForVariable}from'utils/genericHelper';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export const Input=_ref=>{var _inputParam$rows,_inputParam$step;let{inputParam,value,nodes,edges,nodeId,onChange,disabled=false,showDialog,dialogProps,onDialogCancel,onDialogConfirm}=_ref;const[myValue,setMyValue]=useState(value!==null&&value!==void 0?value:'');const[anchorEl,setAnchorEl]=useState(null);const[availableNodesForVariable,setAvailableNodesForVariable]=useState([]);const ref=useRef(null);const openPopOver=Boolean(anchorEl);const handleClosePopOver=()=>{setAnchorEl(null);};const setNewVal=val=>{const newVal=myValue+val.substring(2);onChange(newVal);setMyValue(newVal);};const getInputType=type=>{switch(type){case'string':return'text';case'password':return'password';case'number':return'number';default:return'text';}};useEffect(()=>{if(!disabled&&nodes&&edges&&nodeId&&inputParam){const nodesForVariable=inputParam!==null&&inputParam!==void 0&&inputParam.acceptVariable?getAvailableNodesForVariable(nodes,edges,nodeId,inputParam.id):[];setAvailableNodesForVariable(nodesForVariable);}},[disabled,inputParam,nodes,edges,nodeId]);useEffect(()=>{if(typeof myValue==='string'&&myValue&&myValue.endsWith('{{')){setAnchorEl(ref.current);}},[myValue]);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(FormControl,{sx:{mt:1,width:'100%'},size:\"small\",children:/*#__PURE__*/_jsx(OutlinedInput,{id:inputParam.name,size:\"small\",disabled:disabled,type:getInputType(inputParam.type),placeholder:inputParam.placeholder,multiline:!!inputParam.rows,rows:(_inputParam$rows=inputParam.rows)!==null&&_inputParam$rows!==void 0?_inputParam$rows:1,value:myValue,name:inputParam.name,onChange:e=>{setMyValue(e.target.value);onChange(e.target.value);},inputProps:{step:(_inputParam$step=inputParam.step)!==null&&_inputParam$step!==void 0?_inputParam$step:1,style:{height:inputParam.rows?'90px':'inherit'}}})}),showDialog&&/*#__PURE__*/_jsx(ExpandTextDialog,{show:showDialog,dialogProps:dialogProps,onCancel:onDialogCancel,onConfirm:(newValue,inputParamName)=>{setMyValue(newValue);onDialogConfirm(newValue,inputParamName);}}),/*#__PURE__*/_jsx(\"div\",{ref:ref}),(inputParam===null||inputParam===void 0?void 0:inputParam.acceptVariable)&&/*#__PURE__*/_jsx(Popover,{open:openPopOver,anchorEl:anchorEl,onClose:handleClosePopOver,anchorOrigin:{vertical:'bottom',horizontal:'left'},transformOrigin:{vertical:'top',horizontal:'left'},children:/*#__PURE__*/_jsx(SelectVariable,{disabled:disabled,availableNodesForVariable:availableNodesForVariable,onSelectAndReturnVal:val=>{setNewVal(val);handleClosePopOver();}})})]});};","map":{"version":3,"names":["useState","useEffect","useRef","FormControl","OutlinedInput","Popover","ExpandTextDialog","SelectVariable","getAvailableNodesForVariable","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Input","_ref","_inputParam$rows","_inputParam$step","inputParam","value","nodes","edges","nodeId","onChange","disabled","showDialog","dialogProps","onDialogCancel","onDialogConfirm","myValue","setMyValue","anchorEl","setAnchorEl","availableNodesForVariable","setAvailableNodesForVariable","ref","openPopOver","Boolean","handleClosePopOver","setNewVal","val","newVal","substring","getInputType","type","nodesForVariable","acceptVariable","id","endsWith","current","children","sx","mt","width","size","name","placeholder","multiline","rows","e","target","inputProps","step","style","height","show","onCancel","onConfirm","newValue","inputParamName","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","onSelectAndReturnVal"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/packages/ui/src/ui-component/input/Input.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { FormControl, OutlinedInput, Popover } from '@mui/material'\nimport ExpandTextDialog from 'ui-component/dialog/ExpandTextDialog'\nimport SelectVariable from 'ui-component/json/SelectVariable'\nimport { getAvailableNodesForVariable } from 'utils/genericHelper'\n\nexport const Input = ({\n    inputParam,\n    value,\n    nodes,\n    edges,\n    nodeId,\n    onChange,\n    disabled = false,\n    showDialog,\n    dialogProps,\n    onDialogCancel,\n    onDialogConfirm\n}) => {\n    const [myValue, setMyValue] = useState(value ?? '')\n    const [anchorEl, setAnchorEl] = useState(null)\n    const [availableNodesForVariable, setAvailableNodesForVariable] = useState([])\n    const ref = useRef(null)\n\n    const openPopOver = Boolean(anchorEl)\n\n    const handleClosePopOver = () => {\n        setAnchorEl(null)\n    }\n\n    const setNewVal = (val) => {\n        const newVal = myValue + val.substring(2)\n        onChange(newVal)\n        setMyValue(newVal)\n    }\n\n    const getInputType = (type) => {\n        switch (type) {\n            case 'string':\n                return 'text'\n            case 'password':\n                return 'password'\n            case 'number':\n                return 'number'\n            default:\n                return 'text'\n        }\n    }\n\n    useEffect(() => {\n        if (!disabled && nodes && edges && nodeId && inputParam) {\n            const nodesForVariable = inputParam?.acceptVariable ? getAvailableNodesForVariable(nodes, edges, nodeId, inputParam.id) : []\n            setAvailableNodesForVariable(nodesForVariable)\n        }\n    }, [disabled, inputParam, nodes, edges, nodeId])\n\n    useEffect(() => {\n        if (typeof myValue === 'string' && myValue && myValue.endsWith('{{')) {\n            setAnchorEl(ref.current)\n        }\n    }, [myValue])\n\n    return (\n        <>\n            <FormControl sx={{ mt: 1, width: '100%' }} size='small'>\n                <OutlinedInput\n                    id={inputParam.name}\n                    size='small'\n                    disabled={disabled}\n                    type={getInputType(inputParam.type)}\n                    placeholder={inputParam.placeholder}\n                    multiline={!!inputParam.rows}\n                    rows={inputParam.rows ?? 1}\n                    value={myValue}\n                    name={inputParam.name}\n                    onChange={(e) => {\n                        setMyValue(e.target.value)\n                        onChange(e.target.value)\n                    }}\n                    inputProps={{\n                        step: inputParam.step ?? 1,\n                        style: {\n                            height: inputParam.rows ? '90px' : 'inherit'\n                        }\n                    }}\n                />\n            </FormControl>\n            {showDialog && (\n                <ExpandTextDialog\n                    show={showDialog}\n                    dialogProps={dialogProps}\n                    onCancel={onDialogCancel}\n                    onConfirm={(newValue, inputParamName) => {\n                        setMyValue(newValue)\n                        onDialogConfirm(newValue, inputParamName)\n                    }}\n                ></ExpandTextDialog>\n            )}\n            <div ref={ref}></div>\n            {inputParam?.acceptVariable && (\n                <Popover\n                    open={openPopOver}\n                    anchorEl={anchorEl}\n                    onClose={handleClosePopOver}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'left'\n                    }}\n                    transformOrigin={{\n                        vertical: 'top',\n                        horizontal: 'left'\n                    }}\n                >\n                    <SelectVariable\n                        disabled={disabled}\n                        availableNodesForVariable={availableNodesForVariable}\n                        onSelectAndReturnVal={(val) => {\n                            setNewVal(val)\n                            handleClosePopOver()\n                        }}\n                    />\n                </Popover>\n            )}\n        </>\n    )\n}\n\nInput.propTypes = {\n    inputParam: PropTypes.object,\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    onChange: PropTypes.func,\n    disabled: PropTypes.bool,\n    showDialog: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    nodes: PropTypes.array,\n    edges: PropTypes.array,\n    nodeId: PropTypes.string,\n    onDialogCancel: PropTypes.func,\n    onDialogConfirm: PropTypes.func\n}\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAEnD,OAASC,WAAW,CAAEC,aAAa,CAAEC,OAAO,KAAQ,eAAe,CACnE,MAAO,CAAAC,gBAAgB,KAAM,sCAAsC,CACnE,MAAO,CAAAC,cAAc,KAAM,kCAAkC,CAC7D,OAASC,4BAA4B,KAAQ,qBAAqB,QAAAC,GAAA,IAAAC,IAAA,gCAAAC,QAAA,IAAAC,SAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAElE,MAAO,MAAM,CAAAC,KAAK,CAAGC,IAAA,EAYf,KAAAC,gBAAA,CAAAC,gBAAA,IAZgB,CAClBC,UAAU,CACVC,KAAK,CACLC,KAAK,CACLC,KAAK,CACLC,MAAM,CACNC,QAAQ,CACRC,QAAQ,CAAG,KAAK,CAChBC,UAAU,CACVC,WAAW,CACXC,cAAc,CACdC,eACJ,CAAC,CAAAb,IAAA,CACG,KAAM,CAACc,OAAO,CAAEC,UAAU,CAAC,CAAG/B,QAAQ,CAACoB,KAAK,SAALA,KAAK,UAALA,KAAK,CAAI,EAAE,CAAC,CACnD,KAAM,CAACY,QAAQ,CAAEC,WAAW,CAAC,CAAGjC,QAAQ,CAAC,IAAI,CAAC,CAC9C,KAAM,CAACkC,yBAAyB,CAAEC,4BAA4B,CAAC,CAAGnC,QAAQ,CAAC,EAAE,CAAC,CAC9E,KAAM,CAAAoC,GAAG,CAAGlC,MAAM,CAAC,IAAI,CAAC,CAExB,KAAM,CAAAmC,WAAW,CAAGC,OAAO,CAACN,QAAQ,CAAC,CAErC,KAAM,CAAAO,kBAAkB,CAAGA,CAAA,GAAM,CAC7BN,WAAW,CAAC,IAAI,CAAC,CACrB,CAAC,CAED,KAAM,CAAAO,SAAS,CAAIC,GAAG,EAAK,CACvB,KAAM,CAAAC,MAAM,CAAGZ,OAAO,CAAGW,GAAG,CAACE,SAAS,CAAC,CAAC,CAAC,CACzCnB,QAAQ,CAACkB,MAAM,CAAC,CAChBX,UAAU,CAACW,MAAM,CAAC,CACtB,CAAC,CAED,KAAM,CAAAE,YAAY,CAAIC,IAAI,EAAK,CAC3B,OAAQA,IAAI,EACR,IAAK,QAAQ,CACT,MAAO,MAAM,CACjB,IAAK,UAAU,CACX,MAAO,UAAU,CACrB,IAAK,QAAQ,CACT,MAAO,QAAQ,CACnB,QACI,MAAO,MAAM,CACrB,CACJ,CAAC,CAED5C,SAAS,CAAC,IAAM,CACZ,GAAI,CAACwB,QAAQ,EAAIJ,KAAK,EAAIC,KAAK,EAAIC,MAAM,EAAIJ,UAAU,CAAE,CACrD,KAAM,CAAA2B,gBAAgB,CAAG3B,UAAU,SAAVA,UAAU,WAAVA,UAAU,CAAE4B,cAAc,CAAGvC,4BAA4B,CAACa,KAAK,CAAEC,KAAK,CAAEC,MAAM,CAAEJ,UAAU,CAAC6B,EAAE,CAAC,CAAG,EAAE,CAC5Hb,4BAA4B,CAACW,gBAAgB,CAAC,CAClD,CACJ,CAAC,CAAE,CAACrB,QAAQ,CAAEN,UAAU,CAAEE,KAAK,CAAEC,KAAK,CAAEC,MAAM,CAAC,CAAC,CAEhDtB,SAAS,CAAC,IAAM,CACZ,GAAI,MAAO,CAAA6B,OAAO,GAAK,QAAQ,EAAIA,OAAO,EAAIA,OAAO,CAACmB,QAAQ,CAAC,IAAI,CAAC,CAAE,CAClEhB,WAAW,CAACG,GAAG,CAACc,OAAO,CAAC,CAC5B,CACJ,CAAC,CAAE,CAACpB,OAAO,CAAC,CAAC,CAEb,mBACIhB,KAAA,CAAAF,SAAA,EAAAuC,QAAA,eACIzC,IAAA,CAACP,WAAW,EAACiD,EAAE,CAAE,CAAEC,EAAE,CAAE,CAAC,CAAEC,KAAK,CAAE,MAAO,CAAE,CAACC,IAAI,CAAC,OAAO,CAAAJ,QAAA,cACnDzC,IAAA,CAACN,aAAa,EACV4C,EAAE,CAAE7B,UAAU,CAACqC,IAAK,CACpBD,IAAI,CAAC,OAAO,CACZ9B,QAAQ,CAAEA,QAAS,CACnBoB,IAAI,CAAED,YAAY,CAACzB,UAAU,CAAC0B,IAAI,CAAE,CACpCY,WAAW,CAAEtC,UAAU,CAACsC,WAAY,CACpCC,SAAS,CAAE,CAAC,CAACvC,UAAU,CAACwC,IAAK,CAC7BA,IAAI,EAAA1C,gBAAA,CAAEE,UAAU,CAACwC,IAAI,UAAA1C,gBAAA,UAAAA,gBAAA,CAAI,CAAE,CAC3BG,KAAK,CAAEU,OAAQ,CACf0B,IAAI,CAAErC,UAAU,CAACqC,IAAK,CACtBhC,QAAQ,CAAGoC,CAAC,EAAK,CACb7B,UAAU,CAAC6B,CAAC,CAACC,MAAM,CAACzC,KAAK,CAAC,CAC1BI,QAAQ,CAACoC,CAAC,CAACC,MAAM,CAACzC,KAAK,CAAC,CAC5B,CAAE,CACF0C,UAAU,CAAE,CACRC,IAAI,EAAA7C,gBAAA,CAAEC,UAAU,CAAC4C,IAAI,UAAA7C,gBAAA,UAAAA,gBAAA,CAAI,CAAC,CAC1B8C,KAAK,CAAE,CACHC,MAAM,CAAE9C,UAAU,CAACwC,IAAI,CAAG,MAAM,CAAG,SACvC,CACJ,CAAE,CACL,CAAC,CACO,CAAC,CACbjC,UAAU,eACPhB,IAAA,CAACJ,gBAAgB,EACb4D,IAAI,CAAExC,UAAW,CACjBC,WAAW,CAAEA,WAAY,CACzBwC,QAAQ,CAAEvC,cAAe,CACzBwC,SAAS,CAAEA,CAACC,QAAQ,CAAEC,cAAc,GAAK,CACrCvC,UAAU,CAACsC,QAAQ,CAAC,CACpBxC,eAAe,CAACwC,QAAQ,CAAEC,cAAc,CAAC,CAC7C,CAAE,CACa,CACtB,cACD5D,IAAA,QAAK0B,GAAG,CAAEA,GAAI,CAAM,CAAC,CACpB,CAAAjB,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAE4B,cAAc,gBACvBrC,IAAA,CAACL,OAAO,EACJkE,IAAI,CAAElC,WAAY,CAClBL,QAAQ,CAAEA,QAAS,CACnBwC,OAAO,CAAEjC,kBAAmB,CAC5BkC,YAAY,CAAE,CACVC,QAAQ,CAAE,QAAQ,CAClBC,UAAU,CAAE,MAChB,CAAE,CACFC,eAAe,CAAE,CACbF,QAAQ,CAAE,KAAK,CACfC,UAAU,CAAE,MAChB,CAAE,CAAAxB,QAAA,cAEFzC,IAAA,CAACH,cAAc,EACXkB,QAAQ,CAAEA,QAAS,CACnBS,yBAAyB,CAAEA,yBAA0B,CACrD2C,oBAAoB,CAAGpC,GAAG,EAAK,CAC3BD,SAAS,CAACC,GAAG,CAAC,CACdF,kBAAkB,CAAC,CAAC,CACxB,CAAE,CACL,CAAC,CACG,CACZ,EACH,CAAC,CAEX,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}