{"ast":null,"code":"module.exports = function (hljs) {\n  var IDENT_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';\n  var IDENT_FUNC_RETURN_TYPE_RE = '([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)';\n  var HAXE_BASIC_TYPES = 'Int Float String Bool Dynamic Void Array ';\n  return {\n    aliases: ['hx'],\n    keywords: {\n      keyword: 'break case cast catch continue default do dynamic else enum extern ' + 'for function here if import in inline never new override package private get set ' + 'public return static super switch this throw trace try typedef untyped using var while ' + HAXE_BASIC_TYPES,\n      built_in: 'trace this',\n      literal: 'true false null _'\n    },\n    contains: [{\n      className: 'string',\n      // interpolate-able strings\n      begin: '\\'',\n      end: '\\'',\n      contains: [hljs.BACKSLASH_ESCAPE, {\n        className: 'subst',\n        // interpolation\n        begin: '\\\\$\\\\{',\n        end: '\\\\}'\n      }, {\n        className: 'subst',\n        // interpolation\n        begin: '\\\\$',\n        end: '\\\\W}'\n      }]\n    }, hljs.QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.C_NUMBER_MODE, {\n      className: 'meta',\n      // compiler meta\n      begin: '@:',\n      end: '$'\n    }, {\n      className: 'meta',\n      // compiler conditionals\n      begin: '#',\n      end: '$',\n      keywords: {\n        'meta-keyword': 'if else elseif end error'\n      }\n    }, {\n      className: 'type',\n      // function types\n      begin: ':[ \\t]*',\n      end: '[^A-Za-z0-9_ \\t\\\\->]',\n      excludeBegin: true,\n      excludeEnd: true,\n      relevance: 0\n    }, {\n      className: 'type',\n      // types\n      begin: ':[ \\t]*',\n      end: '\\\\W',\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'type',\n      // instantiation\n      begin: 'new *',\n      end: '\\\\W',\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'class',\n      // enums\n      beginKeywords: 'enum',\n      end: '\\\\{',\n      contains: [hljs.TITLE_MODE]\n    }, {\n      className: 'class',\n      // abstracts\n      beginKeywords: 'abstract',\n      end: '[\\\\{$]',\n      contains: [{\n        className: 'type',\n        begin: '\\\\(',\n        end: '\\\\)',\n        excludeBegin: true,\n        excludeEnd: true\n      }, {\n        className: 'type',\n        begin: 'from +',\n        end: '\\\\W',\n        excludeBegin: true,\n        excludeEnd: true\n      }, {\n        className: 'type',\n        begin: 'to +',\n        end: '\\\\W',\n        excludeBegin: true,\n        excludeEnd: true\n      }, hljs.TITLE_MODE],\n      keywords: {\n        keyword: 'abstract from to'\n      }\n    }, {\n      className: 'class',\n      // classes\n      begin: '\\\\b(class|interface) +',\n      end: '[\\\\{$]',\n      excludeEnd: true,\n      keywords: 'class interface',\n      contains: [{\n        className: 'keyword',\n        begin: '\\\\b(extends|implements) +',\n        keywords: 'extends implements',\n        contains: [{\n          className: 'type',\n          begin: hljs.IDENT_RE,\n          relevance: 0\n        }]\n      }, hljs.TITLE_MODE]\n    }, {\n      className: 'function',\n      beginKeywords: 'function',\n      end: '\\\\(',\n      excludeEnd: true,\n      illegal: '\\\\S',\n      contains: [hljs.TITLE_MODE]\n    }],\n    illegal: /<\\//\n  };\n};","map":{"version":3,"names":["module","exports","hljs","IDENT_RE","IDENT_FUNC_RETURN_TYPE_RE","HAXE_BASIC_TYPES","aliases","keywords","keyword","built_in","literal","contains","className","begin","end","BACKSLASH_ESCAPE","QUOTE_STRING_MODE","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","C_NUMBER_MODE","excludeBegin","excludeEnd","relevance","beginKeywords","TITLE_MODE","illegal"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/highlight.js/lib/languages/haxe.js"],"sourcesContent":["module.exports = function(hljs) {\n  var IDENT_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';\n  var IDENT_FUNC_RETURN_TYPE_RE = '([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)';\n\n  var HAXE_BASIC_TYPES = 'Int Float String Bool Dynamic Void Array ';\n\n  return {\n    aliases: ['hx'],\n    keywords: {\n      keyword: 'break case cast catch continue default do dynamic else enum extern ' +\n               'for function here if import in inline never new override package private get set ' +\n               'public return static super switch this throw trace try typedef untyped using var while ' +\n               HAXE_BASIC_TYPES,\n      built_in:\n        'trace this',\n      literal:\n        'true false null _'\n    },\n    contains: [\n      { className: 'string', // interpolate-able strings\n        begin: '\\'', end: '\\'',\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          { className: 'subst', // interpolation\n            begin: '\\\\$\\\\{', end: '\\\\}'\n          },\n          { className: 'subst', // interpolation\n            begin: '\\\\$', end: '\\\\W}'\n          }\n        ]\n      },\n      hljs.QUOTE_STRING_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.C_NUMBER_MODE,\n      { className: 'meta', // compiler meta\n        begin: '@:', end: '$'\n      },\n      { className: 'meta', // compiler conditionals\n        begin: '#', end: '$',\n        keywords: {'meta-keyword': 'if else elseif end error'}\n      },\n      { className: 'type', // function types\n        begin: ':[ \\t]*', end: '[^A-Za-z0-9_ \\t\\\\->]',\n        excludeBegin: true, excludeEnd: true,\n        relevance: 0\n      },\n      { className: 'type', // types\n        begin: ':[ \\t]*', end: '\\\\W',\n        excludeBegin: true, excludeEnd: true\n      },\n      { className: 'type', // instantiation\n        begin: 'new *', end: '\\\\W',\n        excludeBegin: true, excludeEnd: true\n      },\n      { className: 'class', // enums\n        beginKeywords: 'enum', end: '\\\\{',\n        contains: [\n          hljs.TITLE_MODE\n        ]\n      },\n      { className: 'class', // abstracts\n        beginKeywords: 'abstract', end: '[\\\\{$]',\n        contains: [\n          { className: 'type',\n            begin: '\\\\(', end: '\\\\)',\n            excludeBegin: true, excludeEnd: true\n          },\n          { className: 'type',\n            begin: 'from +', end: '\\\\W',\n            excludeBegin: true, excludeEnd: true\n          },\n          { className: 'type',\n            begin: 'to +', end: '\\\\W',\n            excludeBegin: true, excludeEnd: true\n          },\n          hljs.TITLE_MODE\n        ],\n        keywords: {\n          keyword: 'abstract from to'\n        }\n      },\n      { className: 'class', // classes\n        begin: '\\\\b(class|interface) +', end: '[\\\\{$]',  excludeEnd: true,\n        keywords: 'class interface',\n        contains: [\n          { className: 'keyword',\n            begin: '\\\\b(extends|implements) +',\n            keywords: 'extends implements',\n            contains: [\n              {\n                className: 'type',\n                begin: hljs.IDENT_RE,\n                relevance: 0\n              }\n            ]\n          },\n          hljs.TITLE_MODE\n        ]\n      },\n      { className: 'function',\n        beginKeywords: 'function', end: '\\\\(', excludeEnd: true,\n        illegal: '\\\\S',\n        contains: [\n          hljs.TITLE_MODE\n        ]\n      }\n    ],\n    illegal: /<\\//\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}