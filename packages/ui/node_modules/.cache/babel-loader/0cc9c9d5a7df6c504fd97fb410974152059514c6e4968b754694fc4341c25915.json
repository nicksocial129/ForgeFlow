{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExtpfeilConfiguration = exports.ExtpfeilMethods = void 0;\nvar Configuration_js_1 = require(\"../Configuration.js\");\nvar SymbolMap_js_1 = require(\"../SymbolMap.js\");\nvar AmsMethods_js_1 = require(\"../ams/AmsMethods.js\");\nvar NewcommandUtil_js_1 = __importDefault(require(\"../newcommand/NewcommandUtil.js\"));\nvar NewcommandConfiguration_js_1 = require(\"../newcommand/NewcommandConfiguration.js\");\nvar TexError_js_1 = __importDefault(require(\"../TexError.js\"));\nexports.ExtpfeilMethods = {};\nexports.ExtpfeilMethods.xArrow = AmsMethods_js_1.AmsMethods.xArrow;\nexports.ExtpfeilMethods.NewExtArrow = function (parser, name) {\n  var cs = parser.GetArgument(name);\n  var space = parser.GetArgument(name);\n  var chr = parser.GetArgument(name);\n  if (!cs.match(/^\\\\([a-z]+|.)$/i)) {\n    throw new TexError_js_1.default('NewextarrowArg1', 'First argument to %1 must be a control sequence name', name);\n  }\n  if (!space.match(/^(\\d+),(\\d+)$/)) {\n    throw new TexError_js_1.default('NewextarrowArg2', 'Second argument to %1 must be two integers separated by a comma', name);\n  }\n  if (!chr.match(/^(\\d+|0x[0-9A-F]+)$/i)) {\n    throw new TexError_js_1.default('NewextarrowArg3', 'Third argument to %1 must be a unicode character number', name);\n  }\n  cs = cs.substr(1);\n  var spaces = space.split(',');\n  NewcommandUtil_js_1.default.addMacro(parser, cs, exports.ExtpfeilMethods.xArrow, [parseInt(chr), parseInt(spaces[0]), parseInt(spaces[1])]);\n};\nnew SymbolMap_js_1.CommandMap('extpfeil', {\n  xtwoheadrightarrow: ['xArrow', 0x21A0, 12, 16],\n  xtwoheadleftarrow: ['xArrow', 0x219E, 17, 13],\n  xmapsto: ['xArrow', 0x21A6, 6, 7],\n  xlongequal: ['xArrow', 0x003D, 7, 7],\n  xtofrom: ['xArrow', 0x21C4, 12, 12],\n  Newextarrow: 'NewExtArrow'\n}, exports.ExtpfeilMethods);\nvar init = function (config) {\n  NewcommandConfiguration_js_1.NewcommandConfiguration.init(config);\n};\nexports.ExtpfeilConfiguration = Configuration_js_1.Configuration.create('extpfeil', {\n  handler: {\n    macro: ['extpfeil']\n  },\n  init: init\n});","map":{"version":3,"names":["Configuration_js_1","require","SymbolMap_js_1","AmsMethods_js_1","NewcommandUtil_js_1","__importDefault","NewcommandConfiguration_js_1","TexError_js_1","exports","ExtpfeilMethods","xArrow","AmsMethods","NewExtArrow","parser","name","cs","GetArgument","space","chr","match","default","substr","spaces","split","addMacro","parseInt","CommandMap","xtwoheadrightarrow","xtwoheadleftarrow","xmapsto","xlongequal","xtofrom","Newextarrow","init","config","NewcommandConfiguration","ExtpfeilConfiguration","Configuration","create","handler","macro"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/input/tex/extpfeil/ExtpfeilConfiguration.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the extpfeil package. Note that this is\n *     based on AMS package and Newcommand utilities.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration, ParserConfiguration} from '../Configuration.js';\nimport TexParser from '../TexParser.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {ParseMethod} from '../Types.js';\nimport {AmsMethods} from '../ams/AmsMethods.js';\nimport NewcommandUtil from '../newcommand/NewcommandUtil.js';\nimport {NewcommandConfiguration} from '../newcommand/NewcommandConfiguration.js';\nimport TexError from '../TexError.js';\n\n\n// Namespace\nexport let ExtpfeilMethods: Record<string, ParseMethod> = {};\n\nExtpfeilMethods.xArrow = AmsMethods.xArrow;\n\n/**\n * Implements \\Newextarrow to define a new arrow.\n * @param {TexParser} parser The current tex parser.\n * @param {string} name The name of the calling macro.\n */\nExtpfeilMethods.NewExtArrow = function(parser: TexParser, name: string) {\n  let cs = parser.GetArgument(name);\n  const space = parser.GetArgument(name);\n  const chr = parser.GetArgument(name);\n  if (!cs.match(/^\\\\([a-z]+|.)$/i)) {\n    throw new TexError('NewextarrowArg1',\n               'First argument to %1 must be a control sequence name', name);\n  }\n  if (!space.match(/^(\\d+),(\\d+)$/)) {\n    throw new TexError(\n      'NewextarrowArg2',\n      'Second argument to %1 must be two integers separated by a comma',\n      name);\n  }\n  if (!chr.match(/^(\\d+|0x[0-9A-F]+)$/i)) {\n    throw new TexError(\n      'NewextarrowArg3',\n      'Third argument to %1 must be a unicode character number',\n      name);\n  }\n  cs = cs.substr(1);\n  let spaces = space.split(',');\n  NewcommandUtil.addMacro(parser, cs, ExtpfeilMethods.xArrow,\n                          [parseInt(chr), parseInt(spaces[0]), parseInt(spaces[1])]);\n};\n\n\nnew CommandMap('extpfeil', {\n  xtwoheadrightarrow: ['xArrow', 0x21A0, 12, 16],\n  xtwoheadleftarrow:  ['xArrow', 0x219E, 17, 13],\n  xmapsto:            ['xArrow', 0x21A6, 6, 7],\n  xlongequal:         ['xArrow', 0x003D, 7, 7],\n  xtofrom:            ['xArrow', 0x21C4, 12, 12],\n  Newextarrow:        'NewExtArrow'\n}, ExtpfeilMethods);\n\n\nlet init = function(config: ParserConfiguration) {\n  NewcommandConfiguration.init(config);\n};\n\nexport const ExtpfeilConfiguration = Configuration.create(\n  'extpfeil', {\n    handler: {macro: ['extpfeil']},\n    init: init\n  }\n);\n"],"mappings":";;;;;;;;;;;AAyBA,IAAAA,kBAAA,GAAAC,OAAA;AAEA,IAAAC,cAAA,GAAAD,OAAA;AAEA,IAAAE,eAAA,GAAAF,OAAA;AACA,IAAAG,mBAAA,GAAAC,eAAA,CAAAJ,OAAA;AACA,IAAAK,4BAAA,GAAAL,OAAA;AACA,IAAAM,aAAA,GAAAF,eAAA,CAAAJ,OAAA;AAIWO,OAAA,CAAAC,eAAe,GAAgC,EAAE;AAE5DD,OAAA,CAAAC,eAAe,CAACC,MAAM,GAAGP,eAAA,CAAAQ,UAAU,CAACD,MAAM;AAO1CF,OAAA,CAAAC,eAAe,CAACG,WAAW,GAAG,UAASC,MAAiB,EAAEC,IAAY;EACpE,IAAIC,EAAE,GAAGF,MAAM,CAACG,WAAW,CAACF,IAAI,CAAC;EACjC,IAAMG,KAAK,GAAGJ,MAAM,CAACG,WAAW,CAACF,IAAI,CAAC;EACtC,IAAMI,GAAG,GAAGL,MAAM,CAACG,WAAW,CAACF,IAAI,CAAC;EACpC,IAAI,CAACC,EAAE,CAACI,KAAK,CAAC,iBAAiB,CAAC,EAAE;IAChC,MAAM,IAAIZ,aAAA,CAAAa,OAAQ,CAAC,iBAAiB,EACzB,sDAAsD,EAAEN,IAAI,CAAC;;EAE1E,IAAI,CAACG,KAAK,CAACE,KAAK,CAAC,eAAe,CAAC,EAAE;IACjC,MAAM,IAAIZ,aAAA,CAAAa,OAAQ,CAChB,iBAAiB,EACjB,iEAAiE,EACjEN,IAAI,CAAC;;EAET,IAAI,CAACI,GAAG,CAACC,KAAK,CAAC,sBAAsB,CAAC,EAAE;IACtC,MAAM,IAAIZ,aAAA,CAAAa,OAAQ,CAChB,iBAAiB,EACjB,yDAAyD,EACzDN,IAAI,CAAC;;EAETC,EAAE,GAAGA,EAAE,CAACM,MAAM,CAAC,CAAC,CAAC;EACjB,IAAIC,MAAM,GAAGL,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC;EAC7BnB,mBAAA,CAAAgB,OAAc,CAACI,QAAQ,CAACX,MAAM,EAAEE,EAAE,EAAEP,OAAA,CAAAC,eAAe,CAACC,MAAM,EAClC,CAACe,QAAQ,CAACP,GAAG,CAAC,EAAEO,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC,CAAC,EAAEG,QAAQ,CAACH,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACpF,CAAC;AAGD,IAAIpB,cAAA,CAAAwB,UAAU,CAAC,UAAU,EAAE;EACzBC,kBAAkB,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;EAC9CC,iBAAiB,EAAG,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;EAC9CC,OAAO,EAAa,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;EAC5CC,UAAU,EAAU,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;EAC5CC,OAAO,EAAa,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;EAC9CC,WAAW,EAAS;CACrB,EAAExB,OAAA,CAAAC,eAAe,CAAC;AAGnB,IAAIwB,IAAI,GAAG,SAAAA,CAASC,MAA2B;EAC7C5B,4BAAA,CAAA6B,uBAAuB,CAACF,IAAI,CAACC,MAAM,CAAC;AACtC,CAAC;AAEY1B,OAAA,CAAA4B,qBAAqB,GAAGpC,kBAAA,CAAAqC,aAAa,CAACC,MAAM,CACvD,UAAU,EAAE;EACVC,OAAO,EAAE;IAACC,KAAK,EAAE,CAAC,UAAU;EAAC,CAAC;EAC9BP,IAAI,EAAEA;CACP,CACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}