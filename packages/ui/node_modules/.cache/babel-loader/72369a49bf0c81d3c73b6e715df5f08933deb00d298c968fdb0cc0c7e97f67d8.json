{"ast":null,"code":"import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridExpandedSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nimport { unstable_gridFocusColumnGroupHeaderSelector } from '../focus';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../columnGrouping/gridColumnGroupsSelector';\nimport { unstable_gridHeaderFilteringEditFieldSelector, unstable_gridHeaderFilteringMenuSelector } from '../headerFiltering/gridHeaderFilteringSelectors';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { isEventTargetInPortal } from '../../../utils/domUtils';\nfunction enrichPageRowsWithPinnedRows(apiRef, rows) {\n  const pinnedRows = gridPinnedRowsSelector(apiRef) || {};\n  return [...(pinnedRows.top || []), ...rows, ...(pinnedRows.bottom || [])];\n}\nconst getLeftColumnIndex = _ref => {\n  let {\n    currentColIndex,\n    firstColIndex,\n    lastColIndex,\n    direction\n  } = _ref;\n  if (direction === 'rtl') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  }\n  return null;\n};\nconst getRightColumnIndex = _ref2 => {\n  let {\n    currentColIndex,\n    firstColIndex,\n    lastColIndex,\n    direction\n  } = _ref2;\n  if (direction === 'rtl') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  }\n  return null;\n};\n\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const initialCurrentPageRows = useGridVisibleRows(apiRef, props).rows;\n  const theme = useTheme();\n  const currentPageRows = React.useMemo(() => enrichPageRowsWithPinnedRows(apiRef, initialCurrentPageRows), [apiRef, initialCurrentPageRows]);\n  const headerFilteringEnabled =\n  // @ts-expect-error // TODO move relevant code to the `DataGridPro`\n  props.signature !== 'DataGrid' && props.unstable_headerFilters;\n\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {number} rowIndex index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * TODO replace with apiRef.current.moveFocusToRelativeCell()\n   */\n  const goToCell = React.useCallback(function (colIndex, rowId) {\n    let closestColumnToUse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'left';\n    const visibleSortedRows = gridExpandedSortedRowEntriesSelector(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === rowId);\n    logger.debug(\"Navigating to cell row \".concat(rowIndexRelativeToAllRows, \", col \").concat(colIndex));\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setCellFocus(rowId, field);\n  }, [apiRef, logger]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(\"Navigating to header col \".concat(colIndex));\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const goToHeaderFilter = React.useCallback((colIndex, event) => {\n    logger.debug(\"Navigating to header filter col \".concat(colIndex));\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFilterFocus(field, event);\n  }, [apiRef, logger]);\n  const goToGroupHeader = React.useCallback((colIndex, depth, event) => {\n    logger.debug(\"Navigating to header col \".concat(colIndex));\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const {\n      field\n    } = apiRef.current.getVisibleColumns()[colIndex];\n    apiRef.current.setColumnGroupHeaderFocus(field, depth, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    var _currentPageRows$rowI;\n    return (_currentPageRows$rowI = currentPageRows[rowIndex]) == null ? void 0 : _currentPageRows$rowI.id;\n  }, [currentPageRows]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(\".\".concat(gridClasses.columnHeaderTitleContainerContent));\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return;\n    }\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = currentPageRows.length > 0 ? 0 : null;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    const columnGroupMaxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            if (headerFilteringEnabled) {\n              goToHeaderFilter(colIndexBefore, event);\n            } else {\n              goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n            }\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (rightColIndex !== null) {\n            goToHeader(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (leftColIndex !== null) {\n            goToHeader(leftColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (columnGroupMaxDepth > 0) {\n            goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, headerFilteringEnabled, goToHeaderFilter, goToCell, getRowIdFromIndex, theme.direction, goToHeader, goToGroupHeader]);\n  const handleHeaderFilterKeyDown = React.useCallback((params, event) => {\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return;\n    }\n    const isEditing = unstable_gridHeaderFilteringEditFieldSelector(apiRef) === params.field;\n    const isHeaderMenuOpen = unstable_gridHeaderFilteringMenuSelector(apiRef) === params.field;\n    if (isEditing || isHeaderMenuOpen || !isNavigationKey(event.key)) {\n      return;\n    }\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          const rowId = getRowIdFromIndex(firstRowIndexInPage);\n          if (firstRowIndexInPage !== null && rowId != null) {\n            goToCell(colIndexBefore, rowId);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (rightColIndex !== null) {\n            goToHeaderFilter(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (leftColIndex !== null) {\n            goToHeaderFilter(leftColIndex, event);\n          } else {\n            apiRef.current.setColumnHeaderFilterFocus(params.field, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          goToHeader(colIndexBefore, event);\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeaderFilter(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeaderFilter(lastColIndex, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, goToHeaderFilter, theme.direction, goToHeader, goToCell, getRowIdFromIndex]);\n  const handleColumnGroupHeaderKeyDown = React.useCallback((params, event) => {\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return;\n    }\n    const focusedColumnGroup = unstable_gridFocusColumnGroupHeaderSelector(apiRef);\n    if (focusedColumnGroup === null) {\n      return;\n    }\n    const {\n      field: currentField,\n      depth: currentDepth\n    } = focusedColumnGroup;\n    const {\n      fields,\n      depth,\n      maxDepth\n    } = params;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const currentColIndex = apiRef.current.getColumnIndex(currentField);\n    const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (depth === maxDepth - 1) {\n            goToHeader(currentColIndex, event);\n          } else {\n            goToGroupHeader(currentColIndex, currentDepth + 1, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (depth > 0) {\n            goToGroupHeader(currentColIndex, currentDepth - 1, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;\n          if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {\n            goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const remainingLeftColumns = fields.indexOf(currentField);\n          if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {\n            goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToGroupHeader(firstColIndex, currentDepth, event);\n          break;\n        }\n      case 'End':\n        {\n          goToGroupHeader(lastColIndex, currentDepth, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n\n    // Get the most recent params because the cell mode may have changed by another listener\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    if (cellParams.cellMode === GridCellModes.Edit || !isNavigationKey(event.key)) {\n      return;\n    }\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    const dimensions = apiRef.current.getRootDimensions();\n    if (currentPageRows.length === 0 || !dimensions) {\n      return;\n    }\n    const direction = theme.direction;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else if (headerFilteringEnabled) {\n            goToHeaderFilter(colIndexBefore, event);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n          if (rightColIndex !== null) {\n            goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'left' : 'right');\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n          if (leftColIndex !== null) {\n            goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'right' : 'left');\n          }\n          break;\n        }\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n          break;\n        }\n      case ' ':\n        {\n          const field = params.field;\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n          const colDef = params.colDef;\n          if (colDef && colDef.type === 'treeDataGroup') {\n            break;\n          }\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, theme.direction, goToCell, getRowIdFromIndex, headerFilteringEnabled, goToHeaderFilter, goToHeader]);\n  const checkIfCanStartEditing = React.useCallback((initialValue, _ref3) => {\n    let {\n      event\n    } = _ref3;\n    if (event.key === ' ') {\n      // Space scrolls to the last row\n      return false;\n    }\n    return initialValue;\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'canStartEditing', checkIfCanStartEditing);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'headerFilterKeyDown', handleHeaderFilterKeyDown);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderKeyDown', handleColumnGroupHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n};","map":{"version":3,"names":["React","useTheme","gridVisibleColumnDefinitionsSelector","useGridLogger","useGridApiEventHandler","gridExpandedSortedRowEntriesSelector","useGridVisibleRows","GRID_CHECKBOX_SELECTION_COL_DEF","gridClasses","GridCellModes","isNavigationKey","GRID_DETAIL_PANEL_TOGGLE_FIELD","gridPinnedRowsSelector","unstable_gridFocusColumnGroupHeaderSelector","gridColumnGroupsHeaderMaxDepthSelector","unstable_gridHeaderFilteringEditFieldSelector","unstable_gridHeaderFilteringMenuSelector","useGridRegisterPipeProcessor","isEventTargetInPortal","enrichPageRowsWithPinnedRows","apiRef","rows","pinnedRows","top","bottom","getLeftColumnIndex","_ref","currentColIndex","firstColIndex","lastColIndex","direction","getRightColumnIndex","_ref2","useGridKeyboardNavigation","props","logger","initialCurrentPageRows","theme","currentPageRows","useMemo","headerFilteringEnabled","signature","unstable_headerFilters","goToCell","useCallback","colIndex","rowId","closestColumnToUse","arguments","length","undefined","visibleSortedRows","nextCellColSpanInfo","current","unstable_getCellColSpanInfo","spannedByColSpan","leftVisibleCellIndex","rightVisibleCellIndex","rowIndexRelativeToAllRows","findIndex","row","id","debug","concat","scrollToIndexes","rowIndex","field","getVisibleColumns","setCellFocus","goToHeader","event","setColumnHeaderFocus","goToHeaderFilter","setColumnHeaderFilterFocus","goToGroupHeader","depth","setColumnGroupHeaderFocus","getRowIdFromIndex","_currentPageRows$rowI","handleColumnHeaderKeyDown","params","headerTitleNode","currentTarget","querySelector","columnHeaderTitleContainerContent","isFromInsideContent","contains","target","dimensions","getRootDimensions","viewportPageSize","getViewportPageSize","colIndexBefore","getColumnIndex","firstRowIndexInPage","lastRowIndexInPage","columnGroupMaxDepth","shouldPreventDefault","key","rightColIndex","leftColIndex","Math","min","ctrlKey","metaKey","toggleColumnMenu","preventDefault","handleHeaderFilterKeyDown","isEditing","isHeaderMenuOpen","handleColumnGroupHeaderKeyDown","focusedColumnGroup","currentField","currentDepth","fields","maxDepth","remainingRightColumns","indexOf","remainingLeftColumns","handleCellKeyDown","cellParams","getCellParams","cellMode","Edit","canUpdateFocus","unstable_applyPipeProcessors","cell","rowIndexBefore","shiftKey","colDef","type","nextRowIndex","max","checkIfCanStartEditing","initialValue","_ref3"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/useGridKeyboardNavigation.js"],"sourcesContent":["import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { gridVisibleColumnDefinitionsSelector } from '../columns/gridColumnsSelector';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { gridExpandedSortedRowEntriesSelector } from '../filter/gridFilterSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { GRID_DETAIL_PANEL_TOGGLE_FIELD } from '../../../constants/gridDetailPanelToggleField';\nimport { gridPinnedRowsSelector } from '../rows/gridRowsSelector';\nimport { unstable_gridFocusColumnGroupHeaderSelector } from '../focus';\nimport { gridColumnGroupsHeaderMaxDepthSelector } from '../columnGrouping/gridColumnGroupsSelector';\nimport { unstable_gridHeaderFilteringEditFieldSelector, unstable_gridHeaderFilteringMenuSelector } from '../headerFiltering/gridHeaderFilteringSelectors';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { isEventTargetInPortal } from '../../../utils/domUtils';\nfunction enrichPageRowsWithPinnedRows(apiRef, rows) {\n  const pinnedRows = gridPinnedRowsSelector(apiRef) || {};\n  return [...(pinnedRows.top || []), ...rows, ...(pinnedRows.bottom || [])];\n}\nconst getLeftColumnIndex = ({\n  currentColIndex,\n  firstColIndex,\n  lastColIndex,\n  direction\n}) => {\n  if (direction === 'rtl') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  }\n  return null;\n};\nconst getRightColumnIndex = ({\n  currentColIndex,\n  firstColIndex,\n  lastColIndex,\n  direction\n}) => {\n  if (direction === 'rtl') {\n    if (currentColIndex > firstColIndex) {\n      return currentColIndex - 1;\n    }\n  } else if (direction === 'ltr') {\n    if (currentColIndex < lastColIndex) {\n      return currentColIndex + 1;\n    }\n  }\n  return null;\n};\n\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\nexport const useGridKeyboardNavigation = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridKeyboardNavigation');\n  const initialCurrentPageRows = useGridVisibleRows(apiRef, props).rows;\n  const theme = useTheme();\n  const currentPageRows = React.useMemo(() => enrichPageRowsWithPinnedRows(apiRef, initialCurrentPageRows), [apiRef, initialCurrentPageRows]);\n  const headerFilteringEnabled =\n  // @ts-expect-error // TODO move relevant code to the `DataGridPro`\n  props.signature !== 'DataGrid' && props.unstable_headerFilters;\n\n  /**\n   * @param {number} colIndex Index of the column to focus\n   * @param {number} rowIndex index of the row to focus\n   * @param {string} closestColumnToUse Which closest column cell to use when the cell is spanned by `colSpan`.\n   * TODO replace with apiRef.current.moveFocusToRelativeCell()\n   */\n  const goToCell = React.useCallback((colIndex, rowId, closestColumnToUse = 'left') => {\n    const visibleSortedRows = gridExpandedSortedRowEntriesSelector(apiRef);\n    const nextCellColSpanInfo = apiRef.current.unstable_getCellColSpanInfo(rowId, colIndex);\n    if (nextCellColSpanInfo && nextCellColSpanInfo.spannedByColSpan) {\n      if (closestColumnToUse === 'left') {\n        colIndex = nextCellColSpanInfo.leftVisibleCellIndex;\n      } else if (closestColumnToUse === 'right') {\n        colIndex = nextCellColSpanInfo.rightVisibleCellIndex;\n      }\n    }\n    // `scrollToIndexes` requires a rowIndex relative to all visible rows.\n    // Those rows do not include pinned rows, but pinned rows do not need scroll anyway.\n    const rowIndexRelativeToAllRows = visibleSortedRows.findIndex(row => row.id === rowId);\n    logger.debug(`Navigating to cell row ${rowIndexRelativeToAllRows}, col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex,\n      rowIndex: rowIndexRelativeToAllRows\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setCellFocus(rowId, field);\n  }, [apiRef, logger]);\n  const goToHeader = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFocus(field, event);\n  }, [apiRef, logger]);\n  const goToHeaderFilter = React.useCallback((colIndex, event) => {\n    logger.debug(`Navigating to header filter col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const field = apiRef.current.getVisibleColumns()[colIndex].field;\n    apiRef.current.setColumnHeaderFilterFocus(field, event);\n  }, [apiRef, logger]);\n  const goToGroupHeader = React.useCallback((colIndex, depth, event) => {\n    logger.debug(`Navigating to header col ${colIndex}`);\n    apiRef.current.scrollToIndexes({\n      colIndex\n    });\n    const {\n      field\n    } = apiRef.current.getVisibleColumns()[colIndex];\n    apiRef.current.setColumnGroupHeaderFocus(field, depth, event);\n  }, [apiRef, logger]);\n  const getRowIdFromIndex = React.useCallback(rowIndex => {\n    var _currentPageRows$rowI;\n    return (_currentPageRows$rowI = currentPageRows[rowIndex]) == null ? void 0 : _currentPageRows$rowI.id;\n  }, [currentPageRows]);\n  const handleColumnHeaderKeyDown = React.useCallback((params, event) => {\n    const headerTitleNode = event.currentTarget.querySelector(`.${gridClasses.columnHeaderTitleContainerContent}`);\n    const isFromInsideContent = !!headerTitleNode && headerTitleNode.contains(event.target);\n    if (isFromInsideContent && params.field !== GRID_CHECKBOX_SELECTION_COL_DEF.field) {\n      // When focus is on a nested input, keyboard events have no effect to avoid conflicts with native events.\n      // There is one exception for the checkBoxHeader\n      return;\n    }\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return;\n    }\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = currentPageRows.length > 0 ? 0 : null;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    const columnGroupMaxDepth = gridColumnGroupsHeaderMaxDepthSelector(apiRef);\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (firstRowIndexInPage !== null) {\n            if (headerFilteringEnabled) {\n              goToHeaderFilter(colIndexBefore, event);\n            } else {\n              goToCell(colIndexBefore, getRowIdFromIndex(firstRowIndexInPage));\n            }\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (rightColIndex !== null) {\n            goToHeader(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (leftColIndex !== null) {\n            goToHeader(leftColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (columnGroupMaxDepth > 0) {\n            goToGroupHeader(colIndexBefore, columnGroupMaxDepth - 1, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeader(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeader(lastColIndex, event);\n          break;\n        }\n      case 'Enter':\n        {\n          if (event.ctrlKey || event.metaKey) {\n            apiRef.current.toggleColumnMenu(params.field);\n          }\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, headerFilteringEnabled, goToHeaderFilter, goToCell, getRowIdFromIndex, theme.direction, goToHeader, goToGroupHeader]);\n  const handleHeaderFilterKeyDown = React.useCallback((params, event) => {\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return;\n    }\n    const isEditing = unstable_gridHeaderFilteringEditFieldSelector(apiRef) === params.field;\n    const isHeaderMenuOpen = unstable_gridHeaderFilteringMenuSelector(apiRef) === params.field;\n    if (isEditing || isHeaderMenuOpen || !isNavigationKey(event.key)) {\n      return;\n    }\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          const rowId = getRowIdFromIndex(firstRowIndexInPage);\n          if (firstRowIndexInPage !== null && rowId != null) {\n            goToCell(colIndexBefore, rowId);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (rightColIndex !== null) {\n            goToHeaderFilter(rightColIndex, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction: theme.direction\n          });\n          if (leftColIndex !== null) {\n            goToHeaderFilter(leftColIndex, event);\n          } else {\n            apiRef.current.setColumnHeaderFilterFocus(params.field, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          goToHeader(colIndexBefore, event);\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToHeaderFilter(firstColIndex, event);\n          break;\n        }\n      case 'End':\n        {\n          goToHeaderFilter(lastColIndex, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, goToHeaderFilter, theme.direction, goToHeader, goToCell, getRowIdFromIndex]);\n  const handleColumnGroupHeaderKeyDown = React.useCallback((params, event) => {\n    const dimensions = apiRef.current.getRootDimensions();\n    if (!dimensions) {\n      return;\n    }\n    const focusedColumnGroup = unstable_gridFocusColumnGroupHeaderSelector(apiRef);\n    if (focusedColumnGroup === null) {\n      return;\n    }\n    const {\n      field: currentField,\n      depth: currentDepth\n    } = focusedColumnGroup;\n    const {\n      fields,\n      depth,\n      maxDepth\n    } = params;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const currentColIndex = apiRef.current.getColumnIndex(currentField);\n    const colIndexBefore = currentField ? apiRef.current.getColumnIndex(currentField) : 0;\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          if (depth === maxDepth - 1) {\n            goToHeader(currentColIndex, event);\n          } else {\n            goToGroupHeader(currentColIndex, currentDepth + 1, event);\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (depth > 0) {\n            goToGroupHeader(currentColIndex, currentDepth - 1, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const remainingRightColumns = fields.length - fields.indexOf(currentField) - 1;\n          if (currentColIndex + remainingRightColumns + 1 <= lastColIndex) {\n            goToGroupHeader(currentColIndex + remainingRightColumns + 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const remainingLeftColumns = fields.indexOf(currentField);\n          if (currentColIndex - remainingLeftColumns - 1 >= firstColIndex) {\n            goToGroupHeader(currentColIndex - remainingLeftColumns - 1, currentDepth, event);\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (firstRowIndexInPage !== null && lastRowIndexInPage !== null) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(firstRowIndexInPage + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'Home':\n        {\n          goToGroupHeader(firstColIndex, currentDepth, event);\n          break;\n        }\n      case 'End':\n        {\n          goToGroupHeader(lastColIndex, currentDepth, event);\n          break;\n        }\n      case ' ':\n        {\n          // prevent Space event from scrolling\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows.length, goToHeader, goToGroupHeader, goToCell, getRowIdFromIndex]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (isEventTargetInPortal(event)) {\n      return;\n    }\n\n    // Get the most recent params because the cell mode may have changed by another listener\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    if (cellParams.cellMode === GridCellModes.Edit || !isNavigationKey(event.key)) {\n      return;\n    }\n    const canUpdateFocus = apiRef.current.unstable_applyPipeProcessors('canUpdateFocus', true, {\n      event,\n      cell: cellParams\n    });\n    if (!canUpdateFocus) {\n      return;\n    }\n    const dimensions = apiRef.current.getRootDimensions();\n    if (currentPageRows.length === 0 || !dimensions) {\n      return;\n    }\n    const direction = theme.direction;\n    const viewportPageSize = apiRef.current.getViewportPageSize();\n    const colIndexBefore = params.field ? apiRef.current.getColumnIndex(params.field) : 0;\n    const rowIndexBefore = currentPageRows.findIndex(row => row.id === params.id);\n    const firstRowIndexInPage = 0;\n    const lastRowIndexInPage = currentPageRows.length - 1;\n    const firstColIndex = 0;\n    const lastColIndex = gridVisibleColumnDefinitionsSelector(apiRef).length - 1;\n    let shouldPreventDefault = true;\n    switch (event.key) {\n      case 'ArrowDown':\n        {\n          // \"Enter\" is only triggered by the row / cell editing feature\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore + 1));\n          }\n          break;\n        }\n      case 'ArrowUp':\n        {\n          if (rowIndexBefore > firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(rowIndexBefore - 1));\n          } else if (headerFilteringEnabled) {\n            goToHeaderFilter(colIndexBefore, event);\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'ArrowRight':\n        {\n          const rightColIndex = getRightColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n          if (rightColIndex !== null) {\n            goToCell(rightColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'left' : 'right');\n          }\n          break;\n        }\n      case 'ArrowLeft':\n        {\n          const leftColIndex = getLeftColumnIndex({\n            currentColIndex: colIndexBefore,\n            firstColIndex,\n            lastColIndex,\n            direction\n          });\n          if (leftColIndex !== null) {\n            goToCell(leftColIndex, getRowIdFromIndex(rowIndexBefore), direction === 'rtl' ? 'right' : 'left');\n          }\n          break;\n        }\n      case 'Tab':\n        {\n          // \"Tab\" is only triggered by the row / cell editing feature\n          if (event.shiftKey && colIndexBefore > firstColIndex) {\n            goToCell(colIndexBefore - 1, getRowIdFromIndex(rowIndexBefore), 'left');\n          } else if (!event.shiftKey && colIndexBefore < lastColIndex) {\n            goToCell(colIndexBefore + 1, getRowIdFromIndex(rowIndexBefore), 'right');\n          }\n          break;\n        }\n      case ' ':\n        {\n          const field = params.field;\n          if (field === GRID_DETAIL_PANEL_TOGGLE_FIELD) {\n            break;\n          }\n          const colDef = params.colDef;\n          if (colDef && colDef.type === 'treeDataGroup') {\n            break;\n          }\n          if (!event.shiftKey && rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageDown':\n        {\n          if (rowIndexBefore < lastRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(Math.min(rowIndexBefore + viewportPageSize, lastRowIndexInPage)));\n          }\n          break;\n        }\n      case 'PageUp':\n        {\n          // Go to the first row before going to header\n          const nextRowIndex = Math.max(rowIndexBefore - viewportPageSize, firstRowIndexInPage);\n          if (nextRowIndex !== rowIndexBefore && nextRowIndex >= firstRowIndexInPage) {\n            goToCell(colIndexBefore, getRowIdFromIndex(nextRowIndex));\n          } else {\n            goToHeader(colIndexBefore, event);\n          }\n          break;\n        }\n      case 'Home':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(firstColIndex, getRowIdFromIndex(firstRowIndexInPage));\n          } else {\n            goToCell(firstColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      case 'End':\n        {\n          if (event.ctrlKey || event.metaKey || event.shiftKey) {\n            goToCell(lastColIndex, getRowIdFromIndex(lastRowIndexInPage));\n          } else {\n            goToCell(lastColIndex, getRowIdFromIndex(rowIndexBefore));\n          }\n          break;\n        }\n      default:\n        {\n          shouldPreventDefault = false;\n        }\n    }\n    if (shouldPreventDefault) {\n      event.preventDefault();\n    }\n  }, [apiRef, currentPageRows, theme.direction, goToCell, getRowIdFromIndex, headerFilteringEnabled, goToHeaderFilter, goToHeader]);\n  const checkIfCanStartEditing = React.useCallback((initialValue, {\n    event\n  }) => {\n    if (event.key === ' ') {\n      // Space scrolls to the last row\n      return false;\n    }\n    return initialValue;\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'canStartEditing', checkIfCanStartEditing);\n  useGridApiEventHandler(apiRef, 'columnHeaderKeyDown', handleColumnHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'headerFilterKeyDown', handleHeaderFilterKeyDown);\n  useGridApiEventHandler(apiRef, 'columnGroupHeaderKeyDown', handleColumnGroupHeaderKeyDown);\n  useGridApiEventHandler(apiRef, 'cellKeyDown', handleCellKeyDown);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}