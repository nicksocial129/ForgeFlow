{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AutoOpen = void 0;\nvar StackItem_js_1 = require(\"../StackItem.js\");\nvar ParseUtil_js_1 = __importDefault(require(\"../ParseUtil.js\"));\nvar NodeUtil_js_1 = __importDefault(require(\"../NodeUtil.js\"));\nvar TexParser_js_1 = __importDefault(require(\"../TexParser.js\"));\nvar AutoOpen = function (_super) {\n  __extends(AutoOpen, _super);\n  function AutoOpen() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.openCount = 0;\n    return _this;\n  }\n  Object.defineProperty(AutoOpen.prototype, \"kind\", {\n    get: function () {\n      return 'auto open';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AutoOpen.prototype, \"isOpen\", {\n    get: function () {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  AutoOpen.prototype.toMml = function () {\n    var parser = this.factory.configuration.parser;\n    var right = this.getProperty('right');\n    if (this.getProperty('smash')) {\n      var mml_1 = _super.prototype.toMml.call(this);\n      var smash = parser.create('node', 'mpadded', [mml_1], {\n        height: 0,\n        depth: 0\n      });\n      this.Clear();\n      this.Push(parser.create('node', 'TeXAtom', [smash]));\n    }\n    if (right) {\n      this.Push(new TexParser_js_1.default(right, parser.stack.env, parser.configuration).mml());\n    }\n    var mml = ParseUtil_js_1.default.fenced(this.factory.configuration, this.getProperty('open'), _super.prototype.toMml.call(this), this.getProperty('close'), this.getProperty('big'));\n    NodeUtil_js_1.default.removeProperties(mml, 'open', 'close', 'texClass');\n    return mml;\n  };\n  AutoOpen.prototype.checkItem = function (item) {\n    if (item.isKind('mml') && item.Size() === 1) {\n      var mml = item.toMml();\n      if (mml.isKind('mo') && mml.getText() === this.getProperty('open')) {\n        this.openCount++;\n      }\n    }\n    var close = item.getProperty('autoclose');\n    if (close && close === this.getProperty('close') && !this.openCount--) {\n      if (this.getProperty('ignore')) {\n        this.Clear();\n        return [[], true];\n      }\n      return [[this.toMml()], true];\n    }\n    return _super.prototype.checkItem.call(this, item);\n  };\n  AutoOpen.errors = Object.assign(Object.create(StackItem_js_1.BaseItem.errors), {\n    'stop': ['ExtraOrMissingDelims', 'Extra open or missing close delimiter']\n  });\n  return AutoOpen;\n}(StackItem_js_1.BaseItem);\nexports.AutoOpen = AutoOpen;","map":{"version":3,"names":["StackItem_js_1","require","ParseUtil_js_1","__importDefault","NodeUtil_js_1","TexParser_js_1","AutoOpen","_super","__extends","_this","apply","arguments","openCount","Object","defineProperty","prototype","get","toMml","parser","factory","configuration","right","getProperty","mml_1","call","smash","create","height","depth","Clear","Push","default","stack","env","mml","fenced","removeProperties","checkItem","item","isKind","Size","getText","close","errors","assign","BaseItem","exports"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/input/tex/physics/PhysicsItems.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2009-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Stack items for the physics package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\n\nimport {CheckType, BaseItem, StackItem} from '../StackItem.js';\nimport ParseUtil from '../ParseUtil.js';\nimport NodeUtil from '../NodeUtil.js';\nimport TexParser from '../TexParser.js';\nimport {AbstractMmlTokenNode} from '../../../core/MmlTree/MmlNode.js';\n\nexport class AutoOpen extends BaseItem {\n\n  /**\n   * @override\n   */\n  protected static errors = Object.assign(Object.create(BaseItem.errors), {\n    'stop': ['ExtraOrMissingDelims', 'Extra open or missing close delimiter']\n  });\n\n  /**\n   * The number of unpaired open delimiters that need to be matched before\n   *   a close delimiter will close this item. (#2831)\n   */\n  protected openCount: number = 0;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'auto open';\n  }\n\n\n  /**\n   * @override\n   */\n  get isOpen() {\n    return true;\n  }\n\n\n  /**\n   * @override\n   */\n  public toMml() {\n    // Smash and right/left\n    let parser = this.factory.configuration.parser;\n    let right = this.getProperty('right') as string;\n    if (this.getProperty('smash')) {\n      let mml = super.toMml();\n      const smash = parser.create('node', 'mpadded', [mml],\n                                  {height: 0, depth: 0});\n      this.Clear();\n      this.Push(parser.create('node', 'TeXAtom', [smash]));\n    }\n    if (right) {\n      this.Push(new TexParser(right, parser.stack.env,\n                              parser.configuration).mml());\n    }\n    let mml = ParseUtil.fenced(\n      this.factory.configuration,\n      this.getProperty('open') as string,\n      super.toMml(),\n      this.getProperty('close') as string,\n      this.getProperty('big') as string\n    );\n    //\n    //  Remove fence markers that would cause it to be TeX class INNER,\n    //  so it is treated as a regular mrow when setting the tex class (#2760)\n    //\n    NodeUtil.removeProperties(mml, 'open', 'close', 'texClass');\n    return mml;\n  }\n\n  /**\n   * @override\n   */\n  public checkItem(item: StackItem): CheckType {\n    //\n    //  Check for nested open delimiters (#2831)\n    //\n    if (item.isKind('mml') && item.Size() === 1) {\n      const mml = item.toMml();\n      if (mml.isKind('mo') && (mml as AbstractMmlTokenNode).getText() === this.getProperty('open')) {\n        this.openCount++;\n      }\n    }\n    let close = item.getProperty('autoclose');\n    if (close && close === this.getProperty('close') && !this.openCount--) {\n      if (this.getProperty('ignore')) {\n        this.Clear();\n        return [[], true];\n      }\n      return [[this.toMml()], true];\n    }\n    return super.checkItem(item);\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}