{"ast":null,"code":"'use strict';\n\nmodule.exports = stylus;\nstylus.displayName = 'stylus';\nstylus.aliases = [];\nfunction stylus(Prism) {\n  ;\n  (function (Prism) {\n    var inside = {\n      url: /url\\(([\"']?).*?\\1\\)/i,\n      string: {\n        pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n        greedy: true\n      },\n      interpolation: null,\n      // See below\n      func: null,\n      // See below\n      important: /\\B!(?:important|optional)\\b/i,\n      keyword: {\n        pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n        lookbehind: true\n      },\n      hexcode: /#[\\da-f]{3,6}/i,\n      number: /\\b\\d+(?:\\.\\d+)?%?/,\n      boolean: /\\b(?:true|false)\\b/,\n      operator: [\n      // We want non-word chars around \"-\" because it is\n      // accepted in property names.\n      /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/],\n      punctuation: /[{}()\\[\\];:,]/\n    };\n    inside['interpolation'] = {\n      pattern: /\\{[^\\r\\n}:]+\\}/,\n      alias: 'variable',\n      inside: {\n        delimiter: {\n          pattern: /^{|}$/,\n          alias: 'punctuation'\n        },\n        rest: inside\n      }\n    };\n    inside['func'] = {\n      pattern: /[\\w-]+\\([^)]*\\).*/,\n      inside: {\n        function: /^[^(]+/,\n        rest: inside\n      }\n    };\n    Prism.languages.stylus = {\n      comment: {\n        pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      },\n      'atrule-declaration': {\n        pattern: /(^\\s*)@.+/m,\n        lookbehind: true,\n        inside: {\n          atrule: /^@[\\w-]+/,\n          rest: inside\n        }\n      },\n      'variable-declaration': {\n        pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n        lookbehind: true,\n        inside: {\n          variable: /^\\S+/,\n          rest: inside\n        }\n      },\n      statement: {\n        pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^\\S+/,\n          rest: inside\n        }\n      },\n      // A property/value pair cannot end with a comma or a brace\n      // It cannot have indented content unless it ended with a semicolon\n      'property-declaration': {\n        pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n        lookbehind: true,\n        inside: {\n          property: {\n            pattern: /^[^\\s:]+/,\n            inside: {\n              interpolation: inside.interpolation\n            }\n          },\n          rest: inside\n        }\n      },\n      // A selector can contain parentheses only as part of a pseudo-element\n      // It can span multiple lines.\n      // It must end with a comma or an accolade or have indented content.\n      selector: {\n        pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n        lookbehind: true,\n        inside: {\n          interpolation: inside.interpolation,\n          punctuation: /[{},]/\n        }\n      },\n      func: inside.func,\n      string: inside.string,\n      interpolation: inside.interpolation,\n      punctuation: /[{}()\\[\\];:.]/\n    };\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","stylus","displayName","aliases","Prism","inside","url","string","pattern","greedy","interpolation","func","important","keyword","lookbehind","hexcode","number","boolean","operator","punctuation","alias","delimiter","rest","function","languages","comment","atrule","variable","statement","property","selector"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/refractor/lang/stylus.js"],"sourcesContent":["'use strict'\n\nmodule.exports = stylus\nstylus.displayName = 'stylus'\nstylus.aliases = []\nfunction stylus(Prism) {\n  ;(function(Prism) {\n    var inside = {\n      url: /url\\(([\"']?).*?\\1\\)/i,\n      string: {\n        pattern: /(\"|')(?:(?!\\1)[^\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\\1/,\n        greedy: true\n      },\n      interpolation: null,\n      // See below\n      func: null,\n      // See below\n      important: /\\B!(?:important|optional)\\b/i,\n      keyword: {\n        pattern: /(^|\\s+)(?:(?:if|else|for|return|unless)(?=\\s+|$)|@[\\w-]+)/,\n        lookbehind: true\n      },\n      hexcode: /#[\\da-f]{3,6}/i,\n      number: /\\b\\d+(?:\\.\\d+)?%?/,\n      boolean: /\\b(?:true|false)\\b/,\n      operator: [\n        // We want non-word chars around \"-\" because it is\n        // accepted in property names.\n        /~|[+!\\/%<>?=]=?|[-:]=|\\*[*=]?|\\.+|&&|\\|\\||\\B-\\B|\\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\\b/\n      ],\n      punctuation: /[{}()\\[\\];:,]/\n    }\n    inside['interpolation'] = {\n      pattern: /\\{[^\\r\\n}:]+\\}/,\n      alias: 'variable',\n      inside: {\n        delimiter: {\n          pattern: /^{|}$/,\n          alias: 'punctuation'\n        },\n        rest: inside\n      }\n    }\n    inside['func'] = {\n      pattern: /[\\w-]+\\([^)]*\\).*/,\n      inside: {\n        function: /^[^(]+/,\n        rest: inside\n      }\n    }\n    Prism.languages.stylus = {\n      comment: {\n        pattern: /(^|[^\\\\])(\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n        lookbehind: true\n      },\n      'atrule-declaration': {\n        pattern: /(^\\s*)@.+/m,\n        lookbehind: true,\n        inside: {\n          atrule: /^@[\\w-]+/,\n          rest: inside\n        }\n      },\n      'variable-declaration': {\n        pattern: /(^[ \\t]*)[\\w$-]+\\s*.?=[ \\t]*(?:(?:\\{[^}]*\\}|.+)|$)/m,\n        lookbehind: true,\n        inside: {\n          variable: /^\\S+/,\n          rest: inside\n        }\n      },\n      statement: {\n        pattern: /(^[ \\t]*)(?:if|else|for|return|unless)[ \\t]+.+/m,\n        lookbehind: true,\n        inside: {\n          keyword: /^\\S+/,\n          rest: inside\n        }\n      },\n      // A property/value pair cannot end with a comma or a brace\n      // It cannot have indented content unless it ended with a semicolon\n      'property-declaration': {\n        pattern: /((?:^|\\{)([ \\t]*))(?:[\\w-]|\\{[^}\\r\\n]+\\})+(?:\\s*:\\s*|[ \\t]+)[^{\\r\\n]*(?:;|[^{\\r\\n,](?=$)(?!(\\r?\\n|\\r)(?:\\{|\\2[ \\t]+)))/m,\n        lookbehind: true,\n        inside: {\n          property: {\n            pattern: /^[^\\s:]+/,\n            inside: {\n              interpolation: inside.interpolation\n            }\n          },\n          rest: inside\n        }\n      },\n      // A selector can contain parentheses only as part of a pseudo-element\n      // It can span multiple lines.\n      // It must end with a comma or an accolade or have indented content.\n      selector: {\n        pattern: /(^[ \\t]*)(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)(?:(?:\\r?\\n|\\r)(?:\\1(?:(?=\\S)(?:[^{}\\r\\n:()]|::?[\\w-]+(?:\\([^)\\r\\n]*\\))?|\\{[^}\\r\\n]+\\})+)))*(?:,$|\\{|(?=(?:\\r?\\n|\\r)(?:\\{|\\1[ \\t]+)))/m,\n        lookbehind: true,\n        inside: {\n          interpolation: inside.interpolation,\n          punctuation: /[{},]/\n        }\n      },\n      func: inside.func,\n      string: inside.string,\n      interpolation: inside.interpolation,\n      punctuation: /[{}()\\[\\];:.]/\n    }\n  })(Prism)\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,MAAM;AACvBA,MAAM,CAACC,WAAW,GAAG,QAAQ;AAC7BD,MAAM,CAACE,OAAO,GAAG,EAAE;AACnB,SAASF,MAAMA,CAACG,KAAK,EAAE;EACrB;EAAC,CAAC,UAASA,KAAK,EAAE;IAChB,IAAIC,MAAM,GAAG;MACXC,GAAG,EAAE,sBAAsB;MAC3BC,MAAM,EAAE;QACNC,OAAO,EAAE,+CAA+C;QACxDC,MAAM,EAAE;MACV,CAAC;MACDC,aAAa,EAAE,IAAI;MACnB;MACAC,IAAI,EAAE,IAAI;MACV;MACAC,SAAS,EAAE,8BAA8B;MACzCC,OAAO,EAAE;QACPL,OAAO,EAAE,2DAA2D;QACpEM,UAAU,EAAE;MACd,CAAC;MACDC,OAAO,EAAE,gBAAgB;MACzBC,MAAM,EAAE,mBAAmB;MAC3BC,OAAO,EAAE,oBAAoB;MAC7BC,QAAQ,EAAE;MACR;MACA;MACA,kGAAkG,CACnG;MACDC,WAAW,EAAE;IACf,CAAC;IACDd,MAAM,CAAC,eAAe,CAAC,GAAG;MACxBG,OAAO,EAAE,gBAAgB;MACzBY,KAAK,EAAE,UAAU;MACjBf,MAAM,EAAE;QACNgB,SAAS,EAAE;UACTb,OAAO,EAAE,OAAO;UAChBY,KAAK,EAAE;QACT,CAAC;QACDE,IAAI,EAAEjB;MACR;IACF,CAAC;IACDA,MAAM,CAAC,MAAM,CAAC,GAAG;MACfG,OAAO,EAAE,mBAAmB;MAC5BH,MAAM,EAAE;QACNkB,QAAQ,EAAE,QAAQ;QAClBD,IAAI,EAAEjB;MACR;IACF,CAAC;IACDD,KAAK,CAACoB,SAAS,CAACvB,MAAM,GAAG;MACvBwB,OAAO,EAAE;QACPjB,OAAO,EAAE,oCAAoC;QAC7CM,UAAU,EAAE;MACd,CAAC;MACD,oBAAoB,EAAE;QACpBN,OAAO,EAAE,YAAY;QACrBM,UAAU,EAAE,IAAI;QAChBT,MAAM,EAAE;UACNqB,MAAM,EAAE,UAAU;UAClBJ,IAAI,EAAEjB;QACR;MACF,CAAC;MACD,sBAAsB,EAAE;QACtBG,OAAO,EAAE,qDAAqD;QAC9DM,UAAU,EAAE,IAAI;QAChBT,MAAM,EAAE;UACNsB,QAAQ,EAAE,MAAM;UAChBL,IAAI,EAAEjB;QACR;MACF,CAAC;MACDuB,SAAS,EAAE;QACTpB,OAAO,EAAE,iDAAiD;QAC1DM,UAAU,EAAE,IAAI;QAChBT,MAAM,EAAE;UACNQ,OAAO,EAAE,MAAM;UACfS,IAAI,EAAEjB;QACR;MACF,CAAC;MACD;MACA;MACA,sBAAsB,EAAE;QACtBG,OAAO,EAAE,yHAAyH;QAClIM,UAAU,EAAE,IAAI;QAChBT,MAAM,EAAE;UACNwB,QAAQ,EAAE;YACRrB,OAAO,EAAE,UAAU;YACnBH,MAAM,EAAE;cACNK,aAAa,EAAEL,MAAM,CAACK;YACxB;UACF,CAAC;UACDY,IAAI,EAAEjB;QACR;MACF,CAAC;MACD;MACA;MACA;MACAyB,QAAQ,EAAE;QACRtB,OAAO,EAAE,sNAAsN;QAC/NM,UAAU,EAAE,IAAI;QAChBT,MAAM,EAAE;UACNK,aAAa,EAAEL,MAAM,CAACK,aAAa;UACnCS,WAAW,EAAE;QACf;MACF,CAAC;MACDR,IAAI,EAAEN,MAAM,CAACM,IAAI;MACjBJ,MAAM,EAAEF,MAAM,CAACE,MAAM;MACrBG,aAAa,EAAEL,MAAM,CAACK,aAAa;MACnCS,WAAW,EAAE;IACf,CAAC;EACH,CAAC,EAAEf,KAAK,CAAC;AACX"},"metadata":{},"sourceType":"script","externalDependencies":[]}