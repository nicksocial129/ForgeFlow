{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.asyncLoad = void 0;\nvar mathjax_js_1 = require(\"../mathjax.js\");\nfunction asyncLoad(name) {\n  if (!mathjax_js_1.mathjax.asyncLoad) {\n    return Promise.reject(\"Can't load '\".concat(name, \"': No asyncLoad method specified\"));\n  }\n  return new Promise(function (ok, fail) {\n    var result = mathjax_js_1.mathjax.asyncLoad(name);\n    if (result instanceof Promise) {\n      result.then(function (value) {\n        return ok(value);\n      }).catch(function (err) {\n        return fail(err);\n      });\n    } else {\n      ok(result);\n    }\n  });\n}\nexports.asyncLoad = asyncLoad;","map":{"version":3,"names":["mathjax_js_1","require","asyncLoad","name","mathjax","Promise","reject","concat","ok","fail","result","then","value","catch","err","exports"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/util/AsyncLoad.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements asynchronous loading of files\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {mathjax} from '../mathjax.js';\n\n/**\n * Load a file asynchronously using the mathjax.asynchLoad method, if there is one\n *\n * @param {string} name  The name of the file to load\n * @return {Promise}     The promise that is satisfied when the file is loaded\n */\nexport function asyncLoad(name: string): Promise<void> {\n  if (!mathjax.asyncLoad) {\n    return Promise.reject(`Can't load '${name}': No asyncLoad method specified`);\n  }\n  return new Promise((ok, fail) => {\n    const result = mathjax.asyncLoad(name);\n    if (result instanceof Promise) {\n      result.then((value: any) => ok(value)).catch((err: Error) => fail(err));\n    } else {\n      ok(result);\n    }\n  });\n}\n"],"mappings":";;;;;;AAuBA,IAAAA,YAAA,GAAAC,OAAA;AAQA,SAAgBC,SAASA,CAACC,IAAY;EACpC,IAAI,CAACH,YAAA,CAAAI,OAAO,CAACF,SAAS,EAAE;IACtB,OAAOG,OAAO,CAACC,MAAM,CAAC,eAAAC,MAAA,CAAeJ,IAAI,qCAAkC,CAAC;;EAE9E,OAAO,IAAIE,OAAO,CAAC,UAACG,EAAE,EAAEC,IAAI;IAC1B,IAAMC,MAAM,GAAGV,YAAA,CAAAI,OAAO,CAACF,SAAS,CAACC,IAAI,CAAC;IACtC,IAAIO,MAAM,YAAYL,OAAO,EAAE;MAC7BK,MAAM,CAACC,IAAI,CAAC,UAACC,KAAU;QAAK,OAAAJ,EAAE,CAACI,KAAK,CAAC;MAAT,CAAS,CAAC,CAACC,KAAK,CAAC,UAACC,GAAU;QAAK,OAAAL,IAAI,CAACK,GAAG,CAAC;MAAT,CAAS,CAAC;KACxE,MAAM;MACLN,EAAE,CAACE,MAAM,CAAC;;EAEd,CAAC,CAAC;AACJ;AAZAK,OAAA,CAAAb,SAAA,GAAAA,SAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}