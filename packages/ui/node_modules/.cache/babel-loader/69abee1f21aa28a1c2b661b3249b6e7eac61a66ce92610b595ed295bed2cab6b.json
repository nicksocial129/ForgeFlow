{"ast":null,"code":"import moment from'moment';export const getUniqueNodeId=(nodeData,nodes)=>{// Get amount of same nodes\nlet totalSameNodes=0;for(let i=0;i<nodes.length;i+=1){const node=nodes[i];if(node.data.name===nodeData.name){totalSameNodes+=1;}}// Get unique id\nlet nodeId=\"\".concat(nodeData.name,\"_\").concat(totalSameNodes);for(let i=0;i<nodes.length;i+=1){const node=nodes[i];if(node.id===nodeId){totalSameNodes+=1;nodeId=\"\".concat(nodeData.name,\"_\").concat(totalSameNodes);}}return nodeId;};export const initializeDefaultNodeData=nodeParams=>{const initialValues={};for(let i=0;i<nodeParams.length;i+=1){const input=nodeParams[i];initialValues[input.name]=input.default||'';}return initialValues;};export const initNode=(nodeData,newNodeId)=>{const inputAnchors=[];const inputParams=[];const incoming=nodeData.inputs?nodeData.inputs.length:0;const outgoing=1;const whitelistTypes=['asyncOptions','options','multiOptions','datagrid','string','number','boolean','password','json','code','date','file','folder'];// Inputs\nfor(let i=0;i<incoming;i+=1){const newInput={...nodeData.inputs[i],id:\"\".concat(newNodeId,\"-input-\").concat(nodeData.inputs[i].name,\"-\").concat(nodeData.inputs[i].type)};if(whitelistTypes.includes(nodeData.inputs[i].type)){inputParams.push(newInput);}else{inputAnchors.push(newInput);}}// Credential\nif(nodeData.credential){const newInput={...nodeData.credential,id:\"\".concat(newNodeId,\"-input-\").concat(nodeData.credential.name,\"-\").concat(nodeData.credential.type)};inputParams.unshift(newInput);}// Outputs\nconst outputAnchors=[];for(let i=0;i<outgoing;i+=1){if(nodeData.outputs&&nodeData.outputs.length){const options=[];for(let j=0;j<nodeData.outputs.length;j+=1){var _nodeData$outputs$j$b;let baseClasses='';let type='';const outputBaseClasses=(_nodeData$outputs$j$b=nodeData.outputs[j].baseClasses)!==null&&_nodeData$outputs$j$b!==void 0?_nodeData$outputs$j$b:[];if(outputBaseClasses.length>1){baseClasses=outputBaseClasses.join('|');type=outputBaseClasses.join(' | ');}else if(outputBaseClasses.length===1){baseClasses=outputBaseClasses[0];type=outputBaseClasses[0];}const newOutputOption={id:\"\".concat(newNodeId,\"-output-\").concat(nodeData.outputs[j].name,\"-\").concat(baseClasses),name:nodeData.outputs[j].name,label:nodeData.outputs[j].label,type};options.push(newOutputOption);}const newOutput={name:'output',label:'Output',type:'options',options,default:nodeData.outputs[0].name};outputAnchors.push(newOutput);}else{const newOutput={id:\"\".concat(newNodeId,\"-output-\").concat(nodeData.name,\"-\").concat(nodeData.baseClasses.join('|')),name:nodeData.name,label:nodeData.type,type:nodeData.baseClasses.join(' | ')};outputAnchors.push(newOutput);}}/* Initial\n    inputs = [\n        {\n            label: 'field_label_1',\n            name: 'string'\n        },\n        {\n            label: 'field_label_2',\n            name: 'CustomType'\n        }\n    ]\n\n    =>  Convert to inputs, inputParams, inputAnchors\n\n    =>  inputs = { 'field': 'defaultvalue' } // Turn into inputs object with default values\n    \n    =>  // For inputs that are part of whitelistTypes\n        inputParams = [\n            {\n                label: 'field_label_1',\n                name: 'string'\n            }\n        ]\n\n    =>  // For inputs that are not part of whitelistTypes\n        inputAnchors = [\n            {\n                label: 'field_label_2',\n                name: 'CustomType'\n            }\n        ]\n    */ // Inputs\nif(nodeData.inputs){nodeData.inputAnchors=inputAnchors;nodeData.inputParams=inputParams;nodeData.inputs=initializeDefaultNodeData(nodeData.inputs);}else{nodeData.inputAnchors=[];nodeData.inputParams=[];nodeData.inputs={};}// Outputs\nif(nodeData.outputs){nodeData.outputs=initializeDefaultNodeData(outputAnchors);}else{nodeData.outputs={};}nodeData.outputAnchors=outputAnchors;// Credential\nif(nodeData.credential)nodeData.credential='';nodeData.id=newNodeId;return nodeData;};export const getEdgeLabelName=source=>{const sourceSplit=source.split('-');if(sourceSplit.length&&sourceSplit[0].includes('ifElse')){const outputAnchorsIndex=sourceSplit[sourceSplit.length-1];return outputAnchorsIndex==='0'?'true':'false';}return'';};export const isValidConnection=(connection,reactFlowInstance)=>{const sourceHandle=connection.sourceHandle;const targetHandle=connection.targetHandle;const target=connection.target;//sourceHandle: \"llmChain_0-output-llmChain-BaseChain\"\n//targetHandle: \"mrlkAgentLLM_0-input-model-BaseLanguageModel\"\nlet sourceTypes=sourceHandle.split('-')[sourceHandle.split('-').length-1].split('|');sourceTypes=sourceTypes.map(s=>s.trim());let targetTypes=targetHandle.split('-')[targetHandle.split('-').length-1].split('|');targetTypes=targetTypes.map(t=>t.trim());if(targetTypes.some(t=>sourceTypes.includes(t))){let targetNode=reactFlowInstance.getNode(target);if(!targetNode){if(!reactFlowInstance.getEdges().find(e=>e.targetHandle===targetHandle)){return true;}}else{const targetNodeInputAnchor=targetNode.data.inputAnchors.find(ancr=>ancr.id===targetHandle)||targetNode.data.inputParams.find(ancr=>ancr.id===targetHandle);if(targetNodeInputAnchor&&!(targetNodeInputAnchor!==null&&targetNodeInputAnchor!==void 0&&targetNodeInputAnchor.list)&&!reactFlowInstance.getEdges().find(e=>e.targetHandle===targetHandle)||targetNodeInputAnchor!==null&&targetNodeInputAnchor!==void 0&&targetNodeInputAnchor.list){return true;}}}return false;};export const convertDateStringToDateObject=dateString=>{if(dateString===undefined||!dateString)return undefined;const date=moment(dateString);if(!date.isValid)return undefined;// Sat Sep 24 2022 07:30:14\nreturn new Date(date.year(),date.month(),date.date(),date.hours(),date.minutes());};export const getFileName=fileBase64=>{let fileNames=[];if(fileBase64.startsWith('[')&&fileBase64.endsWith(']')){const files=JSON.parse(fileBase64);for(const file of files){const splitDataURI=file.split(',');const filename=splitDataURI[splitDataURI.length-1].split(':')[1];fileNames.push(filename);}return fileNames.join(', ');}else{const splitDataURI=fileBase64.split(',');const filename=splitDataURI[splitDataURI.length-1].split(':')[1];return filename;}};export const getFolderName=base64ArrayStr=>{try{const base64Array=JSON.parse(base64ArrayStr);const filenames=[];for(let i=0;i<base64Array.length;i+=1){const fileBase64=base64Array[i];const splitDataURI=fileBase64.split(',');const filename=splitDataURI[splitDataURI.length-1].split(':')[1];filenames.push(filename);}return filenames.length?filenames.join(','):'';}catch(e){return'';}};export const generateExportFlowData=flowData=>{const nodes=flowData.nodes;const edges=flowData.edges;for(let i=0;i<nodes.length;i+=1){nodes[i].selected=false;const node=nodes[i];const newNodeData={id:node.data.id,label:node.data.label,version:node.data.version,name:node.data.name,type:node.data.type,baseClasses:node.data.baseClasses,category:node.data.category,description:node.data.description,inputParams:node.data.inputParams,inputAnchors:node.data.inputAnchors,inputs:{},outputAnchors:node.data.outputAnchors,outputs:node.data.outputs,selected:false};// Remove password, file & folder\nif(node.data.inputs&&Object.keys(node.data.inputs).length){const nodeDataInputs={};for(const input in node.data.inputs){const inputParam=node.data.inputParams.find(inp=>inp.name===input);if(inputParam&&inputParam.type==='password')continue;if(inputParam&&inputParam.type==='file')continue;if(inputParam&&inputParam.type==='folder')continue;nodeDataInputs[input]=node.data.inputs[input];}newNodeData.inputs=nodeDataInputs;}nodes[i].data=newNodeData;}const exportJson={nodes,edges};return exportJson;};export const getAvailableNodesForVariable=(nodes,edges,target,targetHandle)=>{// example edge id = \"llmChain_0-llmChain_0-output-outputPrediction-string|json-llmChain_1-llmChain_1-input-promptValues-string\"\n//                    {source}  -{sourceHandle}                           -{target}  -{targetHandle}\nconst parentNodes=[];const inputEdges=edges.filter(edg=>edg.target===target&&edg.targetHandle===targetHandle);if(inputEdges&&inputEdges.length){for(let j=0;j<inputEdges.length;j+=1){const node=nodes.find(nd=>nd.id===inputEdges[j].source);parentNodes.push(node);}}return parentNodes;};export const getUpsertDetails=(nodes,edges)=>{const vsNodes=nodes.filter(node=>node.data.category==='Vector Stores'&&!node.data.label.includes('Upsert')&&!node.data.label.includes('Load Existing'));const vsNodeIds=vsNodes.map(vs=>vs.data.id);const upsertNodes=[];const seenVsNodeIds=[];for(const edge of edges){if(vsNodeIds.includes(edge.source)||vsNodeIds.includes(edge.target)){const vsNode=vsNodes.find(node=>node.data.id===edge.source||node.data.id===edge.target);if(!vsNode||seenVsNodeIds.includes(vsNode.data.id))continue;seenVsNodeIds.push(vsNode.data.id);// Found Vector Store Node, proceed to find connected Document Loader node\nlet connectedDocs=[];if(vsNode.data.inputs.document)connectedDocs=[...new Set(vsNode.data.inputs.document)];if(connectedDocs.length){const innerNodes=[vsNode];if(vsNode.data.inputs.embeddings){const embeddingsId=vsNode.data.inputs.embeddings.replace(/{{|}}/g,'').split('.')[0];innerNodes.push(nodes.find(node=>node.data.id===embeddingsId));}for(const doc of connectedDocs){const docId=doc.replace(/{{|}}/g,'').split('.')[0];const docNode=nodes.find(node=>node.data.id===docId);if(docNode)innerNodes.push(docNode);// Found Document Loader Node, proceed to find connected Text Splitter node\nif(docNode&&docNode.data.inputs.textSplitter){const textSplitterId=docNode.data.inputs.textSplitter.replace(/{{|}}/g,'').split('.')[0];const textSplitterNode=nodes.find(node=>node.data.id===textSplitterId);if(textSplitterNode)innerNodes.push(textSplitterNode);}}upsertNodes.push({vectorNode:vsNode,nodes:innerNodes.reverse()});}}}return upsertNodes;};export const rearrangeToolsOrdering=(newValues,sourceNodeId)=>{// RequestsGet and RequestsPost have to be in order before other tools\nnewValues.push(\"{{\".concat(sourceNodeId,\".data.instance}}\"));const sortKey=item=>{if(item.includes('requestsGet')||item.includes('readFile')){return 0;}else if(item.includes('requestsPost')||item.includes('writeFile')){return 1;}else{return 2;}};newValues.sort((a,b)=>sortKey(a)-sortKey(b));};export const throttle=(func,limit)=>{let lastFunc;let lastRan;return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}if(!lastRan){func(...args);lastRan=Date.now();}else{clearTimeout(lastFunc);lastFunc=setTimeout(()=>{if(Date.now()-lastRan>=limit){func(...args);lastRan=Date.now();}},limit-(Date.now()-lastRan));}};};export const generateRandomGradient=()=>{function randomColor(){var color='rgb(';for(var i=0;i<3;i++){var random=Math.floor(Math.random()*256);color+=random;if(i<2){color+=',';}}color+=')';return color;}var gradient='linear-gradient('+randomColor()+', '+randomColor()+')';return gradient;};export const getInputVariables=paramValue=>{let returnVal=paramValue;const variableStack=[];const inputVariables=[];let startIdx=0;const endIdx=returnVal.length;while(startIdx<endIdx){const substr=returnVal.substring(startIdx,startIdx+1);// Store the opening double curly bracket\nif(substr==='{'){variableStack.push({substr,startIdx:startIdx+1});}// Found the complete variable\nif(substr==='}'&&variableStack.length>0&&variableStack[variableStack.length-1].substr==='{'){const variableStartIdx=variableStack[variableStack.length-1].startIdx;const variableEndIdx=startIdx;const variableFullPath=returnVal.substring(variableStartIdx,variableEndIdx);inputVariables.push(variableFullPath);variableStack.pop();}startIdx+=1;}return inputVariables;};export const removeDuplicateURL=message=>{const visitedURLs=[];const newSourceDocuments=[];if(!message.sourceDocuments)return newSourceDocuments;message.sourceDocuments.forEach(source=>{if(source.metadata&&source.metadata.source){if(isValidURL(source.metadata.source)&&!visitedURLs.includes(source.metadata.source)){visitedURLs.push(source.metadata.source);newSourceDocuments.push(source);}else if(!isValidURL(source.metadata.source)){newSourceDocuments.push(source);}}else{newSourceDocuments.push(source);}});return newSourceDocuments;};export const isValidURL=url=>{try{return new URL(url);}catch(err){return undefined;}};export const formatDataGridRows=rows=>{try{const parsedRows=typeof rows==='string'?JSON.parse(rows):rows;return parsedRows.map((sch,index)=>{return{...sch,id:index};});}catch(e){return[];}};export const setLocalStorageChatflow=(chatflowid,chatId,chatHistory)=>{const chatDetails=localStorage.getItem(\"\".concat(chatflowid,\"_INTERNAL\"));const obj={};if(chatId)obj.chatId=chatId;if(chatHistory)obj.chatHistory=chatHistory;if(!chatDetails){localStorage.setItem(\"\".concat(chatflowid,\"_INTERNAL\"),JSON.stringify(obj));}else{try{const parsedChatDetails=JSON.parse(chatDetails);localStorage.setItem(\"\".concat(chatflowid,\"_INTERNAL\"),JSON.stringify({...parsedChatDetails,...obj}));}catch(e){const chatId=chatDetails;obj.chatId=chatId;localStorage.setItem(\"\".concat(chatflowid,\"_INTERNAL\"),JSON.stringify(obj));}}};export const unshiftFiles=configData=>{const filesConfig=configData.find(config=>config.name==='files');if(filesConfig){configData=configData.filter(config=>config.name!=='files');configData.unshift(filesConfig);}return configData;};export const getConfigExamplesForJS=(configData,bodyType,isMultiple,stopNodeId)=>{let finalStr='';configData=unshiftFiles(configData);const loop=Math.min(configData.length,4);for(let i=0;i<loop;i+=1){const config=configData[i];let exampleVal=\"\\\"example\\\"\";if(config.type==='string')exampleVal=\"\\\"example\\\"\";else if(config.type==='boolean')exampleVal=\"true\";else if(config.type==='number')exampleVal=\"1\";else if(config.type==='json')exampleVal=\"{ \\\"key\\\": \\\"val\\\" }\";else if(config.name==='files')exampleVal=\"input.files[0]\";finalStr+=bodyType==='json'?\"\\n      \\\"\".concat(config.name,\"\\\": \").concat(exampleVal,\",\"):\"formData.append(\\\"\".concat(config.name,\"\\\", \").concat(exampleVal,\")\\n\");if(i===loop-1&&bodyType!=='json')finalStr+=!isMultiple?\"\":stopNodeId?\"formData.append(\\\"stopNodeId\\\", \\\"\".concat(stopNodeId,\"\\\")\\n\"):\"formData.append(\\\"question\\\", \\\"Hey, how are you?\\\")\\n\";}return finalStr;};export const getConfigExamplesForPython=(configData,bodyType,isMultiple,stopNodeId)=>{let finalStr='';configData=unshiftFiles(configData);const loop=Math.min(configData.length,4);for(let i=0;i<loop;i+=1){const config=configData[i];let exampleVal=\"\\\"example\\\"\";if(config.type==='string')exampleVal=\"\\\"example\\\"\";else if(config.type==='boolean')exampleVal=\"true\";else if(config.type==='number')exampleVal=\"1\";else if(config.type==='json')exampleVal=\"{ \\\"key\\\": \\\"val\\\" }\";else if(config.name==='files')continue;finalStr+=bodyType==='json'?\"\\n        \\\"\".concat(config.name,\"\\\": \").concat(exampleVal,\",\"):\"\\n    \\\"\".concat(config.name,\"\\\": \").concat(exampleVal,\",\");if(i===loop-1&&bodyType!=='json')finalStr+=!isMultiple?\"\\n\":stopNodeId?\"\\n    \\\"stopNodeId\\\": \\\"\".concat(stopNodeId,\"\\\"\\n\"):\"\\n    \\\"question\\\": \\\"Hey, how are you?\\\"\\n\";}return finalStr;};export const getConfigExamplesForCurl=(configData,bodyType,isMultiple,stopNodeId)=>{let finalStr='';configData=unshiftFiles(configData);const loop=Math.min(configData.length,4);for(let i=0;i<loop;i+=1){const config=configData[i];let exampleVal=\"example\";if(config.type==='string')exampleVal=bodyType==='json'?\"\\\"example\\\"\":\"example\";else if(config.type==='boolean')exampleVal=\"true\";else if(config.type==='number')exampleVal=\"1\";else if(config.type==='json')exampleVal=\"{key:val}\";else if(config.name==='files')exampleVal=\"@/home/user1/Desktop/example\".concat(config.type.includes(',')?config.type.split(',')[0]:config.type);finalStr+=bodyType==='json'?\"\\\"\".concat(config.name,\"\\\": \").concat(exampleVal):\"\\n     -F \\\"\".concat(config.name,\"=\").concat(exampleVal,\"\\\"\");if(i===loop-1)finalStr+=bodyType==='json'?\" }\":!isMultiple?\"\":stopNodeId?\" \\\\\\n     -F \\\"stopNodeId=\".concat(stopNodeId,\"\\\"\"):\" \\\\\\n     -F \\\"question=Hey, how are you?\\\"\";else finalStr+=bodyType==='json'?\", \":\" \\\\\";}return finalStr;};","map":{"version":3,"names":["moment","getUniqueNodeId","nodeData","nodes","totalSameNodes","i","length","node","data","name","nodeId","concat","id","initializeDefaultNodeData","nodeParams","initialValues","input","default","initNode","newNodeId","inputAnchors","inputParams","incoming","inputs","outgoing","whitelistTypes","newInput","type","includes","push","credential","unshift","outputAnchors","outputs","options","j","_nodeData$outputs$j$b","baseClasses","outputBaseClasses","join","newOutputOption","label","newOutput","getEdgeLabelName","source","sourceSplit","split","outputAnchorsIndex","isValidConnection","connection","reactFlowInstance","sourceHandle","targetHandle","target","sourceTypes","map","s","trim","targetTypes","t","some","targetNode","getNode","getEdges","find","e","targetNodeInputAnchor","ancr","list","convertDateStringToDateObject","dateString","undefined","date","isValid","Date","year","month","hours","minutes","getFileName","fileBase64","fileNames","startsWith","endsWith","files","JSON","parse","file","splitDataURI","filename","getFolderName","base64ArrayStr","base64Array","filenames","generateExportFlowData","flowData","edges","selected","newNodeData","version","category","description","Object","keys","nodeDataInputs","inputParam","inp","exportJson","getAvailableNodesForVariable","parentNodes","inputEdges","filter","edg","nd","getUpsertDetails","vsNodes","vsNodeIds","vs","upsertNodes","seenVsNodeIds","edge","vsNode","connectedDocs","document","Set","innerNodes","embeddings","embeddingsId","replace","doc","docId","docNode","textSplitter","textSplitterId","textSplitterNode","vectorNode","reverse","rearrangeToolsOrdering","newValues","sourceNodeId","sortKey","item","sort","a","b","throttle","func","limit","lastFunc","lastRan","_len","arguments","args","Array","_key","now","clearTimeout","setTimeout","generateRandomGradient","randomColor","color","random","Math","floor","gradient","getInputVariables","paramValue","returnVal","variableStack","inputVariables","startIdx","endIdx","substr","substring","variableStartIdx","variableEndIdx","variableFullPath","pop","removeDuplicateURL","message","visitedURLs","newSourceDocuments","sourceDocuments","forEach","metadata","isValidURL","url","URL","err","formatDataGridRows","rows","parsedRows","sch","index","setLocalStorageChatflow","chatflowid","chatId","chatHistory","chatDetails","localStorage","getItem","obj","setItem","stringify","parsedChatDetails","unshiftFiles","configData","filesConfig","config","getConfigExamplesForJS","bodyType","isMultiple","stopNodeId","finalStr","loop","min","exampleVal","getConfigExamplesForPython","getConfigExamplesForCurl"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/packages/ui/src/utils/genericHelper.js"],"sourcesContent":["import moment from 'moment'\n\nexport const getUniqueNodeId = (nodeData, nodes) => {\n    // Get amount of same nodes\n    let totalSameNodes = 0\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i]\n        if (node.data.name === nodeData.name) {\n            totalSameNodes += 1\n        }\n    }\n\n    // Get unique id\n    let nodeId = `${nodeData.name}_${totalSameNodes}`\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i]\n        if (node.id === nodeId) {\n            totalSameNodes += 1\n            nodeId = `${nodeData.name}_${totalSameNodes}`\n        }\n    }\n    return nodeId\n}\n\nexport const initializeDefaultNodeData = (nodeParams) => {\n    const initialValues = {}\n\n    for (let i = 0; i < nodeParams.length; i += 1) {\n        const input = nodeParams[i]\n        initialValues[input.name] = input.default || ''\n    }\n\n    return initialValues\n}\n\nexport const initNode = (nodeData, newNodeId) => {\n    const inputAnchors = []\n    const inputParams = []\n    const incoming = nodeData.inputs ? nodeData.inputs.length : 0\n    const outgoing = 1\n\n    const whitelistTypes = [\n        'asyncOptions',\n        'options',\n        'multiOptions',\n        'datagrid',\n        'string',\n        'number',\n        'boolean',\n        'password',\n        'json',\n        'code',\n        'date',\n        'file',\n        'folder'\n    ]\n\n    // Inputs\n    for (let i = 0; i < incoming; i += 1) {\n        const newInput = {\n            ...nodeData.inputs[i],\n            id: `${newNodeId}-input-${nodeData.inputs[i].name}-${nodeData.inputs[i].type}`\n        }\n        if (whitelistTypes.includes(nodeData.inputs[i].type)) {\n            inputParams.push(newInput)\n        } else {\n            inputAnchors.push(newInput)\n        }\n    }\n\n    // Credential\n    if (nodeData.credential) {\n        const newInput = {\n            ...nodeData.credential,\n            id: `${newNodeId}-input-${nodeData.credential.name}-${nodeData.credential.type}`\n        }\n        inputParams.unshift(newInput)\n    }\n\n    // Outputs\n    const outputAnchors = []\n    for (let i = 0; i < outgoing; i += 1) {\n        if (nodeData.outputs && nodeData.outputs.length) {\n            const options = []\n            for (let j = 0; j < nodeData.outputs.length; j += 1) {\n                let baseClasses = ''\n                let type = ''\n\n                const outputBaseClasses = nodeData.outputs[j].baseClasses ?? []\n                if (outputBaseClasses.length > 1) {\n                    baseClasses = outputBaseClasses.join('|')\n                    type = outputBaseClasses.join(' | ')\n                } else if (outputBaseClasses.length === 1) {\n                    baseClasses = outputBaseClasses[0]\n                    type = outputBaseClasses[0]\n                }\n\n                const newOutputOption = {\n                    id: `${newNodeId}-output-${nodeData.outputs[j].name}-${baseClasses}`,\n                    name: nodeData.outputs[j].name,\n                    label: nodeData.outputs[j].label,\n                    type\n                }\n                options.push(newOutputOption)\n            }\n            const newOutput = {\n                name: 'output',\n                label: 'Output',\n                type: 'options',\n                options,\n                default: nodeData.outputs[0].name\n            }\n            outputAnchors.push(newOutput)\n        } else {\n            const newOutput = {\n                id: `${newNodeId}-output-${nodeData.name}-${nodeData.baseClasses.join('|')}`,\n                name: nodeData.name,\n                label: nodeData.type,\n                type: nodeData.baseClasses.join(' | ')\n            }\n            outputAnchors.push(newOutput)\n        }\n    }\n\n    /* Initial\n    inputs = [\n        {\n            label: 'field_label_1',\n            name: 'string'\n        },\n        {\n            label: 'field_label_2',\n            name: 'CustomType'\n        }\n    ]\n\n    =>  Convert to inputs, inputParams, inputAnchors\n\n    =>  inputs = { 'field': 'defaultvalue' } // Turn into inputs object with default values\n    \n    =>  // For inputs that are part of whitelistTypes\n        inputParams = [\n            {\n                label: 'field_label_1',\n                name: 'string'\n            }\n        ]\n\n    =>  // For inputs that are not part of whitelistTypes\n        inputAnchors = [\n            {\n                label: 'field_label_2',\n                name: 'CustomType'\n            }\n        ]\n    */\n\n    // Inputs\n    if (nodeData.inputs) {\n        nodeData.inputAnchors = inputAnchors\n        nodeData.inputParams = inputParams\n        nodeData.inputs = initializeDefaultNodeData(nodeData.inputs)\n    } else {\n        nodeData.inputAnchors = []\n        nodeData.inputParams = []\n        nodeData.inputs = {}\n    }\n\n    // Outputs\n    if (nodeData.outputs) {\n        nodeData.outputs = initializeDefaultNodeData(outputAnchors)\n    } else {\n        nodeData.outputs = {}\n    }\n    nodeData.outputAnchors = outputAnchors\n\n    // Credential\n    if (nodeData.credential) nodeData.credential = ''\n\n    nodeData.id = newNodeId\n\n    return nodeData\n}\n\nexport const getEdgeLabelName = (source) => {\n    const sourceSplit = source.split('-')\n    if (sourceSplit.length && sourceSplit[0].includes('ifElse')) {\n        const outputAnchorsIndex = sourceSplit[sourceSplit.length - 1]\n        return outputAnchorsIndex === '0' ? 'true' : 'false'\n    }\n    return ''\n}\n\nexport const isValidConnection = (connection, reactFlowInstance) => {\n    const sourceHandle = connection.sourceHandle\n    const targetHandle = connection.targetHandle\n    const target = connection.target\n\n    //sourceHandle: \"llmChain_0-output-llmChain-BaseChain\"\n    //targetHandle: \"mrlkAgentLLM_0-input-model-BaseLanguageModel\"\n\n    let sourceTypes = sourceHandle.split('-')[sourceHandle.split('-').length - 1].split('|')\n    sourceTypes = sourceTypes.map((s) => s.trim())\n    let targetTypes = targetHandle.split('-')[targetHandle.split('-').length - 1].split('|')\n    targetTypes = targetTypes.map((t) => t.trim())\n\n    if (targetTypes.some((t) => sourceTypes.includes(t))) {\n        let targetNode = reactFlowInstance.getNode(target)\n\n        if (!targetNode) {\n            if (!reactFlowInstance.getEdges().find((e) => e.targetHandle === targetHandle)) {\n                return true\n            }\n        } else {\n            const targetNodeInputAnchor =\n                targetNode.data.inputAnchors.find((ancr) => ancr.id === targetHandle) ||\n                targetNode.data.inputParams.find((ancr) => ancr.id === targetHandle)\n            if (\n                (targetNodeInputAnchor &&\n                    !targetNodeInputAnchor?.list &&\n                    !reactFlowInstance.getEdges().find((e) => e.targetHandle === targetHandle)) ||\n                targetNodeInputAnchor?.list\n            ) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nexport const convertDateStringToDateObject = (dateString) => {\n    if (dateString === undefined || !dateString) return undefined\n\n    const date = moment(dateString)\n    if (!date.isValid) return undefined\n\n    // Sat Sep 24 2022 07:30:14\n    return new Date(date.year(), date.month(), date.date(), date.hours(), date.minutes())\n}\n\nexport const getFileName = (fileBase64) => {\n    let fileNames = []\n    if (fileBase64.startsWith('[') && fileBase64.endsWith(']')) {\n        const files = JSON.parse(fileBase64)\n        for (const file of files) {\n            const splitDataURI = file.split(',')\n            const filename = splitDataURI[splitDataURI.length - 1].split(':')[1]\n            fileNames.push(filename)\n        }\n        return fileNames.join(', ')\n    } else {\n        const splitDataURI = fileBase64.split(',')\n        const filename = splitDataURI[splitDataURI.length - 1].split(':')[1]\n        return filename\n    }\n}\n\nexport const getFolderName = (base64ArrayStr) => {\n    try {\n        const base64Array = JSON.parse(base64ArrayStr)\n        const filenames = []\n        for (let i = 0; i < base64Array.length; i += 1) {\n            const fileBase64 = base64Array[i]\n            const splitDataURI = fileBase64.split(',')\n            const filename = splitDataURI[splitDataURI.length - 1].split(':')[1]\n            filenames.push(filename)\n        }\n        return filenames.length ? filenames.join(',') : ''\n    } catch (e) {\n        return ''\n    }\n}\n\nexport const generateExportFlowData = (flowData) => {\n    const nodes = flowData.nodes\n    const edges = flowData.edges\n\n    for (let i = 0; i < nodes.length; i += 1) {\n        nodes[i].selected = false\n        const node = nodes[i]\n\n        const newNodeData = {\n            id: node.data.id,\n            label: node.data.label,\n            version: node.data.version,\n            name: node.data.name,\n            type: node.data.type,\n            baseClasses: node.data.baseClasses,\n            category: node.data.category,\n            description: node.data.description,\n            inputParams: node.data.inputParams,\n            inputAnchors: node.data.inputAnchors,\n            inputs: {},\n            outputAnchors: node.data.outputAnchors,\n            outputs: node.data.outputs,\n            selected: false\n        }\n\n        // Remove password, file & folder\n        if (node.data.inputs && Object.keys(node.data.inputs).length) {\n            const nodeDataInputs = {}\n            for (const input in node.data.inputs) {\n                const inputParam = node.data.inputParams.find((inp) => inp.name === input)\n                if (inputParam && inputParam.type === 'password') continue\n                if (inputParam && inputParam.type === 'file') continue\n                if (inputParam && inputParam.type === 'folder') continue\n                nodeDataInputs[input] = node.data.inputs[input]\n            }\n            newNodeData.inputs = nodeDataInputs\n        }\n\n        nodes[i].data = newNodeData\n    }\n    const exportJson = {\n        nodes,\n        edges\n    }\n    return exportJson\n}\n\nexport const getAvailableNodesForVariable = (nodes, edges, target, targetHandle) => {\n    // example edge id = \"llmChain_0-llmChain_0-output-outputPrediction-string|json-llmChain_1-llmChain_1-input-promptValues-string\"\n    //                    {source}  -{sourceHandle}                           -{target}  -{targetHandle}\n    const parentNodes = []\n    const inputEdges = edges.filter((edg) => edg.target === target && edg.targetHandle === targetHandle)\n    if (inputEdges && inputEdges.length) {\n        for (let j = 0; j < inputEdges.length; j += 1) {\n            const node = nodes.find((nd) => nd.id === inputEdges[j].source)\n            parentNodes.push(node)\n        }\n    }\n    return parentNodes\n}\n\nexport const getUpsertDetails = (nodes, edges) => {\n    const vsNodes = nodes.filter(\n        (node) =>\n            node.data.category === 'Vector Stores' && !node.data.label.includes('Upsert') && !node.data.label.includes('Load Existing')\n    )\n    const vsNodeIds = vsNodes.map((vs) => vs.data.id)\n\n    const upsertNodes = []\n    const seenVsNodeIds = []\n    for (const edge of edges) {\n        if (vsNodeIds.includes(edge.source) || vsNodeIds.includes(edge.target)) {\n            const vsNode = vsNodes.find((node) => node.data.id === edge.source || node.data.id === edge.target)\n            if (!vsNode || seenVsNodeIds.includes(vsNode.data.id)) continue\n            seenVsNodeIds.push(vsNode.data.id)\n\n            // Found Vector Store Node, proceed to find connected Document Loader node\n            let connectedDocs = []\n\n            if (vsNode.data.inputs.document) connectedDocs = [...new Set(vsNode.data.inputs.document)]\n\n            if (connectedDocs.length) {\n                const innerNodes = [vsNode]\n\n                if (vsNode.data.inputs.embeddings) {\n                    const embeddingsId = vsNode.data.inputs.embeddings.replace(/{{|}}/g, '').split('.')[0]\n                    innerNodes.push(nodes.find((node) => node.data.id === embeddingsId))\n                }\n\n                for (const doc of connectedDocs) {\n                    const docId = doc.replace(/{{|}}/g, '').split('.')[0]\n                    const docNode = nodes.find((node) => node.data.id === docId)\n                    if (docNode) innerNodes.push(docNode)\n\n                    // Found Document Loader Node, proceed to find connected Text Splitter node\n                    if (docNode && docNode.data.inputs.textSplitter) {\n                        const textSplitterId = docNode.data.inputs.textSplitter.replace(/{{|}}/g, '').split('.')[0]\n                        const textSplitterNode = nodes.find((node) => node.data.id === textSplitterId)\n                        if (textSplitterNode) innerNodes.push(textSplitterNode)\n                    }\n                }\n\n                upsertNodes.push({\n                    vectorNode: vsNode,\n                    nodes: innerNodes.reverse()\n                })\n            }\n        }\n    }\n    return upsertNodes\n}\n\nexport const rearrangeToolsOrdering = (newValues, sourceNodeId) => {\n    // RequestsGet and RequestsPost have to be in order before other tools\n    newValues.push(`{{${sourceNodeId}.data.instance}}`)\n\n    const sortKey = (item) => {\n        if (item.includes('requestsGet') || item.includes('readFile')) {\n            return 0\n        } else if (item.includes('requestsPost') || item.includes('writeFile')) {\n            return 1\n        } else {\n            return 2\n        }\n    }\n\n    newValues.sort((a, b) => sortKey(a) - sortKey(b))\n}\n\nexport const throttle = (func, limit) => {\n    let lastFunc\n    let lastRan\n\n    return (...args) => {\n        if (!lastRan) {\n            func(...args)\n            lastRan = Date.now()\n        } else {\n            clearTimeout(lastFunc)\n            lastFunc = setTimeout(() => {\n                if (Date.now() - lastRan >= limit) {\n                    func(...args)\n                    lastRan = Date.now()\n                }\n            }, limit - (Date.now() - lastRan))\n        }\n    }\n}\n\nexport const generateRandomGradient = () => {\n    function randomColor() {\n        var color = 'rgb('\n        for (var i = 0; i < 3; i++) {\n            var random = Math.floor(Math.random() * 256)\n            color += random\n            if (i < 2) {\n                color += ','\n            }\n        }\n        color += ')'\n        return color\n    }\n\n    var gradient = 'linear-gradient(' + randomColor() + ', ' + randomColor() + ')'\n\n    return gradient\n}\n\nexport const getInputVariables = (paramValue) => {\n    let returnVal = paramValue\n    const variableStack = []\n    const inputVariables = []\n    let startIdx = 0\n    const endIdx = returnVal.length\n\n    while (startIdx < endIdx) {\n        const substr = returnVal.substring(startIdx, startIdx + 1)\n\n        // Store the opening double curly bracket\n        if (substr === '{') {\n            variableStack.push({ substr, startIdx: startIdx + 1 })\n        }\n\n        // Found the complete variable\n        if (substr === '}' && variableStack.length > 0 && variableStack[variableStack.length - 1].substr === '{') {\n            const variableStartIdx = variableStack[variableStack.length - 1].startIdx\n            const variableEndIdx = startIdx\n            const variableFullPath = returnVal.substring(variableStartIdx, variableEndIdx)\n            inputVariables.push(variableFullPath)\n            variableStack.pop()\n        }\n        startIdx += 1\n    }\n    return inputVariables\n}\n\nexport const removeDuplicateURL = (message) => {\n    const visitedURLs = []\n    const newSourceDocuments = []\n\n    if (!message.sourceDocuments) return newSourceDocuments\n\n    message.sourceDocuments.forEach((source) => {\n        if (source.metadata && source.metadata.source) {\n            if (isValidURL(source.metadata.source) && !visitedURLs.includes(source.metadata.source)) {\n                visitedURLs.push(source.metadata.source)\n                newSourceDocuments.push(source)\n            } else if (!isValidURL(source.metadata.source)) {\n                newSourceDocuments.push(source)\n            }\n        } else {\n            newSourceDocuments.push(source)\n        }\n    })\n    return newSourceDocuments\n}\n\nexport const isValidURL = (url) => {\n    try {\n        return new URL(url)\n    } catch (err) {\n        return undefined\n    }\n}\n\nexport const formatDataGridRows = (rows) => {\n    try {\n        const parsedRows = typeof rows === 'string' ? JSON.parse(rows) : rows\n        return parsedRows.map((sch, index) => {\n            return {\n                ...sch,\n                id: index\n            }\n        })\n    } catch (e) {\n        return []\n    }\n}\n\nexport const setLocalStorageChatflow = (chatflowid, chatId, chatHistory) => {\n    const chatDetails = localStorage.getItem(`${chatflowid}_INTERNAL`)\n    const obj = {}\n    if (chatId) obj.chatId = chatId\n    if (chatHistory) obj.chatHistory = chatHistory\n\n    if (!chatDetails) {\n        localStorage.setItem(`${chatflowid}_INTERNAL`, JSON.stringify(obj))\n    } else {\n        try {\n            const parsedChatDetails = JSON.parse(chatDetails)\n            localStorage.setItem(`${chatflowid}_INTERNAL`, JSON.stringify({ ...parsedChatDetails, ...obj }))\n        } catch (e) {\n            const chatId = chatDetails\n            obj.chatId = chatId\n            localStorage.setItem(`${chatflowid}_INTERNAL`, JSON.stringify(obj))\n        }\n    }\n}\n\nexport const unshiftFiles = (configData) => {\n    const filesConfig = configData.find((config) => config.name === 'files')\n    if (filesConfig) {\n        configData = configData.filter((config) => config.name !== 'files')\n        configData.unshift(filesConfig)\n    }\n    return configData\n}\n\nexport const getConfigExamplesForJS = (configData, bodyType, isMultiple, stopNodeId) => {\n    let finalStr = ''\n    configData = unshiftFiles(configData)\n    const loop = Math.min(configData.length, 4)\n    for (let i = 0; i < loop; i += 1) {\n        const config = configData[i]\n        let exampleVal = `\"example\"`\n        if (config.type === 'string') exampleVal = `\"example\"`\n        else if (config.type === 'boolean') exampleVal = `true`\n        else if (config.type === 'number') exampleVal = `1`\n        else if (config.type === 'json') exampleVal = `{ \"key\": \"val\" }`\n        else if (config.name === 'files') exampleVal = `input.files[0]`\n        finalStr += bodyType === 'json' ? `\\n      \"${config.name}\": ${exampleVal},` : `formData.append(\"${config.name}\", ${exampleVal})\\n`\n        if (i === loop - 1 && bodyType !== 'json')\n            finalStr += !isMultiple\n                ? ``\n                : stopNodeId\n                ? `formData.append(\"stopNodeId\", \"${stopNodeId}\")\\n`\n                : `formData.append(\"question\", \"Hey, how are you?\")\\n`\n    }\n    return finalStr\n}\n\nexport const getConfigExamplesForPython = (configData, bodyType, isMultiple, stopNodeId) => {\n    let finalStr = ''\n    configData = unshiftFiles(configData)\n    const loop = Math.min(configData.length, 4)\n    for (let i = 0; i < loop; i += 1) {\n        const config = configData[i]\n        let exampleVal = `\"example\"`\n        if (config.type === 'string') exampleVal = `\"example\"`\n        else if (config.type === 'boolean') exampleVal = `true`\n        else if (config.type === 'number') exampleVal = `1`\n        else if (config.type === 'json') exampleVal = `{ \"key\": \"val\" }`\n        else if (config.name === 'files') continue\n        finalStr += bodyType === 'json' ? `\\n        \"${config.name}\": ${exampleVal},` : `\\n    \"${config.name}\": ${exampleVal},`\n        if (i === loop - 1 && bodyType !== 'json')\n            finalStr += !isMultiple\n                ? `\\n`\n                : stopNodeId\n                ? `\\n    \"stopNodeId\": \"${stopNodeId}\"\\n`\n                : `\\n    \"question\": \"Hey, how are you?\"\\n`\n    }\n    return finalStr\n}\n\nexport const getConfigExamplesForCurl = (configData, bodyType, isMultiple, stopNodeId) => {\n    let finalStr = ''\n    configData = unshiftFiles(configData)\n    const loop = Math.min(configData.length, 4)\n    for (let i = 0; i < loop; i += 1) {\n        const config = configData[i]\n        let exampleVal = `example`\n        if (config.type === 'string') exampleVal = bodyType === 'json' ? `\"example\"` : `example`\n        else if (config.type === 'boolean') exampleVal = `true`\n        else if (config.type === 'number') exampleVal = `1`\n        else if (config.type === 'json') exampleVal = `{key:val}`\n        else if (config.name === 'files')\n            exampleVal = `@/home/user1/Desktop/example${config.type.includes(',') ? config.type.split(',')[0] : config.type}`\n        finalStr += bodyType === 'json' ? `\"${config.name}\": ${exampleVal}` : `\\n     -F \"${config.name}=${exampleVal}\"`\n        if (i === loop - 1)\n            finalStr +=\n                bodyType === 'json'\n                    ? ` }`\n                    : !isMultiple\n                    ? ``\n                    : stopNodeId\n                    ? ` \\\\\\n     -F \"stopNodeId=${stopNodeId}\"`\n                    : ` \\\\\\n     -F \"question=Hey, how are you?\"`\n        else finalStr += bodyType === 'json' ? `, ` : ` \\\\`\n    }\n    return finalStr\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}