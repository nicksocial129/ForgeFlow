{"ast":null,"code":"'use strict';\n\nmodule.exports = markup;\nmarkup.displayName = 'markup';\nmarkup.aliases = ['xml', 'html', 'mathml', 'svg'];\nfunction markup(Prism) {\n  Prism.languages.markup = {\n    comment: /<!--[\\s\\S]*?-->/,\n    prolog: /<\\?[\\s\\S]+?\\?>/,\n    doctype: /<!DOCTYPE[\\s\\S]+?>/i,\n    cdata: /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n    tag: {\n      pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n      greedy: true,\n      inside: {\n        tag: {\n          pattern: /^<\\/?[^\\s>\\/]+/i,\n          inside: {\n            punctuation: /^<\\/?/,\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        },\n        'attr-value': {\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n          inside: {\n            punctuation: [/^=/, {\n              pattern: /^(\\s*)[\"']|[\"']$/,\n              lookbehind: true\n            }]\n          }\n        },\n        punctuation: /\\/?>/,\n        'attr-name': {\n          pattern: /[^\\s>\\/]+/,\n          inside: {\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        }\n      }\n    },\n    entity: /&#?[\\da-z]{1,8};/i\n  };\n  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity']; // Plugin to make entity title show the real entity, idea by Roman Komarov\n  Prism.hooks.add('wrap', function (env) {\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.value.replace(/&amp;/, '&');\n    }\n  });\n  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n    /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */\n    value: function addInlined(tagName, lang) {\n      var includedCdataInside = {};\n      includedCdataInside['language-' + lang] = {\n        pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n        lookbehind: true,\n        inside: Prism.languages[lang]\n      };\n      includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n      var inside = {\n        'included-cdata': {\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n          inside: includedCdataInside\n        }\n      };\n      inside['language-' + lang] = {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages[lang]\n      };\n      var def = {};\n      def[tagName] = {\n        pattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, tagName), 'i'),\n        lookbehind: true,\n        greedy: true,\n        inside: inside\n      };\n      Prism.languages.insertBefore('markup', 'cdata', def);\n    }\n  });\n  Prism.languages.xml = Prism.languages.extend('markup', {});\n  Prism.languages.html = Prism.languages.markup;\n  Prism.languages.mathml = Prism.languages.markup;\n  Prism.languages.svg = Prism.languages.markup;\n}","map":{"version":3,"names":["module","exports","markup","displayName","aliases","Prism","languages","comment","prolog","doctype","cdata","tag","pattern","greedy","inside","punctuation","namespace","lookbehind","entity","hooks","add","env","type","attributes","content","value","replace","Object","defineProperty","addInlined","tagName","lang","includedCdataInside","def","RegExp","source","insertBefore","xml","extend","html","mathml","svg"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/refractor/lang/markup.js"],"sourcesContent":["'use strict'\n\nmodule.exports = markup\nmarkup.displayName = 'markup'\nmarkup.aliases = ['xml', 'html', 'mathml', 'svg']\nfunction markup(Prism) {\n  Prism.languages.markup = {\n    comment: /<!--[\\s\\S]*?-->/,\n    prolog: /<\\?[\\s\\S]+?\\?>/,\n    doctype: /<!DOCTYPE[\\s\\S]+?>/i,\n    cdata: /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n    tag: {\n      pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n      greedy: true,\n      inside: {\n        tag: {\n          pattern: /^<\\/?[^\\s>\\/]+/i,\n          inside: {\n            punctuation: /^<\\/?/,\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        },\n        'attr-value': {\n          pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n          inside: {\n            punctuation: [\n              /^=/,\n              {\n                pattern: /^(\\s*)[\"']|[\"']$/,\n                lookbehind: true\n              }\n            ]\n          }\n        },\n        punctuation: /\\/?>/,\n        'attr-name': {\n          pattern: /[^\\s>\\/]+/,\n          inside: {\n            namespace: /^[^\\s>\\/:]+:/\n          }\n        }\n      }\n    },\n    entity: /&#?[\\da-z]{1,8};/i\n  }\n  Prism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n    Prism.languages.markup['entity'] // Plugin to make entity title show the real entity, idea by Roman Komarov\n  Prism.hooks.add('wrap', function(env) {\n    if (env.type === 'entity') {\n      env.attributes['title'] = env.content.value.replace(/&amp;/, '&')\n    }\n  })\n  Object.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n    /**\n     * Adds an inlined language to markup.\n     *\n     * An example of an inlined language is CSS with `<style>` tags.\n     *\n     * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n     * case insensitive.\n     * @param {string} lang The language key.\n     * @example\n     * addInlined('style', 'css');\n     */\n    value: function addInlined(tagName, lang) {\n      var includedCdataInside = {}\n      includedCdataInside['language-' + lang] = {\n        pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n        lookbehind: true,\n        inside: Prism.languages[lang]\n      }\n      includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i\n      var inside = {\n        'included-cdata': {\n          pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n          inside: includedCdataInside\n        }\n      }\n      inside['language-' + lang] = {\n        pattern: /[\\s\\S]+/,\n        inside: Prism.languages[lang]\n      }\n      var def = {}\n      def[tagName] = {\n        pattern: RegExp(\n          /(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(\n            /__/g,\n            tagName\n          ),\n          'i'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: inside\n      }\n      Prism.languages.insertBefore('markup', 'cdata', def)\n    }\n  })\n  Prism.languages.xml = Prism.languages.extend('markup', {})\n  Prism.languages.html = Prism.languages.markup\n  Prism.languages.mathml = Prism.languages.markup\n  Prism.languages.svg = Prism.languages.markup\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}