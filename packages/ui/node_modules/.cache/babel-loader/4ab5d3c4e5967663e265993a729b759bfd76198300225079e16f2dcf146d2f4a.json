{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar BaseMethods_js_1 = __importDefault(require(\"../base/BaseMethods.js\"));\nvar MmlNode_js_1 = require(\"../../../core/MmlTree/MmlNode.js\");\nvar TexError_js_1 = __importDefault(require(\"../TexError.js\"));\nvar BraketMethods = {};\nBraketMethods.Macro = BaseMethods_js_1.default.Macro;\nBraketMethods.Braket = function (parser, _name, open, close, stretchy, barmax) {\n  var next = parser.GetNext();\n  if (next === '') {\n    throw new TexError_js_1.default('MissingArgFor', 'Missing argument for %1', parser.currentCS);\n  }\n  var single = true;\n  if (next === '{') {\n    parser.i++;\n    single = false;\n  }\n  parser.Push(parser.itemFactory.create('braket').setProperties({\n    barmax: barmax,\n    barcount: 0,\n    open: open,\n    close: close,\n    stretchy: stretchy,\n    single: single\n  }));\n};\nBraketMethods.Bar = function (parser, name) {\n  var c = name === '|' ? '|' : '\\u2225';\n  var top = parser.stack.Top();\n  if (top.kind !== 'braket' || top.getProperty('barcount') >= top.getProperty('barmax')) {\n    var mml = parser.create('token', 'mo', {\n      texClass: MmlNode_js_1.TEXCLASS.ORD,\n      stretchy: false\n    }, c);\n    parser.Push(mml);\n    return;\n  }\n  if (c === '|' && parser.GetNext() === '|') {\n    parser.i++;\n    c = '\\u2225';\n  }\n  var stretchy = top.getProperty('stretchy');\n  if (!stretchy) {\n    var node_1 = parser.create('token', 'mo', {\n      stretchy: false,\n      braketbar: true\n    }, c);\n    parser.Push(node_1);\n    return;\n  }\n  var node = parser.create('node', 'TeXAtom', [], {\n    texClass: MmlNode_js_1.TEXCLASS.CLOSE\n  });\n  parser.Push(node);\n  top.setProperty('barcount', top.getProperty('barcount') + 1);\n  node = parser.create('token', 'mo', {\n    stretchy: true,\n    braketbar: true\n  }, c);\n  parser.Push(node);\n  node = parser.create('node', 'TeXAtom', [], {\n    texClass: MmlNode_js_1.TEXCLASS.OPEN\n  });\n  parser.Push(node);\n};\nexports.default = BraketMethods;","map":{"version":3,"names":["BaseMethods_js_1","__importDefault","require","MmlNode_js_1","TexError_js_1","BraketMethods","Macro","default","Braket","parser","_name","open","close","stretchy","barmax","next","GetNext","currentCS","single","i","Push","itemFactory","create","setProperties","barcount","Bar","name","c","top","stack","Top","kind","getProperty","mml","texClass","TEXCLASS","ORD","node_1","braketbar","node","CLOSE","setProperty","OPEN","exports"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/input/tex/braket/BraketMethods.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Methods for TeX parsing of the braket package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {ParseMethod} from '../Types.js';\nimport BaseMethods from '../base/BaseMethods.js';\nimport TexParser from '../TexParser.js';\nimport {TEXCLASS} from '../../../core/MmlTree/MmlNode.js';\nimport TexError from '../TexError.js';\n\n\nlet BraketMethods: Record<string, ParseMethod> = {};\n\nBraketMethods.Macro = BaseMethods.Macro;\n\n\n/**\n * Generate a bra-ket expression.\n * @param {TexParser} parser The current TeX parser.\n * @param {string} name Name of the current control sequence.\n * @param {string} open Opening delimiter.\n * @param {string} close Closing delimiter.\n * @param {boolean} stretchy Is it stretchy.\n * @param {number} barmax Maximum number of bars allowed.\n */\nBraketMethods.Braket = function(parser: TexParser, _name: string,\n                                open: string, close: string,\n                                stretchy: boolean, barmax: number) {\n  let next = parser.GetNext();\n  if (next === '') {\n    throw new TexError('MissingArgFor', 'Missing argument for %1', parser.currentCS);\n  }\n  let single = true;\n  if (next === '{') {\n    parser.i++;\n    single = false;\n  }\n  parser.Push(\n    parser.itemFactory.create('braket')\n      .setProperties({barmax: barmax, barcount: 0, open: open,\n                      close: close, stretchy: stretchy, single: single}));\n};\n\n\n/**\n * Generate a bar. If inside a bra-ket expressions it's handled accordingly.\n * @param {TexParser} parser The current TeX parser.\n * @param {string} name Name of the current control sequence.\n */\nBraketMethods.Bar = function(parser: TexParser, name: string) {\n  let c = name === '|' ? '|' : '\\u2225';\n  let top = parser.stack.Top();\n  if (top.kind !== 'braket' ||\n      top.getProperty('barcount') >= top.getProperty('barmax')) {\n    let mml = parser.create('token', 'mo', {texClass: TEXCLASS.ORD, stretchy: false}, c);\n    parser.Push(mml);\n    return;\n  }\n  if (c === '|' && parser.GetNext() === '|') {\n    parser.i++;\n    c = '\\u2225';\n  }\n  let stretchy = top.getProperty('stretchy');\n  if (!stretchy) {\n    let node = parser.create('token', 'mo', {stretchy: false, braketbar: true}, c);\n    parser.Push(node);\n    return;\n  }\n  let node = parser.create('node', 'TeXAtom', [], {texClass: TEXCLASS.CLOSE});\n  parser.Push(node);\n  top.setProperty('barcount', top.getProperty('barcount') as number + 1);\n  node = parser.create('token', 'mo', {stretchy: true, braketbar: true}, c);\n  parser.Push(node);\n  node = parser.create('node', 'TeXAtom', [], {texClass: TEXCLASS.OPEN});\n  parser.Push(node);\n};\n\n\nexport default BraketMethods;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}