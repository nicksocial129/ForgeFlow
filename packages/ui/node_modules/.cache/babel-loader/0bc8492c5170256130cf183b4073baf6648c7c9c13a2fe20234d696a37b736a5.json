{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MmlMath = void 0;\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\nvar MmlMath = function (_super) {\n  __extends(MmlMath, _super);\n  function MmlMath() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(MmlMath.prototype, \"kind\", {\n    get: function () {\n      return 'math';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMath.prototype, \"linebreakContainer\", {\n    get: function () {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MmlMath.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {\n    if (this.attributes.get('mode') === 'display') {\n      this.attributes.setInherited('display', 'block');\n    }\n    attributes = this.addInheritedAttributes(attributes, this.attributes.getAllAttributes());\n    display = !!this.attributes.get('displaystyle') || !this.attributes.get('displaystyle') && this.attributes.get('display') === 'block';\n    this.attributes.setInherited('displaystyle', display);\n    level = this.attributes.get('scriptlevel') || this.constructor.defaults['scriptlevel'];\n    _super.prototype.setChildInheritedAttributes.call(this, attributes, display, level, prime);\n  };\n  MmlMath.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlLayoutNode.defaults), {\n    mathvariant: 'normal',\n    mathsize: 'normal',\n    mathcolor: '',\n    mathbackground: 'transparent',\n    dir: 'ltr',\n    scriptlevel: 0,\n    displaystyle: false,\n    display: 'inline',\n    maxwidth: '',\n    overflow: 'linebreak',\n    altimg: '',\n    'altimg-width': '',\n    'altimg-height': '',\n    'altimg-valign': '',\n    alttext: '',\n    cdgroup: '',\n    scriptsizemultiplier: 1 / Math.sqrt(2),\n    scriptminsize: '8px',\n    infixlinebreakstyle: 'before',\n    lineleading: '1ex',\n    linebreakmultchar: '\\u2062',\n    indentshift: 'auto',\n    indentalign: 'auto',\n    indenttarget: '',\n    indentalignfirst: 'indentalign',\n    indentshiftfirst: 'indentshift',\n    indentalignlast: 'indentalign',\n    indentshiftlast: 'indentshift'\n  });\n  return MmlMath;\n}(MmlNode_js_1.AbstractMmlLayoutNode);\nexports.MmlMath = MmlMath;","map":{"version":3,"names":["MmlNode_js_1","require","MmlMath","_super","__extends","Object","defineProperty","prototype","get","setChildInheritedAttributes","attributes","display","level","prime","setInherited","addInheritedAttributes","getAllAttributes","constructor","defaults","call","__assign","AbstractMmlLayoutNode","mathvariant","mathsize","mathcolor","mathbackground","dir","scriptlevel","displaystyle","maxwidth","overflow","altimg","alttext","cdgroup","scriptsizemultiplier","Math","sqrt","scriptminsize","infixlinebreakstyle","lineleading","linebreakmultchar","indentshift","indentalign","indenttarget","indentalignfirst","indentshiftfirst","indentalignlast","indentshiftlast","exports"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/math.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMath node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {AbstractMmlLayoutNode, AttributeList} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMath node class (subclass of AbstractMmlLayoutNode)\n */\n\nexport class MmlMath extends AbstractMmlLayoutNode {\n\n  /**\n   *  These are used as the defaults for any attributes marked INHERIT in other classes\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlLayoutNode.defaults,\n    mathvariant: 'normal',\n    mathsize: 'normal',\n    mathcolor: '', // Should be 'black', but allow it to inherit from surrounding text\n    mathbackground: 'transparent',\n    dir: 'ltr',\n    scriptlevel: 0,\n    displaystyle: false,\n    display: 'inline',\n    maxwidth: '',\n    overflow: 'linebreak',\n    altimg: '',\n    'altimg-width': '',\n    'altimg-height': '',\n    'altimg-valign': '',\n    alttext: '',\n    cdgroup: '',\n    scriptsizemultiplier: 1 / Math.sqrt(2),\n    scriptminsize: '8px',        // Should be 8pt, but that's too big\n    infixlinebreakstyle: 'before',\n    lineleading: '1ex',\n    linebreakmultchar: '\\u2062', // Invisible times\n    indentshift: 'auto',         // Use user configuration\n    indentalign: 'auto',\n    indenttarget: '',\n    indentalignfirst: 'indentalign',\n    indentshiftfirst: 'indentshift',\n    indentalignlast:  'indentalign',\n    indentshiftlast:  'indentshift'\n  };\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'math';\n  }\n\n  /**\n   * Linebreaking can occur in math nodes\n   * @override\n   */\n  public get linebreakContainer() {\n    return true;\n  }\n\n  /**\n   * The attributes of math nodes are inherited, so add them into the list.\n   * The displaystyle attribute comes from the display attribute if not given explicitly\n   * The scriptlevel comes from the scriptlevel attribute or default\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    if (this.attributes.get('mode') === 'display') {\n      this.attributes.setInherited('display', 'block');\n    }\n    attributes = this.addInheritedAttributes(attributes, this.attributes.getAllAttributes());\n    display = (!!this.attributes.get('displaystyle') ||\n               (!this.attributes.get('displaystyle') && this.attributes.get('display') === 'block'));\n    this.attributes.setInherited('displaystyle', display);\n    level = (this.attributes.get('scriptlevel') ||\n             (this.constructor as typeof MmlMath).defaults['scriptlevel']) as number;\n    super.setChildInheritedAttributes(attributes, display, level, prime);\n  }\n\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAAA,YAAA,GAAAC,OAAA;AAOA,IAAAC,OAAA,aAAAC,MAAA;EAA6BC,SAAA,CAAAF,OAAA,EAAAC,MAAA;EAA7B,SAAAD,QAAA;;EAwEA;EAhCEG,MAAA,CAAAC,cAAA,CAAWJ,OAAA,CAAAK,SAAA,QAAI;SAAf,SAAAC,CAAA;MACE,OAAO,MAAM;IACf,CAAC;;;;EAMDH,MAAA,CAAAC,cAAA,CAAWJ,OAAA,CAAAK,SAAA,sBAAkB;SAA7B,SAAAC,CAAA;MACE,OAAO,IAAI;IACb,CAAC;;;;EASSN,OAAA,CAAAK,SAAA,CAAAE,2BAA2B,GAArC,UAAsCC,UAAyB,EAAEC,OAAgB,EAAEC,KAAa,EAAEC,KAAc;IAC9G,IAAI,IAAI,CAACH,UAAU,CAACF,GAAG,CAAC,MAAM,CAAC,KAAK,SAAS,EAAE;MAC7C,IAAI,CAACE,UAAU,CAACI,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC;;IAElDJ,UAAU,GAAG,IAAI,CAACK,sBAAsB,CAACL,UAAU,EAAE,IAAI,CAACA,UAAU,CAACM,gBAAgB,EAAE,CAAC;IACxFL,OAAO,GAAI,CAAC,CAAC,IAAI,CAACD,UAAU,CAACF,GAAG,CAAC,cAAc,CAAC,IACpC,CAAC,IAAI,CAACE,UAAU,CAACF,GAAG,CAAC,cAAc,CAAC,IAAI,IAAI,CAACE,UAAU,CAACF,GAAG,CAAC,SAAS,CAAC,KAAK,OAAS;IAChG,IAAI,CAACE,UAAU,CAACI,YAAY,CAAC,cAAc,EAAEH,OAAO,CAAC;IACrDC,KAAK,GAAI,IAAI,CAACF,UAAU,CAACF,GAAG,CAAC,aAAa,CAAC,IACjC,IAAI,CAACS,WAA8B,CAACC,QAAQ,CAAC,aAAa,CAAY;IAChFf,MAAA,CAAAI,SAAA,CAAME,2BAA2B,CAAAU,IAAA,OAACT,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,CAAC;EACtE,CAAC;EAjEaX,OAAA,CAAAgB,QAAQ,GAAAE,QAAA,CAAAA,QAAA,KACjBpB,YAAA,CAAAqB,qBAAqB,CAACH,QAAQ;IACjCI,WAAW,EAAE,QAAQ;IACrBC,QAAQ,EAAE,QAAQ;IAClBC,SAAS,EAAE,EAAE;IACbC,cAAc,EAAE,aAAa;IAC7BC,GAAG,EAAE,KAAK;IACVC,WAAW,EAAE,CAAC;IACdC,YAAY,EAAE,KAAK;IACnBjB,OAAO,EAAE,QAAQ;IACjBkB,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE,WAAW;IACrBC,MAAM,EAAE,EAAE;IACV,cAAc,EAAE,EAAE;IAClB,eAAe,EAAE,EAAE;IACnB,eAAe,EAAE,EAAE;IACnBC,OAAO,EAAE,EAAE;IACXC,OAAO,EAAE,EAAE;IACXC,oBAAoB,EAAE,CAAC,GAAGC,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;IACtCC,aAAa,EAAE,KAAK;IACpBC,mBAAmB,EAAE,QAAQ;IAC7BC,WAAW,EAAE,KAAK;IAClBC,iBAAiB,EAAE,QAAQ;IAC3BC,WAAW,EAAE,MAAM;IACnBC,WAAW,EAAE,MAAM;IACnBC,YAAY,EAAE,EAAE;IAChBC,gBAAgB,EAAE,aAAa;IAC/BC,gBAAgB,EAAE,aAAa;IAC/BC,eAAe,EAAG,aAAa;IAC/BC,eAAe,EAAG;EAAa;EAsCnC,OAAA7C,OAAC;CAAA,CAxE4BF,YAAA,CAAAqB,qBAAqB;AAArC2B,OAAA,CAAA9C,OAAA,GAAAA,OAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}