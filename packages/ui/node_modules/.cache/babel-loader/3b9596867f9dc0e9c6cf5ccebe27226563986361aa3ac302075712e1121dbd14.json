{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VerbConfiguration = exports.VerbMethods = void 0;\nvar Configuration_js_1 = require(\"../Configuration.js\");\nvar TexConstants_js_1 = require(\"../TexConstants.js\");\nvar SymbolMap_js_1 = require(\"../SymbolMap.js\");\nvar TexError_js_1 = __importDefault(require(\"../TexError.js\"));\nexports.VerbMethods = {};\nexports.VerbMethods.Verb = function (parser, name) {\n  var c = parser.GetNext();\n  var start = ++parser.i;\n  if (c === '') {\n    throw new TexError_js_1.default('MissingArgFor', 'Missing argument for %1', name);\n  }\n  while (parser.i < parser.string.length && parser.string.charAt(parser.i) !== c) {\n    parser.i++;\n  }\n  if (parser.i === parser.string.length) {\n    throw new TexError_js_1.default('NoClosingDelim', 'Can\\'t find closing delimiter for %1', parser.currentCS);\n  }\n  var text = parser.string.slice(start, parser.i).replace(/ /g, '\\u00A0');\n  parser.i++;\n  parser.Push(parser.create('token', 'mtext', {\n    mathvariant: TexConstants_js_1.TexConstant.Variant.MONOSPACE\n  }, text));\n};\nnew SymbolMap_js_1.CommandMap('verb', {\n  verb: 'Verb'\n}, exports.VerbMethods);\nexports.VerbConfiguration = Configuration_js_1.Configuration.create('verb', {\n  handler: {\n    macro: ['verb']\n  }\n});","map":{"version":3,"names":["Configuration_js_1","require","TexConstants_js_1","SymbolMap_js_1","TexError_js_1","__importDefault","exports","VerbMethods","Verb","parser","name","c","GetNext","start","i","default","string","length","charAt","currentCS","text","slice","replace","Push","create","mathvariant","TexConstant","Variant","MONOSPACE","CommandMap","verb","VerbConfiguration","Configuration","handler","macro"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/input/tex/verb/VerbConfiguration.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the verb package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport {TexConstant} from '../TexConstants.js';\nimport TexParser from '../TexParser.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {ParseMethod} from '../Types.js';\nimport TexError from '../TexError.js';\n\n\n// Namespace\nexport let VerbMethods: Record<string, ParseMethod> = {};\n\n\n/**\n * Implements the verbatim notation \\verb|...|.\n * @param {TexParser} parser The current tex parser.\n * @param {string} name The name of the calling macro.\n */\nVerbMethods.Verb = function(parser: TexParser, name: string) {\n  const c = parser.GetNext();\n  const start = ++parser.i;\n  if (c === '' ) {\n    throw new TexError('MissingArgFor', 'Missing argument for %1', name);\n  }\n  while (parser.i < parser.string.length &&\n         parser.string.charAt(parser.i) !== c) {\n    parser.i++;\n  }\n  if (parser.i === parser.string.length) {\n    throw new TexError('NoClosingDelim',\n                       'Can\\'t find closing delimiter for %1',\n                       parser.currentCS);\n  }\n  const text = parser.string.slice(start, parser.i).replace(/ /g, '\\u00A0');\n  parser.i++;\n  parser.Push(parser.create('token', 'mtext',\n                            {mathvariant: TexConstant.Variant.MONOSPACE},\n                            text));\n};\n\n\nnew CommandMap('verb', {verb: 'Verb'}, VerbMethods);\n\n\nexport const VerbConfiguration = Configuration.create(\n  'verb', {handler: {macro: ['verb']}}\n);\n"],"mappings":";;;;;;;;;;;AAwBA,IAAAA,kBAAA,GAAAC,OAAA;AACA,IAAAC,iBAAA,GAAAD,OAAA;AAEA,IAAAE,cAAA,GAAAF,OAAA;AAEA,IAAAG,aAAA,GAAAC,eAAA,CAAAJ,OAAA;AAIWK,OAAA,CAAAC,WAAW,GAAgC,EAAE;AAQxDD,OAAA,CAAAC,WAAW,CAACC,IAAI,GAAG,UAASC,MAAiB,EAAEC,IAAY;EACzD,IAAMC,CAAC,GAAGF,MAAM,CAACG,OAAO,EAAE;EAC1B,IAAMC,KAAK,GAAG,EAAEJ,MAAM,CAACK,CAAC;EACxB,IAAIH,CAAC,KAAK,EAAE,EAAG;IACb,MAAM,IAAIP,aAAA,CAAAW,OAAQ,CAAC,eAAe,EAAE,yBAAyB,EAAEL,IAAI,CAAC;;EAEtE,OAAOD,MAAM,CAACK,CAAC,GAAGL,MAAM,CAACO,MAAM,CAACC,MAAM,IAC/BR,MAAM,CAACO,MAAM,CAACE,MAAM,CAACT,MAAM,CAACK,CAAC,CAAC,KAAKH,CAAC,EAAE;IAC3CF,MAAM,CAACK,CAAC,EAAE;;EAEZ,IAAIL,MAAM,CAACK,CAAC,KAAKL,MAAM,CAACO,MAAM,CAACC,MAAM,EAAE;IACrC,MAAM,IAAIb,aAAA,CAAAW,OAAQ,CAAC,gBAAgB,EAChB,sCAAsC,EACtCN,MAAM,CAACU,SAAS,CAAC;;EAEtC,IAAMC,IAAI,GAAGX,MAAM,CAACO,MAAM,CAACK,KAAK,CAACR,KAAK,EAAEJ,MAAM,CAACK,CAAC,CAAC,CAACQ,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;EACzEb,MAAM,CAACK,CAAC,EAAE;EACVL,MAAM,CAACc,IAAI,CAACd,MAAM,CAACe,MAAM,CAAC,OAAO,EAAE,OAAO,EAChB;IAACC,WAAW,EAAEvB,iBAAA,CAAAwB,WAAW,CAACC,OAAO,CAACC;EAAS,CAAC,EAC5CR,IAAI,CAAC,CAAC;AAClC,CAAC;AAGD,IAAIjB,cAAA,CAAA0B,UAAU,CAAC,MAAM,EAAE;EAACC,IAAI,EAAE;AAAM,CAAC,EAAExB,OAAA,CAAAC,WAAW,CAAC;AAGtCD,OAAA,CAAAyB,iBAAiB,GAAG/B,kBAAA,CAAAgC,aAAa,CAACR,MAAM,CACnD,MAAM,EAAE;EAACS,OAAO,EAAE;IAACC,KAAK,EAAE,CAAC,MAAM;EAAC;AAAC,CAAC,CACrC"},"metadata":{},"sourceType":"script","externalDependencies":[]}