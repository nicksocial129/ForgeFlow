{"ast":null,"code":"'use strict';\n\nvar high = require('highlight.js/lib/highlight.js');\nvar fault = require('fault');\n\n// The lowlight interface, which has to be compatible with highlight.js, as\n// this object is passed to highlight.js syntaxes.\n\nfunction High() {}\nHigh.prototype = high;\n\n// Expose.\nvar low = new High(); // Ha!\n\nmodule.exports = low;\nlow.highlight = highlight;\nlow.highlightAuto = autoHighlight;\nlow.registerLanguage = registerLanguage;\nlow.listLanguages = listLanguages;\nlow.registerAlias = registerAlias;\nlow.getLanguage = getLanguage;\nvar inherit = high.inherit;\nvar own = {}.hasOwnProperty;\nvar concat = [].concat;\nvar defaultPrefix = 'hljs-';\nvar keyInsensitive = 'case_insensitive';\nvar keyCachedVariants = 'cached_variants';\nvar space = ' ';\nvar verticalBar = '|';\n\n// Maps of syntaxes.\nvar languageNames = [];\nvar languages = {};\nvar aliases = {};\n\n// Highlighting with language detection.\n// Accepts a string with the code to highlight.\n// Returns an object with the following properties:\n//\n// *   `language` — Detected language\n// *   `relevance` — Integer\n// *   `value` — HAST tree with highlighting markup\n// *   `secondBest` — Object with the same structure for second-best\n//     heuristically detected language, may be absent.\nfunction autoHighlight(value, options) {\n  var settings = options || {};\n  var subset = settings.subset || languageNames;\n  var prefix = settings.prefix;\n  var length = subset.length;\n  var index = -1;\n  var result;\n  var secondBest;\n  var current;\n  var name;\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix;\n  }\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value);\n  }\n  secondBest = normalize({});\n  result = normalize({});\n  while (++index < length) {\n    name = subset[index];\n    if (!getLanguage(name)) {\n      continue;\n    }\n    current = normalize(coreHighlight(name, value, false, prefix));\n    current.language = name;\n    if (current.relevance > secondBest.relevance) {\n      secondBest = current;\n    }\n    if (current.relevance > result.relevance) {\n      secondBest = result;\n      result = current;\n    }\n  }\n  if (secondBest.language) {\n    result.secondBest = secondBest;\n  }\n  return result;\n}\n\n// Highlighting `value` in the language `language`.\nfunction highlight(language, value, options) {\n  var settings = options || {};\n  var prefix = settings.prefix;\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix;\n  }\n  return normalize(coreHighlight(language, value, true, prefix));\n}\n\n// Register a language.\nfunction registerLanguage(name, syntax) {\n  var lang = syntax(low);\n  languages[name] = lang;\n  languageNames.push(name);\n  if (lang.aliases) {\n    registerAlias(name, lang.aliases);\n  }\n}\n\n// Get a list of all registered languages.\nfunction listLanguages() {\n  return languageNames.concat();\n}\n\n// Register more aliases for an already registered language.\nfunction registerAlias(name, alias) {\n  var map = name;\n  var key;\n  var list;\n  var length;\n  var index;\n  if (alias) {\n    map = {};\n    map[name] = alias;\n  }\n  for (key in map) {\n    list = map[key];\n    list = typeof list === 'string' ? [list] : list;\n    length = list.length;\n    index = -1;\n    while (++index < length) {\n      aliases[list[index]] = key;\n    }\n  }\n}\n\n// Core highlighting function.\n// Accepts a language name, or an alias, and a string with the code to\n// highlight.\n// eslint-disable-next-line max-params\nfunction coreHighlight(name, value, ignore, prefix, continuation) {\n  var continuations = {};\n  var stack = [];\n  var modeBuffer = '';\n  var relevance = 0;\n  var language;\n  var top;\n  var current;\n  var currentChildren;\n  var offset;\n  var count;\n  var match;\n  var children;\n  if (typeof name !== 'string') {\n    throw fault('Expected `string` for name, got `%s`', name);\n  }\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value);\n  }\n  language = getLanguage(name);\n  top = continuation || language;\n  children = [];\n  current = top;\n  currentChildren = children;\n  if (!language) {\n    throw fault('Unknown language: `%s` is not registered', name);\n  }\n  compileLanguage(language);\n  try {\n    top.terminators.lastIndex = 0;\n    offset = 0;\n    match = top.terminators.exec(value);\n    while (match) {\n      count = processLexeme(value.substring(offset, match.index), match[0]);\n      offset = match.index + count;\n      top.terminators.lastIndex = offset;\n      match = top.terminators.exec(value);\n    }\n    processLexeme(value.substr(offset));\n    current = top;\n    while (current.parent) {\n      if (current.className) {\n        pop();\n      }\n      current = current.parent;\n    }\n    return {\n      relevance: relevance,\n      value: currentChildren,\n      language: name,\n      top: top\n    };\n  } catch (error) {\n    /* istanbul ignore if - Catch-all  */\n    if (error.message.indexOf('Illegal') === -1) {\n      throw error;\n    }\n    return {\n      relevance: 0,\n      value: addText(value, [])\n    };\n  }\n\n  // Process a lexeme.  Returns next position.\n  function processLexeme(buffer, lexeme) {\n    var newMode;\n    var endMode;\n    var origin;\n    modeBuffer += buffer;\n    if (lexeme === undefined) {\n      addSiblings(processBuffer(), currentChildren);\n      return 0;\n    }\n    newMode = subMode(lexeme, top);\n    if (newMode) {\n      addSiblings(processBuffer(), currentChildren);\n      startNewMode(newMode, lexeme);\n      return newMode.returnBegin ? 0 : lexeme.length;\n    }\n    endMode = endOfMode(top, lexeme);\n    if (endMode) {\n      origin = top;\n      if (!(origin.returnEnd || origin.excludeEnd)) {\n        modeBuffer += lexeme;\n      }\n      addSiblings(processBuffer(), currentChildren);\n\n      // Close open modes.\n      do {\n        if (top.className) {\n          pop();\n        }\n        relevance += top.relevance;\n        top = top.parent;\n      } while (top !== endMode.parent);\n      if (origin.excludeEnd) {\n        addText(lexeme, currentChildren);\n      }\n      modeBuffer = '';\n      if (endMode.starts) {\n        startNewMode(endMode.starts, '');\n      }\n      return origin.returnEnd ? 0 : lexeme.length;\n    }\n    if (isIllegal(lexeme, top)) {\n      throw fault('Illegal lexeme \"%s\" for mode \"%s\"', lexeme, top.className || '<unnamed>');\n    }\n\n    // Parser should not reach this point as all types of lexemes should be\n    // caught earlier, but if it does due to some bug make sure it advances\n    // at least one character forward to prevent infinite looping.\n    modeBuffer += lexeme;\n    return lexeme.length || /* istanbul ignore next */1;\n  }\n\n  // Start a new mode with a `lexeme` to process.\n  function startNewMode(mode, lexeme) {\n    var node;\n    if (mode.className) {\n      node = build(mode.className, []);\n    }\n    if (mode.returnBegin) {\n      modeBuffer = '';\n    } else if (mode.excludeBegin) {\n      addText(lexeme, currentChildren);\n      modeBuffer = '';\n    } else {\n      modeBuffer = lexeme;\n    }\n\n    // Enter a new mode.\n    if (node) {\n      currentChildren.push(node);\n      stack.push(currentChildren);\n      currentChildren = node.children;\n    }\n    top = Object.create(mode, {\n      parent: {\n        value: top\n      }\n    });\n  }\n\n  // Process the buffer.\n  function processBuffer() {\n    var result = top.subLanguage ? processSubLanguage() : processKeywords();\n    modeBuffer = '';\n    return result;\n  }\n\n  // Process a sublanguage (returns a list of nodes).\n  function processSubLanguage() {\n    var explicit = typeof top.subLanguage === 'string';\n    var subvalue;\n\n    /* istanbul ignore if - support non-loaded sublanguages */\n    if (explicit && !languages[top.subLanguage]) {\n      return addText(modeBuffer, []);\n    }\n    if (explicit) {\n      subvalue = coreHighlight(top.subLanguage, modeBuffer, true, prefix, continuations[top.subLanguage]);\n    } else {\n      subvalue = autoHighlight(modeBuffer, {\n        subset: top.subLanguage.length === 0 ? undefined : top.subLanguage,\n        prefix: prefix\n      });\n    }\n\n    // If we couldn’t highlight, for example because the requests subset isn’t\n    // loaded, return a text node.\n    if (!subvalue.language) {\n      return [buildText(modeBuffer)];\n    }\n\n    // Counting embedded language score towards the host language may be\n    // disabled with zeroing the containing mode relevance.\n    // Usecase in point is Markdown that allows XML everywhere and makes every\n    // XML snippet to have a much larger Markdown score.\n    if (top.relevance > 0) {\n      relevance += subvalue.relevance;\n    }\n    if (explicit) {\n      continuations[top.subLanguage] = subvalue.top;\n    }\n    return [build(subvalue.language, subvalue.value, true)];\n  }\n\n  // Process keywords. Returns nodes.\n  function processKeywords() {\n    var nodes = [];\n    var lastIndex;\n    var keyword;\n    var node;\n    var submatch;\n    if (!top.keywords) {\n      return addText(modeBuffer, nodes);\n    }\n    lastIndex = 0;\n    top.lexemesRe.lastIndex = 0;\n    keyword = top.lexemesRe.exec(modeBuffer);\n    while (keyword) {\n      addText(modeBuffer.substring(lastIndex, keyword.index), nodes);\n      submatch = keywordMatch(top, keyword);\n      if (submatch) {\n        relevance += submatch[1];\n        node = build(submatch[0], []);\n        nodes.push(node);\n        addText(keyword[0], node.children);\n      } else {\n        addText(keyword[0], nodes);\n      }\n      lastIndex = top.lexemesRe.lastIndex;\n      keyword = top.lexemesRe.exec(modeBuffer);\n    }\n    addText(modeBuffer.substr(lastIndex), nodes);\n    return nodes;\n  }\n\n  // Add siblings.\n  function addSiblings(siblings, nodes) {\n    var length = siblings.length;\n    var index = -1;\n    var sibling;\n    while (++index < length) {\n      sibling = siblings[index];\n      if (sibling.type === 'text') {\n        addText(sibling.value, nodes);\n      } else {\n        nodes.push(sibling);\n      }\n    }\n  }\n\n  // Add a text.\n  function addText(value, nodes) {\n    var tail;\n    if (value) {\n      tail = nodes[nodes.length - 1];\n      if (tail && tail.type === 'text') {\n        tail.value += value;\n      } else {\n        nodes.push(buildText(value));\n      }\n    }\n    return nodes;\n  }\n\n  // Build a text.\n  function buildText(value) {\n    return {\n      type: 'text',\n      value: value\n    };\n  }\n\n  // Build a span.\n  function build(name, contents, noPrefix) {\n    return {\n      type: 'element',\n      tagName: 'span',\n      properties: {\n        className: [(noPrefix ? '' : prefix) + name]\n      },\n      children: contents\n    };\n  }\n\n  // Check if the first word in `keywords` is a keyword.\n  function keywordMatch(mode, keywords) {\n    var keyword = keywords[0];\n    if (language[keyInsensitive]) {\n      keyword = keyword.toLowerCase();\n    }\n    return own.call(mode.keywords, keyword) && mode.keywords[keyword];\n  }\n\n  // Check if `lexeme` is illegal according to `mode`.\n  function isIllegal(lexeme, mode) {\n    return !ignore && test(mode.illegalRe, lexeme);\n  }\n\n  // Check if `lexeme` ends `mode`.\n  function endOfMode(mode, lexeme) {\n    if (test(mode.endRe, lexeme)) {\n      while (mode.endsParent && mode.parent) {\n        mode = mode.parent;\n      }\n      return mode;\n    }\n    if (mode.endsWithParent) {\n      return endOfMode(mode.parent, lexeme);\n    }\n  }\n\n  // Check a sub-mode.\n  function subMode(lexeme, mode) {\n    var values = mode.contains;\n    var length = values.length;\n    var index = -1;\n    while (++index < length) {\n      if (test(values[index].beginRe, lexeme)) {\n        return values[index];\n      }\n    }\n  }\n\n  // Exit the current context.\n  function pop() {\n    /* istanbul ignore next - removed in hljs 9.3 */\n    currentChildren = stack.pop() || children;\n  }\n}\nfunction expandMode(mode) {\n  var length;\n  var index;\n  var variants;\n  var result;\n  if (mode.variants && !mode[keyCachedVariants]) {\n    variants = mode.variants;\n    length = variants.length;\n    index = -1;\n    result = [];\n    while (++index < length) {\n      result[index] = inherit(mode, {\n        variants: null\n      }, variants[index]);\n    }\n    mode[keyCachedVariants] = result;\n  }\n  return mode[keyCachedVariants] || (mode.endsWithParent ? [inherit(mode)] : [mode]);\n}\n\n// Compile a language.\nfunction compileLanguage(language) {\n  compileMode(language);\n\n  // Compile a language mode, optionally with a parent.\n  // eslint-disable-next-line complexity\n  function compileMode(mode, parent) {\n    var compiledKeywords = {};\n    var terminators;\n    if (mode.compiled) {\n      return;\n    }\n    mode.compiled = true;\n    mode.keywords = mode.keywords || mode.beginKeywords;\n    if (mode.keywords) {\n      if (typeof mode.keywords === 'string') {\n        flatten('keyword', mode.keywords);\n      } else {\n        Object.keys(mode.keywords).forEach(function (className) {\n          flatten(className, mode.keywords[className]);\n        });\n      }\n      mode.keywords = compiledKeywords;\n    }\n    mode.lexemesRe = langRe(mode.lexemes || /\\w+/, true);\n    if (parent) {\n      if (mode.beginKeywords) {\n        mode.begin = '\\\\b(' + mode.beginKeywords.split(space).join(verticalBar) + ')\\\\b';\n      }\n      if (!mode.begin) {\n        mode.begin = /\\B|\\b/;\n      }\n      mode.beginRe = langRe(mode.begin);\n      if (!mode.end && !mode.endsWithParent) {\n        mode.end = /\\B|\\b/;\n      }\n      if (mode.end) {\n        mode.endRe = langRe(mode.end);\n      }\n      mode.terminatorEnd = source(mode.end) || '';\n      if (mode.endsWithParent && parent.terminatorEnd) {\n        mode.terminatorEnd += (mode.end ? verticalBar : '') + parent.terminatorEnd;\n      }\n    }\n    if (mode.illegal) {\n      mode.illegalRe = langRe(mode.illegal);\n    }\n    if (mode.relevance === undefined) {\n      mode.relevance = 1;\n    }\n    if (!mode.contains) {\n      mode.contains = [];\n    }\n    mode.contains = concat.apply([], mode.contains.map(function (c) {\n      return expandMode(c === 'self' ? mode : c);\n    }));\n    mode.contains.forEach(function (c) {\n      compileMode(c, mode);\n    });\n    if (mode.starts) {\n      compileMode(mode.starts, parent);\n    }\n    terminators = mode.contains.map(map).concat([mode.terminatorEnd, mode.illegal]).map(source).filter(Boolean);\n    mode.terminators = terminators.length === 0 ? {\n      exec: execNoop\n    } : langRe(terminators.join(verticalBar), true);\n    function map(c) {\n      return c.beginKeywords ? '\\\\.?(' + c.begin + ')\\\\.?' : c.begin;\n    }\n\n    // Flatten a classname.\n    function flatten(className, value) {\n      var pairs;\n      var pair;\n      var index;\n      var length;\n      if (language[keyInsensitive]) {\n        value = value.toLowerCase();\n      }\n      pairs = value.split(space);\n      length = pairs.length;\n      index = -1;\n      while (++index < length) {\n        pair = pairs[index].split(verticalBar);\n        compiledKeywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1];\n      }\n    }\n  }\n\n  // Create a regex for `value`.\n  function langRe(value, global) {\n    return new RegExp(source(value), 'm' + (language[keyInsensitive] ? 'i' : '') + (global ? 'g' : ''));\n  }\n\n  // Get the source of an expression or string.\n  function source(re) {\n    return re && re.source || re;\n  }\n}\n\n// Normalize a syntax result.\nfunction normalize(result) {\n  return {\n    relevance: result.relevance || 0,\n    language: result.language || null,\n    value: result.value || []\n  };\n}\n\n// Check if `expression` matches `lexeme`.\nfunction test(expression, lexeme) {\n  var match = expression && expression.exec(lexeme);\n  return match && match.index === 0;\n}\n\n// No-op exec.\nfunction execNoop() {\n  return null;\n}\n\n// Get a language by `name`.\nfunction getLanguage(name) {\n  name = name.toLowerCase();\n  return languages[name] || languages[aliases[name]];\n}","map":{"version":3,"names":["high","require","fault","High","prototype","low","module","exports","highlight","highlightAuto","autoHighlight","registerLanguage","listLanguages","registerAlias","getLanguage","inherit","own","hasOwnProperty","concat","defaultPrefix","keyInsensitive","keyCachedVariants","space","verticalBar","languageNames","languages","aliases","value","options","settings","subset","prefix","length","index","result","secondBest","current","name","undefined","normalize","coreHighlight","language","relevance","syntax","lang","push","alias","map","key","list","ignore","continuation","continuations","stack","modeBuffer","top","currentChildren","offset","count","match","children","compileLanguage","terminators","lastIndex","exec","processLexeme","substring","substr","parent","className","pop","error","message","indexOf","addText","buffer","lexeme","newMode","endMode","origin","addSiblings","processBuffer","subMode","startNewMode","returnBegin","endOfMode","returnEnd","excludeEnd","starts","isIllegal","mode","node","build","excludeBegin","Object","create","subLanguage","processSubLanguage","processKeywords","explicit","subvalue","buildText","nodes","keyword","submatch","keywords","lexemesRe","keywordMatch","siblings","sibling","type","tail","contents","noPrefix","tagName","properties","toLowerCase","call","test","illegalRe","endRe","endsParent","endsWithParent","values","contains","beginRe","expandMode","variants","compileMode","compiledKeywords","compiled","beginKeywords","flatten","keys","forEach","langRe","lexemes","begin","split","join","end","terminatorEnd","source","illegal","apply","c","filter","Boolean","execNoop","pairs","pair","Number","global","RegExp","re","expression"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/lowlight/lib/core.js"],"sourcesContent":["'use strict'\n\nvar high = require('highlight.js/lib/highlight.js')\nvar fault = require('fault')\n\n// The lowlight interface, which has to be compatible with highlight.js, as\n// this object is passed to highlight.js syntaxes.\n\nfunction High() {}\n\nHigh.prototype = high\n\n// Expose.\nvar low = new High() // Ha!\n\nmodule.exports = low\n\nlow.highlight = highlight\nlow.highlightAuto = autoHighlight\nlow.registerLanguage = registerLanguage\nlow.listLanguages = listLanguages\nlow.registerAlias = registerAlias\nlow.getLanguage = getLanguage\n\nvar inherit = high.inherit\nvar own = {}.hasOwnProperty\nvar concat = [].concat\n\nvar defaultPrefix = 'hljs-'\nvar keyInsensitive = 'case_insensitive'\nvar keyCachedVariants = 'cached_variants'\nvar space = ' '\nvar verticalBar = '|'\n\n// Maps of syntaxes.\nvar languageNames = []\nvar languages = {}\nvar aliases = {}\n\n// Highlighting with language detection.\n// Accepts a string with the code to highlight.\n// Returns an object with the following properties:\n//\n// *   `language` — Detected language\n// *   `relevance` — Integer\n// *   `value` — HAST tree with highlighting markup\n// *   `secondBest` — Object with the same structure for second-best\n//     heuristically detected language, may be absent.\nfunction autoHighlight(value, options) {\n  var settings = options || {}\n  var subset = settings.subset || languageNames\n  var prefix = settings.prefix\n  var length = subset.length\n  var index = -1\n  var result\n  var secondBest\n  var current\n  var name\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix\n  }\n\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value)\n  }\n\n  secondBest = normalize({})\n  result = normalize({})\n\n  while (++index < length) {\n    name = subset[index]\n\n    if (!getLanguage(name)) {\n      continue\n    }\n\n    current = normalize(coreHighlight(name, value, false, prefix))\n\n    current.language = name\n\n    if (current.relevance > secondBest.relevance) {\n      secondBest = current\n    }\n\n    if (current.relevance > result.relevance) {\n      secondBest = result\n      result = current\n    }\n  }\n\n  if (secondBest.language) {\n    result.secondBest = secondBest\n  }\n\n  return result\n}\n\n// Highlighting `value` in the language `language`.\nfunction highlight(language, value, options) {\n  var settings = options || {}\n  var prefix = settings.prefix\n\n  if (prefix === null || prefix === undefined) {\n    prefix = defaultPrefix\n  }\n\n  return normalize(coreHighlight(language, value, true, prefix))\n}\n\n// Register a language.\nfunction registerLanguage(name, syntax) {\n  var lang = syntax(low)\n\n  languages[name] = lang\n\n  languageNames.push(name)\n\n  if (lang.aliases) {\n    registerAlias(name, lang.aliases)\n  }\n}\n\n// Get a list of all registered languages.\nfunction listLanguages() {\n  return languageNames.concat()\n}\n\n// Register more aliases for an already registered language.\nfunction registerAlias(name, alias) {\n  var map = name\n  var key\n  var list\n  var length\n  var index\n\n  if (alias) {\n    map = {}\n    map[name] = alias\n  }\n\n  for (key in map) {\n    list = map[key]\n    list = typeof list === 'string' ? [list] : list\n    length = list.length\n    index = -1\n\n    while (++index < length) {\n      aliases[list[index]] = key\n    }\n  }\n}\n\n// Core highlighting function.\n// Accepts a language name, or an alias, and a string with the code to\n// highlight.\n// eslint-disable-next-line max-params\nfunction coreHighlight(name, value, ignore, prefix, continuation) {\n  var continuations = {}\n  var stack = []\n  var modeBuffer = ''\n  var relevance = 0\n  var language\n  var top\n  var current\n  var currentChildren\n  var offset\n  var count\n  var match\n  var children\n\n  if (typeof name !== 'string') {\n    throw fault('Expected `string` for name, got `%s`', name)\n  }\n\n  if (typeof value !== 'string') {\n    throw fault('Expected `string` for value, got `%s`', value)\n  }\n\n  language = getLanguage(name)\n  top = continuation || language\n  children = []\n\n  current = top\n  currentChildren = children\n\n  if (!language) {\n    throw fault('Unknown language: `%s` is not registered', name)\n  }\n\n  compileLanguage(language)\n\n  try {\n    top.terminators.lastIndex = 0\n    offset = 0\n    match = top.terminators.exec(value)\n\n    while (match) {\n      count = processLexeme(value.substring(offset, match.index), match[0])\n      offset = match.index + count\n      top.terminators.lastIndex = offset\n      match = top.terminators.exec(value)\n    }\n\n    processLexeme(value.substr(offset))\n    current = top\n\n    while (current.parent) {\n      if (current.className) {\n        pop()\n      }\n\n      current = current.parent\n    }\n\n    return {\n      relevance: relevance,\n      value: currentChildren,\n      language: name,\n      top: top\n    }\n  } catch (error) {\n    /* istanbul ignore if - Catch-all  */\n    if (error.message.indexOf('Illegal') === -1) {\n      throw error\n    }\n\n    return {relevance: 0, value: addText(value, [])}\n  }\n\n  // Process a lexeme.  Returns next position.\n  function processLexeme(buffer, lexeme) {\n    var newMode\n    var endMode\n    var origin\n\n    modeBuffer += buffer\n\n    if (lexeme === undefined) {\n      addSiblings(processBuffer(), currentChildren)\n\n      return 0\n    }\n\n    newMode = subMode(lexeme, top)\n\n    if (newMode) {\n      addSiblings(processBuffer(), currentChildren)\n\n      startNewMode(newMode, lexeme)\n\n      return newMode.returnBegin ? 0 : lexeme.length\n    }\n\n    endMode = endOfMode(top, lexeme)\n\n    if (endMode) {\n      origin = top\n\n      if (!(origin.returnEnd || origin.excludeEnd)) {\n        modeBuffer += lexeme\n      }\n\n      addSiblings(processBuffer(), currentChildren)\n\n      // Close open modes.\n      do {\n        if (top.className) {\n          pop()\n        }\n\n        relevance += top.relevance\n        top = top.parent\n      } while (top !== endMode.parent)\n\n      if (origin.excludeEnd) {\n        addText(lexeme, currentChildren)\n      }\n\n      modeBuffer = ''\n\n      if (endMode.starts) {\n        startNewMode(endMode.starts, '')\n      }\n\n      return origin.returnEnd ? 0 : lexeme.length\n    }\n\n    if (isIllegal(lexeme, top)) {\n      throw fault(\n        'Illegal lexeme \"%s\" for mode \"%s\"',\n        lexeme,\n        top.className || '<unnamed>'\n      )\n    }\n\n    // Parser should not reach this point as all types of lexemes should be\n    // caught earlier, but if it does due to some bug make sure it advances\n    // at least one character forward to prevent infinite looping.\n    modeBuffer += lexeme\n\n    return lexeme.length || /* istanbul ignore next */ 1\n  }\n\n  // Start a new mode with a `lexeme` to process.\n  function startNewMode(mode, lexeme) {\n    var node\n\n    if (mode.className) {\n      node = build(mode.className, [])\n    }\n\n    if (mode.returnBegin) {\n      modeBuffer = ''\n    } else if (mode.excludeBegin) {\n      addText(lexeme, currentChildren)\n\n      modeBuffer = ''\n    } else {\n      modeBuffer = lexeme\n    }\n\n    // Enter a new mode.\n    if (node) {\n      currentChildren.push(node)\n      stack.push(currentChildren)\n      currentChildren = node.children\n    }\n\n    top = Object.create(mode, {parent: {value: top}})\n  }\n\n  // Process the buffer.\n  function processBuffer() {\n    var result = top.subLanguage ? processSubLanguage() : processKeywords()\n    modeBuffer = ''\n    return result\n  }\n\n  // Process a sublanguage (returns a list of nodes).\n  function processSubLanguage() {\n    var explicit = typeof top.subLanguage === 'string'\n    var subvalue\n\n    /* istanbul ignore if - support non-loaded sublanguages */\n    if (explicit && !languages[top.subLanguage]) {\n      return addText(modeBuffer, [])\n    }\n\n    if (explicit) {\n      subvalue = coreHighlight(\n        top.subLanguage,\n        modeBuffer,\n        true,\n        prefix,\n        continuations[top.subLanguage]\n      )\n    } else {\n      subvalue = autoHighlight(modeBuffer, {\n        subset: top.subLanguage.length === 0 ? undefined : top.subLanguage,\n        prefix: prefix\n      })\n    }\n\n    // If we couldn’t highlight, for example because the requests subset isn’t\n    // loaded, return a text node.\n    if (!subvalue.language) {\n      return [buildText(modeBuffer)]\n    }\n\n    // Counting embedded language score towards the host language may be\n    // disabled with zeroing the containing mode relevance.\n    // Usecase in point is Markdown that allows XML everywhere and makes every\n    // XML snippet to have a much larger Markdown score.\n    if (top.relevance > 0) {\n      relevance += subvalue.relevance\n    }\n\n    if (explicit) {\n      continuations[top.subLanguage] = subvalue.top\n    }\n\n    return [build(subvalue.language, subvalue.value, true)]\n  }\n\n  // Process keywords. Returns nodes.\n  function processKeywords() {\n    var nodes = []\n    var lastIndex\n    var keyword\n    var node\n    var submatch\n\n    if (!top.keywords) {\n      return addText(modeBuffer, nodes)\n    }\n\n    lastIndex = 0\n\n    top.lexemesRe.lastIndex = 0\n\n    keyword = top.lexemesRe.exec(modeBuffer)\n\n    while (keyword) {\n      addText(modeBuffer.substring(lastIndex, keyword.index), nodes)\n\n      submatch = keywordMatch(top, keyword)\n\n      if (submatch) {\n        relevance += submatch[1]\n\n        node = build(submatch[0], [])\n\n        nodes.push(node)\n\n        addText(keyword[0], node.children)\n      } else {\n        addText(keyword[0], nodes)\n      }\n\n      lastIndex = top.lexemesRe.lastIndex\n      keyword = top.lexemesRe.exec(modeBuffer)\n    }\n\n    addText(modeBuffer.substr(lastIndex), nodes)\n\n    return nodes\n  }\n\n  // Add siblings.\n  function addSiblings(siblings, nodes) {\n    var length = siblings.length\n    var index = -1\n    var sibling\n\n    while (++index < length) {\n      sibling = siblings[index]\n\n      if (sibling.type === 'text') {\n        addText(sibling.value, nodes)\n      } else {\n        nodes.push(sibling)\n      }\n    }\n  }\n\n  // Add a text.\n  function addText(value, nodes) {\n    var tail\n\n    if (value) {\n      tail = nodes[nodes.length - 1]\n\n      if (tail && tail.type === 'text') {\n        tail.value += value\n      } else {\n        nodes.push(buildText(value))\n      }\n    }\n\n    return nodes\n  }\n\n  // Build a text.\n  function buildText(value) {\n    return {type: 'text', value: value}\n  }\n\n  // Build a span.\n  function build(name, contents, noPrefix) {\n    return {\n      type: 'element',\n      tagName: 'span',\n      properties: {\n        className: [(noPrefix ? '' : prefix) + name]\n      },\n      children: contents\n    }\n  }\n\n  // Check if the first word in `keywords` is a keyword.\n  function keywordMatch(mode, keywords) {\n    var keyword = keywords[0]\n\n    if (language[keyInsensitive]) {\n      keyword = keyword.toLowerCase()\n    }\n\n    return own.call(mode.keywords, keyword) && mode.keywords[keyword]\n  }\n\n  // Check if `lexeme` is illegal according to `mode`.\n  function isIllegal(lexeme, mode) {\n    return !ignore && test(mode.illegalRe, lexeme)\n  }\n\n  // Check if `lexeme` ends `mode`.\n  function endOfMode(mode, lexeme) {\n    if (test(mode.endRe, lexeme)) {\n      while (mode.endsParent && mode.parent) {\n        mode = mode.parent\n      }\n\n      return mode\n    }\n\n    if (mode.endsWithParent) {\n      return endOfMode(mode.parent, lexeme)\n    }\n  }\n\n  // Check a sub-mode.\n  function subMode(lexeme, mode) {\n    var values = mode.contains\n    var length = values.length\n    var index = -1\n\n    while (++index < length) {\n      if (test(values[index].beginRe, lexeme)) {\n        return values[index]\n      }\n    }\n  }\n\n  // Exit the current context.\n  function pop() {\n    /* istanbul ignore next - removed in hljs 9.3 */\n    currentChildren = stack.pop() || children\n  }\n}\n\nfunction expandMode(mode) {\n  var length\n  var index\n  var variants\n  var result\n\n  if (mode.variants && !mode[keyCachedVariants]) {\n    variants = mode.variants\n    length = variants.length\n    index = -1\n    result = []\n\n    while (++index < length) {\n      result[index] = inherit(mode, {variants: null}, variants[index])\n    }\n\n    mode[keyCachedVariants] = result\n  }\n\n  return (\n    mode[keyCachedVariants] || (mode.endsWithParent ? [inherit(mode)] : [mode])\n  )\n}\n\n// Compile a language.\nfunction compileLanguage(language) {\n  compileMode(language)\n\n  // Compile a language mode, optionally with a parent.\n  // eslint-disable-next-line complexity\n  function compileMode(mode, parent) {\n    var compiledKeywords = {}\n    var terminators\n\n    if (mode.compiled) {\n      return\n    }\n\n    mode.compiled = true\n\n    mode.keywords = mode.keywords || mode.beginKeywords\n\n    if (mode.keywords) {\n      if (typeof mode.keywords === 'string') {\n        flatten('keyword', mode.keywords)\n      } else {\n        Object.keys(mode.keywords).forEach(function(className) {\n          flatten(className, mode.keywords[className])\n        })\n      }\n\n      mode.keywords = compiledKeywords\n    }\n\n    mode.lexemesRe = langRe(mode.lexemes || /\\w+/, true)\n\n    if (parent) {\n      if (mode.beginKeywords) {\n        mode.begin =\n          '\\\\b(' + mode.beginKeywords.split(space).join(verticalBar) + ')\\\\b'\n      }\n\n      if (!mode.begin) {\n        mode.begin = /\\B|\\b/\n      }\n\n      mode.beginRe = langRe(mode.begin)\n\n      if (!mode.end && !mode.endsWithParent) {\n        mode.end = /\\B|\\b/\n      }\n\n      if (mode.end) {\n        mode.endRe = langRe(mode.end)\n      }\n\n      mode.terminatorEnd = source(mode.end) || ''\n\n      if (mode.endsWithParent && parent.terminatorEnd) {\n        mode.terminatorEnd +=\n          (mode.end ? verticalBar : '') + parent.terminatorEnd\n      }\n    }\n\n    if (mode.illegal) {\n      mode.illegalRe = langRe(mode.illegal)\n    }\n\n    if (mode.relevance === undefined) {\n      mode.relevance = 1\n    }\n\n    if (!mode.contains) {\n      mode.contains = []\n    }\n\n    mode.contains = concat.apply(\n      [],\n      mode.contains.map(function(c) {\n        return expandMode(c === 'self' ? mode : c)\n      })\n    )\n\n    mode.contains.forEach(function(c) {\n      compileMode(c, mode)\n    })\n\n    if (mode.starts) {\n      compileMode(mode.starts, parent)\n    }\n\n    terminators = mode.contains\n      .map(map)\n      .concat([mode.terminatorEnd, mode.illegal])\n      .map(source)\n      .filter(Boolean)\n\n    mode.terminators =\n      terminators.length === 0\n        ? {exec: execNoop}\n        : langRe(terminators.join(verticalBar), true)\n\n    function map(c) {\n      return c.beginKeywords ? '\\\\.?(' + c.begin + ')\\\\.?' : c.begin\n    }\n\n    // Flatten a classname.\n    function flatten(className, value) {\n      var pairs\n      var pair\n      var index\n      var length\n\n      if (language[keyInsensitive]) {\n        value = value.toLowerCase()\n      }\n\n      pairs = value.split(space)\n      length = pairs.length\n      index = -1\n\n      while (++index < length) {\n        pair = pairs[index].split(verticalBar)\n\n        compiledKeywords[pair[0]] = [className, pair[1] ? Number(pair[1]) : 1]\n      }\n    }\n  }\n\n  // Create a regex for `value`.\n  function langRe(value, global) {\n    return new RegExp(\n      source(value),\n      'm' + (language[keyInsensitive] ? 'i' : '') + (global ? 'g' : '')\n    )\n  }\n\n  // Get the source of an expression or string.\n  function source(re) {\n    return (re && re.source) || re\n  }\n}\n\n// Normalize a syntax result.\nfunction normalize(result) {\n  return {\n    relevance: result.relevance || 0,\n    language: result.language || null,\n    value: result.value || []\n  }\n}\n\n// Check if `expression` matches `lexeme`.\nfunction test(expression, lexeme) {\n  var match = expression && expression.exec(lexeme)\n  return match && match.index === 0\n}\n\n// No-op exec.\nfunction execNoop() {\n  return null\n}\n\n// Get a language by `name`.\nfunction getLanguage(name) {\n  name = name.toLowerCase()\n\n  return languages[name] || languages[aliases[name]]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}