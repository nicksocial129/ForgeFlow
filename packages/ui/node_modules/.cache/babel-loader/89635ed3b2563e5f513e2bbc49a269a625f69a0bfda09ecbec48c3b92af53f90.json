{"ast":null,"code":"\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BoldsymbolConfiguration = exports.rewriteBoldTokens = exports.createBoldToken = exports.BoldsymbolMethods = void 0;\nvar Configuration_js_1 = require(\"../Configuration.js\");\nvar NodeUtil_js_1 = __importDefault(require(\"../NodeUtil.js\"));\nvar TexConstants_js_1 = require(\"../TexConstants.js\");\nvar SymbolMap_js_1 = require(\"../SymbolMap.js\");\nvar NodeFactory_js_1 = require(\"../NodeFactory.js\");\nvar BOLDVARIANT = {};\nBOLDVARIANT[TexConstants_js_1.TexConstant.Variant.NORMAL] = TexConstants_js_1.TexConstant.Variant.BOLD;\nBOLDVARIANT[TexConstants_js_1.TexConstant.Variant.ITALIC] = TexConstants_js_1.TexConstant.Variant.BOLDITALIC;\nBOLDVARIANT[TexConstants_js_1.TexConstant.Variant.FRAKTUR] = TexConstants_js_1.TexConstant.Variant.BOLDFRAKTUR;\nBOLDVARIANT[TexConstants_js_1.TexConstant.Variant.SCRIPT] = TexConstants_js_1.TexConstant.Variant.BOLDSCRIPT;\nBOLDVARIANT[TexConstants_js_1.TexConstant.Variant.SANSSERIF] = TexConstants_js_1.TexConstant.Variant.BOLDSANSSERIF;\nBOLDVARIANT['-tex-calligraphic'] = '-tex-bold-calligraphic';\nBOLDVARIANT['-tex-oldstyle'] = '-tex-bold-oldstyle';\nBOLDVARIANT['-tex-mathit'] = TexConstants_js_1.TexConstant.Variant.BOLDITALIC;\nexports.BoldsymbolMethods = {};\nexports.BoldsymbolMethods.Boldsymbol = function (parser, name) {\n  var boldsymbol = parser.stack.env['boldsymbol'];\n  parser.stack.env['boldsymbol'] = true;\n  var mml = parser.ParseArg(name);\n  parser.stack.env['boldsymbol'] = boldsymbol;\n  parser.Push(mml);\n};\nnew SymbolMap_js_1.CommandMap('boldsymbol', {\n  boldsymbol: 'Boldsymbol'\n}, exports.BoldsymbolMethods);\nfunction createBoldToken(factory, kind, def, text) {\n  var token = NodeFactory_js_1.NodeFactory.createToken(factory, kind, def, text);\n  if (kind !== 'mtext' && factory.configuration.parser.stack.env['boldsymbol']) {\n    NodeUtil_js_1.default.setProperty(token, 'fixBold', true);\n    factory.configuration.addNode('fixBold', token);\n  }\n  return token;\n}\nexports.createBoldToken = createBoldToken;\nfunction rewriteBoldTokens(arg) {\n  var e_1, _a;\n  try {\n    for (var _b = __values(arg.data.getList('fixBold')), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var node = _c.value;\n      if (NodeUtil_js_1.default.getProperty(node, 'fixBold')) {\n        var variant = NodeUtil_js_1.default.getAttribute(node, 'mathvariant');\n        if (variant == null) {\n          NodeUtil_js_1.default.setAttribute(node, 'mathvariant', TexConstants_js_1.TexConstant.Variant.BOLD);\n        } else {\n          NodeUtil_js_1.default.setAttribute(node, 'mathvariant', BOLDVARIANT[variant] || variant);\n        }\n        NodeUtil_js_1.default.removeProperties(node, 'fixBold');\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n}\nexports.rewriteBoldTokens = rewriteBoldTokens;\nexports.BoldsymbolConfiguration = Configuration_js_1.Configuration.create('boldsymbol', {\n  handler: {\n    macro: ['boldsymbol']\n  },\n  nodes: {\n    'token': createBoldToken\n  },\n  postprocessors: [rewriteBoldTokens]\n});","map":{"version":3,"names":["Configuration_js_1","require","NodeUtil_js_1","__importDefault","TexConstants_js_1","SymbolMap_js_1","NodeFactory_js_1","BOLDVARIANT","TexConstant","Variant","NORMAL","BOLD","ITALIC","BOLDITALIC","FRAKTUR","BOLDFRAKTUR","SCRIPT","BOLDSCRIPT","SANSSERIF","BOLDSANSSERIF","exports","BoldsymbolMethods","Boldsymbol","parser","name","boldsymbol","stack","env","mml","ParseArg","Push","CommandMap","createBoldToken","factory","kind","def","text","token","NodeFactory","createToken","configuration","default","setProperty","addNode","rewriteBoldTokens","arg","_b","__values","data","getList","_c","next","done","node","value","getProperty","variant","getAttribute","setAttribute","removeProperties","BoldsymbolConfiguration","Configuration","create","handler","macro","nodes","postprocessors"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/input/tex/boldsymbol/BoldsymbolConfiguration.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the boldsymbol package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {MmlNode} from '../../../core/MmlTree/MmlNode.js';\nimport {Configuration} from '../Configuration.js';\nimport NodeUtil from '../NodeUtil.js';\nimport TexParser from '../TexParser.js';\nimport {TexConstant} from '../TexConstants.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {ParseMethod} from '../Types.js';\nimport {NodeFactory} from '../NodeFactory.js';\nimport ParseOptions from '../ParseOptions.js';\n\nlet BOLDVARIANT: {[key: string]: string} = {};\nBOLDVARIANT[TexConstant.Variant.NORMAL] = TexConstant.Variant.BOLD;\nBOLDVARIANT[TexConstant.Variant.ITALIC]    = TexConstant.Variant.BOLDITALIC;\nBOLDVARIANT[TexConstant.Variant.FRAKTUR]   = TexConstant.Variant.BOLDFRAKTUR;\nBOLDVARIANT[TexConstant.Variant.SCRIPT]    = TexConstant.Variant.BOLDSCRIPT;\nBOLDVARIANT[TexConstant.Variant.SANSSERIF] = TexConstant.Variant.BOLDSANSSERIF;\nBOLDVARIANT['-tex-calligraphic']   = '-tex-bold-calligraphic';\nBOLDVARIANT['-tex-oldstyle']       = '-tex-bold-oldstyle';\nBOLDVARIANT['-tex-mathit']         = TexConstant.Variant.BOLDITALIC;\n\n\n// Namespace\nexport let BoldsymbolMethods: Record<string, ParseMethod> = {};\n\n\n/**\n * Parse function for boldsymbol macro.\n * @param {TexParser} parser The current tex parser.\n * @param {string} name The name of the macro.\n */\nBoldsymbolMethods.Boldsymbol = function(parser: TexParser, name: string) {\n  let boldsymbol = parser.stack.env['boldsymbol'];\n  parser.stack.env['boldsymbol'] = true;\n  let mml = parser.ParseArg(name);\n  parser.stack.env['boldsymbol'] = boldsymbol;\n  parser.Push(mml);\n};\n\n\nnew CommandMap('boldsymbol', {boldsymbol: 'Boldsymbol'}, BoldsymbolMethods);\n\n\n/**\n * Creates token nodes in bold font if possible.\n * @param {NodeFactory} factory The current node factory.\n * @param {string} kind The type of token node to create.\n * @param {any} def Properties for the node.\n * @param {string} text The text content.\n * @return {MmlNode} The generated token node.\n */\nexport function createBoldToken(factory: NodeFactory, kind: string,\n                                def: any, text: string): MmlNode  {\n  let token = NodeFactory.createToken(factory, kind, def, text);\n  if (kind !== 'mtext' &&\n      factory.configuration.parser.stack.env['boldsymbol']) {\n    NodeUtil.setProperty(token, 'fixBold', true);\n    factory.configuration.addNode('fixBold', token);\n  }\n  return token;\n}\n\n\n/**\n * Postprocessor to rewrite token nodes to bold font, if possible.\n * @param {ParseOptions} data The parse options.\n */\nexport function rewriteBoldTokens(arg: {data: ParseOptions}) {\n  for (let node of arg.data.getList('fixBold')) {\n    if (NodeUtil.getProperty(node, 'fixBold')) {\n      let variant = NodeUtil.getAttribute(node, 'mathvariant') as string;\n      if (variant == null) {\n        NodeUtil.setAttribute(node, 'mathvariant', TexConstant.Variant.BOLD);\n      } else {\n        NodeUtil.setAttribute(node,\n                              'mathvariant', BOLDVARIANT[variant] || variant);\n      }\n      NodeUtil.removeProperties(node, 'fixBold');\n    }\n  }\n}\n\n\nexport const BoldsymbolConfiguration = Configuration.create(\n    'boldsymbol', {\n        handler: {macro: ['boldsymbol']},\n        nodes: {'token': createBoldToken},\n        postprocessors: [rewriteBoldTokens]\n    }\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}