{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MmlInferredMrow = exports.MmlMrow = void 0;\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\nvar MmlMrow = function (_super) {\n  __extends(MmlMrow, _super);\n  function MmlMrow() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._core = null;\n    return _this;\n  }\n  Object.defineProperty(MmlMrow.prototype, \"kind\", {\n    get: function () {\n      return 'mrow';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMrow.prototype, \"isSpacelike\", {\n    get: function () {\n      var e_1, _a;\n      try {\n        for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n          if (!child.isSpacelike) {\n            return false;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlMrow.prototype, \"isEmbellished\", {\n    get: function () {\n      var e_2, _a;\n      var embellished = false;\n      var i = 0;\n      try {\n        for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n          if (child) {\n            if (child.isEmbellished) {\n              if (embellished) {\n                return false;\n              }\n              embellished = true;\n              this._core = i;\n            } else if (!child.isSpacelike) {\n              return false;\n            }\n          }\n          i++;\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n      return embellished;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MmlMrow.prototype.core = function () {\n    if (!this.isEmbellished || this._core == null) {\n      return this;\n    }\n    return this.childNodes[this._core];\n  };\n  MmlMrow.prototype.coreMO = function () {\n    if (!this.isEmbellished || this._core == null) {\n      return this;\n    }\n    return this.childNodes[this._core].coreMO();\n  };\n  MmlMrow.prototype.nonSpaceLength = function () {\n    var e_3, _a;\n    var n = 0;\n    try {\n      for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        if (child && !child.isSpacelike) {\n          n++;\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    return n;\n  };\n  MmlMrow.prototype.firstNonSpace = function () {\n    var e_4, _a;\n    try {\n      for (var _b = __values(this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        if (child && !child.isSpacelike) {\n          return child;\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n    return null;\n  };\n  MmlMrow.prototype.lastNonSpace = function () {\n    var i = this.childNodes.length;\n    while (--i >= 0) {\n      var child = this.childNodes[i];\n      if (child && !child.isSpacelike) {\n        return child;\n      }\n    }\n    return null;\n  };\n  MmlMrow.prototype.setTeXclass = function (prev) {\n    var e_5, _a, e_6, _b;\n    if (this.getProperty('open') != null || this.getProperty('close') != null) {\n      this.getPrevClass(prev);\n      prev = null;\n      try {\n        for (var _c = __values(this.childNodes), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var child = _d.value;\n          prev = child.setTeXclass(prev);\n        }\n      } catch (e_5_1) {\n        e_5 = {\n          error: e_5_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_5) throw e_5.error;\n        }\n      }\n      if (this.texClass == null) {\n        this.texClass = MmlNode_js_1.TEXCLASS.INNER;\n      }\n    } else {\n      try {\n        for (var _e = __values(this.childNodes), _f = _e.next(); !_f.done; _f = _e.next()) {\n          var child = _f.value;\n          prev = child.setTeXclass(prev);\n        }\n      } catch (e_6_1) {\n        e_6 = {\n          error: e_6_1\n        };\n      } finally {\n        try {\n          if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n        } finally {\n          if (e_6) throw e_6.error;\n        }\n      }\n      if (this.childNodes[0]) {\n        this.updateTeXclass(this.childNodes[0]);\n      }\n    }\n    return prev;\n  };\n  MmlMrow.defaults = __assign({}, MmlNode_js_1.AbstractMmlNode.defaults);\n  return MmlMrow;\n}(MmlNode_js_1.AbstractMmlNode);\nexports.MmlMrow = MmlMrow;\nvar MmlInferredMrow = function (_super) {\n  __extends(MmlInferredMrow, _super);\n  function MmlInferredMrow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Object.defineProperty(MmlInferredMrow.prototype, \"kind\", {\n    get: function () {\n      return 'inferredMrow';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlInferredMrow.prototype, \"isInferred\", {\n    get: function () {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MmlInferredMrow.prototype, \"notParent\", {\n    get: function () {\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MmlInferredMrow.prototype.toString = function () {\n    return '[' + this.childNodes.join(',') + ']';\n  };\n  MmlInferredMrow.defaults = MmlMrow.defaults;\n  return MmlInferredMrow;\n}(MmlMrow);\nexports.MmlInferredMrow = MmlInferredMrow;","map":{"version":3,"names":["MmlNode_js_1","require","MmlMrow","_super","__extends","_this","apply","arguments","_core","Object","defineProperty","prototype","get","_b","__values","childNodes","_c","next","done","child","value","isSpacelike","embellished","i","isEmbellished","core","coreMO","nonSpaceLength","n","firstNonSpace","lastNonSpace","length","setTeXclass","prev","getProperty","getPrevClass","_d","texClass","TEXCLASS","INNER","_e","_f","updateTeXclass","defaults","__assign","AbstractMmlNode","exports","MmlInferredMrow","toString","join"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mrow.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMrow node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, AbstractMmlNode, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMrow node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMrow extends AbstractMmlNode {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults\n  };\n\n  /**\n   * The index of the core child, when acting as an embellish mrow\n   */\n  protected _core: number = null;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mrow';\n  }\n\n  /**\n   * An mrow is space-like if all its children are.\n   *\n   * @override\n   */\n  public get isSpacelike() {\n    for (const child of this.childNodes) {\n      if (!child.isSpacelike) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * An mrow is embellished if it contains one embellished operator\n   * and any number of space-like nodes\n   *\n   * @override\n   */\n  public get isEmbellished() {\n    let embellished = false;\n    let i = 0;\n    for (const child of this.childNodes) {\n      if (child) {\n        if (child.isEmbellished) {\n          if (embellished) {\n            return false;\n          }\n          embellished = true;\n          this._core = i;\n        } else if (!child.isSpacelike) {\n          return false;\n        }\n      }\n      i++;\n    }\n    return embellished;\n  }\n\n  /**\n   * @override\n   */\n  public core(): MmlNode {\n    if (!this.isEmbellished || this._core == null) {\n      return this;\n    }\n    return this.childNodes[this._core];\n  }\n\n  /**\n   * @override\n   */\n  public coreMO(): MmlNode {\n    if (!this.isEmbellished || this._core == null) {\n      return this;\n    }\n    return this.childNodes[this._core].coreMO();\n  }\n\n  /**\n   * @return {number}  The number of non-spacelike child nodes\n   */\n  public nonSpaceLength(): number {\n    let n = 0;\n    for (const child of this.childNodes) {\n      if (child && !child.isSpacelike) {\n        n++;\n      }\n    }\n    return n;\n  }\n\n  /**\n   * @return {MmlNode|null}  The first non-space-like child node\n   */\n  public firstNonSpace(): MmlNode | null {\n    for (const child of this.childNodes) {\n      if (child && !child.isSpacelike) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return {MmlNode|null}  The last non-space-like child node\n   */\n  public lastNonSpace(): MmlNode | null {\n    let i = this.childNodes.length;\n    while (--i >= 0) {\n      let child = this.childNodes[i];\n      if (child && !child.isSpacelike) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    if (this.getProperty('open') != null || this.getProperty('close') != null) {\n      //\n      // <mrow> looks like it came from \\left...\\right\n      //   so treat as subexpression (TeX class INNER).\n      // Use prev = null for the initial element in the\n      //   delimiters, since there is nothing previous to\n      //   it in what would be the TeX math list.\n      //\n      this.getPrevClass(prev);\n      prev = null;\n      for (const child of this.childNodes) {\n        prev = child.setTeXclass(prev);\n      }\n      if (this.texClass == null) {\n        this.texClass = TEXCLASS.INNER;\n      }\n    } else {\n      //\n      //  Normal <mrow>, so treat as though mrow is not there\n      //\n      for (const child of this.childNodes) {\n        prev = child.setTeXclass(prev);\n      }\n      if (this.childNodes[0]) {\n        this.updateTeXclass(this.childNodes[0]);\n      }\n    }\n    return prev;\n  }\n\n}\n\n\n/*****************************************************************/\n/**\n *  Implements the MmlInferredMrow node class (subclass of MmlMrow)\n */\n\nexport class MmlInferredMrow extends MmlMrow {\n\n  /**\n   * @override\n   */\n  public static defaults: PropertyList = MmlMrow.defaults;\n\n  /**\n   * @return {string}  The inferred-mrow kind\n   */\n  public get kind(): string {\n    return 'inferredMrow';\n  }\n\n  /**\n   * @return {boolean}  This is inferred\n   */\n  public get isInferred(): boolean {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  public get notParent() {\n    return true;\n  }\n\n  /**\n   * Show the child nodes in brackets\n   */\n  public toString() {\n    return '[' + this.childNodes.join(',') + ']';\n  }\n\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAAA,YAAA,GAAAC,OAAA;AAOA,IAAAC,OAAA,aAAAC,MAAA;EAA6BC,SAAA,CAAAF,OAAA,EAAAC,MAAA;EAA7B,SAAAD,QAAA;IAAA,IAAAG,KAAA,GAAAF,MAAA,aAAAA,MAAA,CAAAG,KAAA,OAAAC,SAAA;IAYYF,KAAA,CAAAG,KAAK,GAAW,IAAI;;EA8IhC;EAzIEC,MAAA,CAAAC,cAAA,CAAWR,OAAA,CAAAS,SAAA,QAAI;SAAf,SAAAC,CAAA;MACE,OAAO,MAAM;IACf,CAAC;;;;EAODH,MAAA,CAAAC,cAAA,CAAWR,OAAA,CAAAS,SAAA,eAAW;SAAtB,SAAAC,CAAA;;;QACE,KAAoB,IAAAC,EAAA,GAAAC,QAAA,KAAI,CAACC,UAAU,GAAAC,EAAA,GAAAH,EAAA,CAAAI,IAAA,KAAAD,EAAA,CAAAE,IAAA,EAAAF,EAAA,GAAAH,EAAA,CAAAI,IAAA,IAAE;UAAhC,IAAME,KAAK,GAAAH,EAAA,CAAAI,KAAA;UACd,IAAI,CAACD,KAAK,CAACE,WAAW,EAAE;YACtB,OAAO,KAAK;;;;;;;;;;;;;;MAGhB,OAAO,IAAI;IACb,CAAC;;;;EAQDZ,MAAA,CAAAC,cAAA,CAAWR,OAAA,CAAAS,SAAA,iBAAa;SAAxB,SAAAC,CAAA;;MACE,IAAIU,WAAW,GAAG,KAAK;MACvB,IAAIC,CAAC,GAAG,CAAC;;QACT,KAAoB,IAAAV,EAAA,GAAAC,QAAA,KAAI,CAACC,UAAU,GAAAC,EAAA,GAAAH,EAAA,CAAAI,IAAA,KAAAD,EAAA,CAAAE,IAAA,EAAAF,EAAA,GAAAH,EAAA,CAAAI,IAAA,IAAE;UAAhC,IAAME,KAAK,GAAAH,EAAA,CAAAI,KAAA;UACd,IAAID,KAAK,EAAE;YACT,IAAIA,KAAK,CAACK,aAAa,EAAE;cACvB,IAAIF,WAAW,EAAE;gBACf,OAAO,KAAK;;cAEdA,WAAW,GAAG,IAAI;cAClB,IAAI,CAACd,KAAK,GAAGe,CAAC;aACf,MAAM,IAAI,CAACJ,KAAK,CAACE,WAAW,EAAE;cAC7B,OAAO,KAAK;;;UAGhBE,CAAC,EAAE;;;;;;;;;;;;;MAEL,OAAOD,WAAW;IACpB,CAAC;;;;EAKMpB,OAAA,CAAAS,SAAA,CAAAc,IAAI,GAAX;IACE,IAAI,CAAC,IAAI,CAACD,aAAa,IAAI,IAAI,CAAChB,KAAK,IAAI,IAAI,EAAE;MAC7C,OAAO,IAAI;;IAEb,OAAO,IAAI,CAACO,UAAU,CAAC,IAAI,CAACP,KAAK,CAAC;EACpC,CAAC;EAKMN,OAAA,CAAAS,SAAA,CAAAe,MAAM,GAAb;IACE,IAAI,CAAC,IAAI,CAACF,aAAa,IAAI,IAAI,CAAChB,KAAK,IAAI,IAAI,EAAE;MAC7C,OAAO,IAAI;;IAEb,OAAO,IAAI,CAACO,UAAU,CAAC,IAAI,CAACP,KAAK,CAAC,CAACkB,MAAM,EAAE;EAC7C,CAAC;EAKMxB,OAAA,CAAAS,SAAA,CAAAgB,cAAc,GAArB;;IACE,IAAIC,CAAC,GAAG,CAAC;;MACT,KAAoB,IAAAf,EAAA,GAAAC,QAAA,KAAI,CAACC,UAAU,GAAAC,EAAA,GAAAH,EAAA,CAAAI,IAAA,KAAAD,EAAA,CAAAE,IAAA,EAAAF,EAAA,GAAAH,EAAA,CAAAI,IAAA,IAAE;QAAhC,IAAME,KAAK,GAAAH,EAAA,CAAAI,KAAA;QACd,IAAID,KAAK,IAAI,CAACA,KAAK,CAACE,WAAW,EAAE;UAC/BO,CAAC,EAAE;;;;;;;;;;;;;;IAGP,OAAOA,CAAC;EACV,CAAC;EAKM1B,OAAA,CAAAS,SAAA,CAAAkB,aAAa,GAApB;;;MACE,KAAoB,IAAAhB,EAAA,GAAAC,QAAA,KAAI,CAACC,UAAU,GAAAC,EAAA,GAAAH,EAAA,CAAAI,IAAA,KAAAD,EAAA,CAAAE,IAAA,EAAAF,EAAA,GAAAH,EAAA,CAAAI,IAAA,IAAE;QAAhC,IAAME,KAAK,GAAAH,EAAA,CAAAI,KAAA;QACd,IAAID,KAAK,IAAI,CAACA,KAAK,CAACE,WAAW,EAAE;UAC/B,OAAOF,KAAK;;;;;;;;;;;;;;IAGhB,OAAO,IAAI;EACb,CAAC;EAKMjB,OAAA,CAAAS,SAAA,CAAAmB,YAAY,GAAnB;IACE,IAAIP,CAAC,GAAG,IAAI,CAACR,UAAU,CAACgB,MAAM;IAC9B,OAAO,EAAER,CAAC,IAAI,CAAC,EAAE;MACf,IAAIJ,KAAK,GAAG,IAAI,CAACJ,UAAU,CAACQ,CAAC,CAAC;MAC9B,IAAIJ,KAAK,IAAI,CAACA,KAAK,CAACE,WAAW,EAAE;QAC/B,OAAOF,KAAK;;;IAGhB,OAAO,IAAI;EACb,CAAC;EAKMjB,OAAA,CAAAS,SAAA,CAAAqB,WAAW,GAAlB,UAAmBC,IAAa;;IAC9B,IAAI,IAAI,CAACC,WAAW,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,IAAI,CAACA,WAAW,CAAC,OAAO,CAAC,IAAI,IAAI,EAAE;MAQzE,IAAI,CAACC,YAAY,CAACF,IAAI,CAAC;MACvBA,IAAI,GAAG,IAAI;;QACX,KAAoB,IAAAjB,EAAA,GAAAF,QAAA,KAAI,CAACC,UAAU,GAAAqB,EAAA,GAAApB,EAAA,CAAAC,IAAA,KAAAmB,EAAA,CAAAlB,IAAA,EAAAkB,EAAA,GAAApB,EAAA,CAAAC,IAAA,IAAE;UAAhC,IAAME,KAAK,GAAAiB,EAAA,CAAAhB,KAAA;UACda,IAAI,GAAGd,KAAK,CAACa,WAAW,CAACC,IAAI,CAAC;;;;;;;;;;;;;MAEhC,IAAI,IAAI,CAACI,QAAQ,IAAI,IAAI,EAAE;QACzB,IAAI,CAACA,QAAQ,GAAGrC,YAAA,CAAAsC,QAAQ,CAACC,KAAK;;KAEjC,MAAM;;QAIL,KAAoB,IAAAC,EAAA,GAAA1B,QAAA,KAAI,CAACC,UAAU,GAAA0B,EAAA,GAAAD,EAAA,CAAAvB,IAAA,KAAAwB,EAAA,CAAAvB,IAAA,EAAAuB,EAAA,GAAAD,EAAA,CAAAvB,IAAA,IAAE;UAAhC,IAAME,KAAK,GAAAsB,EAAA,CAAArB,KAAA;UACda,IAAI,GAAGd,KAAK,CAACa,WAAW,CAACC,IAAI,CAAC;;;;;;;;;;;;;MAEhC,IAAI,IAAI,CAAClB,UAAU,CAAC,CAAC,CAAC,EAAE;QACtB,IAAI,CAAC2B,cAAc,CAAC,IAAI,CAAC3B,UAAU,CAAC,CAAC,CAAC,CAAC;;;IAG3C,OAAOkB,IAAI;EACb,CAAC;EAnJa/B,OAAA,CAAAyC,QAAQ,GAAAC,QAAA,KACjB5C,YAAA,CAAA6C,eAAe,CAACF,QAAQ;EAoJ/B,OAAAzC,OAAC;CAAA,CA1J4BF,YAAA,CAAA6C,eAAe;AAA/BC,OAAA,CAAA5C,OAAA,GAAAA,OAAA;AAkKb,IAAA6C,eAAA,aAAA5C,MAAA;EAAqCC,SAAA,CAAA2C,eAAA,EAAA5C,MAAA;EAArC,SAAA4C,gBAAA;;EAmCA;EAzBEtC,MAAA,CAAAC,cAAA,CAAWqC,eAAA,CAAApC,SAAA,QAAI;SAAf,SAAAC,CAAA;MACE,OAAO,cAAc;IACvB,CAAC;;;;EAKDH,MAAA,CAAAC,cAAA,CAAWqC,eAAA,CAAApC,SAAA,cAAU;SAArB,SAAAC,CAAA;MACE,OAAO,IAAI;IACb,CAAC;;;;EAKDH,MAAA,CAAAC,cAAA,CAAWqC,eAAA,CAAApC,SAAA,aAAS;SAApB,SAAAC,CAAA;MACE,OAAO,IAAI;IACb,CAAC;;;;EAKMmC,eAAA,CAAApC,SAAA,CAAAqC,QAAQ,GAAf;IACE,OAAO,GAAG,GAAG,IAAI,CAACjC,UAAU,CAACkC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAG;EAC9C,CAAC;EA5BaF,eAAA,CAAAJ,QAAQ,GAAiBzC,OAAO,CAACyC,QAAQ;EA8BzD,OAAAI,eAAC;CAAA,CAnCoC7C,OAAO;AAA/B4C,OAAA,CAAAC,eAAA,GAAAA,eAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}