{"ast":null,"code":"module.exports = function (hljs) {\n  var SCHEME_IDENT_RE = '[^\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\",\\'`;#|\\\\\\\\\\\\s]+';\n  var SCHEME_SIMPLE_NUMBER_RE = '(\\\\-|\\\\+)?\\\\d+([./]\\\\d+)?';\n  var SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';\n  var BUILTINS = {\n    'builtin-name': 'case-lambda call/cc class define-class exit-handler field import ' + 'inherit init-field interface let*-values let-values let/ec mixin ' + 'opt-lambda override protect provide public rename require ' + 'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' + 'when with-syntax and begin call-with-current-continuation ' + 'call-with-input-file call-with-output-file case cond define ' + 'define-syntax delay do dynamic-wind else for-each if lambda let let* ' + 'let-syntax letrec letrec-syntax map or syntax-rules \\' * + , ,@ - ... / ' + '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' + 'boolean? caar cadr call-with-input-file call-with-output-file ' + 'call-with-values car cdddar cddddr cdr ceiling char->integer ' + 'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' + 'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' + 'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' + 'char? close-input-port close-output-port complex? cons cos ' + 'current-input-port current-output-port denominator display eof-object? ' + 'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' + 'force gcd imag-part inexact->exact inexact? input-port? integer->char ' + 'integer? interaction-environment lcm length list list->string ' + 'list->vector list-ref list-tail list? load log magnitude make-polar ' + 'make-rectangular make-string make-vector max member memq memv min ' + 'modulo negative? newline not null-environment null? number->string ' + 'number? numerator odd? open-input-file open-output-file output-port? ' + 'pair? peek-char port? positive? procedure? quasiquote quote quotient ' + 'rational? rationalize read read-char real-part real? remainder reverse ' + 'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' + 'string->list string->number string->symbol string-append string-ci<=? ' + 'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' + 'string-fill! string-length string-ref string-set! string<=? string<? ' + 'string=? string>=? string>? string? substring symbol->string symbol? ' + 'tan transcript-off transcript-on truncate values vector ' + 'vector->list vector-fill! vector-length vector-ref vector-set! ' + 'with-input-from-file with-output-to-file write write-char zero?'\n  };\n  var SHEBANG = {\n    className: 'meta',\n    begin: '^#!',\n    end: '$'\n  };\n  var LITERAL = {\n    className: 'literal',\n    begin: '(#t|#f|#\\\\\\\\' + SCHEME_IDENT_RE + '|#\\\\\\\\.)'\n  };\n  var NUMBER = {\n    className: 'number',\n    variants: [{\n      begin: SCHEME_SIMPLE_NUMBER_RE,\n      relevance: 0\n    }, {\n      begin: SCHEME_COMPLEX_NUMBER_RE,\n      relevance: 0\n    }, {\n      begin: '#b[0-1]+(/[0-1]+)?'\n    }, {\n      begin: '#o[0-7]+(/[0-7]+)?'\n    }, {\n      begin: '#x[0-9a-f]+(/[0-9a-f]+)?'\n    }]\n  };\n  var STRING = hljs.QUOTE_STRING_MODE;\n  var REGULAR_EXPRESSION = {\n    className: 'regexp',\n    begin: '#[pr]x\"',\n    end: '[^\\\\\\\\]\"'\n  };\n  var COMMENT_MODES = [hljs.COMMENT(';', '$', {\n    relevance: 0\n  }), hljs.COMMENT('#\\\\|', '\\\\|#')];\n  var IDENT = {\n    begin: SCHEME_IDENT_RE,\n    relevance: 0\n  };\n  var QUOTED_IDENT = {\n    className: 'symbol',\n    begin: '\\'' + SCHEME_IDENT_RE\n  };\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  var QUOTED_LIST = {\n    variants: [{\n      begin: /'/\n    }, {\n      begin: '`'\n    }],\n    contains: [{\n      begin: '\\\\(',\n      end: '\\\\)',\n      contains: ['self', LITERAL, STRING, NUMBER, IDENT, QUOTED_IDENT]\n    }]\n  };\n  var NAME = {\n    className: 'name',\n    begin: SCHEME_IDENT_RE,\n    lexemes: SCHEME_IDENT_RE,\n    keywords: BUILTINS\n  };\n  var LAMBDA = {\n    begin: /lambda/,\n    endsWithParent: true,\n    returnBegin: true,\n    contains: [NAME, {\n      begin: /\\(/,\n      end: /\\)/,\n      endsParent: true,\n      contains: [IDENT]\n    }]\n  };\n  var LIST = {\n    variants: [{\n      begin: '\\\\(',\n      end: '\\\\)'\n    }, {\n      begin: '\\\\[',\n      end: '\\\\]'\n    }],\n    contains: [LAMBDA, NAME, BODY]\n  };\n  BODY.contains = [LITERAL, NUMBER, STRING, IDENT, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES);\n  return {\n    illegal: /\\S/,\n    contains: [SHEBANG, NUMBER, STRING, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES)\n  };\n};","map":{"version":3,"names":["module","exports","hljs","SCHEME_IDENT_RE","SCHEME_SIMPLE_NUMBER_RE","SCHEME_COMPLEX_NUMBER_RE","BUILTINS","SHEBANG","className","begin","end","LITERAL","NUMBER","variants","relevance","STRING","QUOTE_STRING_MODE","REGULAR_EXPRESSION","COMMENT_MODES","COMMENT","IDENT","QUOTED_IDENT","BODY","endsWithParent","QUOTED_LIST","contains","NAME","lexemes","keywords","LAMBDA","returnBegin","endsParent","LIST","concat","illegal"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/highlight.js/lib/languages/scheme.js"],"sourcesContent":["module.exports = function(hljs) {\n  var SCHEME_IDENT_RE = '[^\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\",\\'`;#|\\\\\\\\\\\\s]+';\n  var SCHEME_SIMPLE_NUMBER_RE = '(\\\\-|\\\\+)?\\\\d+([./]\\\\d+)?';\n  var SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';\n  var BUILTINS = {\n    'builtin-name':\n      'case-lambda call/cc class define-class exit-handler field import ' +\n      'inherit init-field interface let*-values let-values let/ec mixin ' +\n      'opt-lambda override protect provide public rename require ' +\n      'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' +\n      'when with-syntax and begin call-with-current-continuation ' +\n      'call-with-input-file call-with-output-file case cond define ' +\n      'define-syntax delay do dynamic-wind else for-each if lambda let let* ' +\n      'let-syntax letrec letrec-syntax map or syntax-rules \\' * + , ,@ - ... / ' +\n      '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' +\n      'boolean? caar cadr call-with-input-file call-with-output-file ' +\n      'call-with-values car cdddar cddddr cdr ceiling char->integer ' +\n      'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' +\n      'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' +\n      'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' +\n      'char? close-input-port close-output-port complex? cons cos ' +\n      'current-input-port current-output-port denominator display eof-object? ' +\n      'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' +\n      'force gcd imag-part inexact->exact inexact? input-port? integer->char ' +\n      'integer? interaction-environment lcm length list list->string ' +\n      'list->vector list-ref list-tail list? load log magnitude make-polar ' +\n      'make-rectangular make-string make-vector max member memq memv min ' +\n      'modulo negative? newline not null-environment null? number->string ' +\n      'number? numerator odd? open-input-file open-output-file output-port? ' +\n      'pair? peek-char port? positive? procedure? quasiquote quote quotient ' +\n      'rational? rationalize read read-char real-part real? remainder reverse ' +\n      'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' +\n      'string->list string->number string->symbol string-append string-ci<=? ' +\n      'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' +\n      'string-fill! string-length string-ref string-set! string<=? string<? ' +\n      'string=? string>=? string>? string? substring symbol->string symbol? ' +\n      'tan transcript-off transcript-on truncate values vector ' +\n      'vector->list vector-fill! vector-length vector-ref vector-set! ' +\n      'with-input-from-file with-output-to-file write write-char zero?'\n  };\n\n  var SHEBANG = {\n    className: 'meta',\n    begin: '^#!',\n    end: '$'\n  };\n\n  var LITERAL = {\n    className: 'literal',\n    begin: '(#t|#f|#\\\\\\\\' + SCHEME_IDENT_RE + '|#\\\\\\\\.)'\n  };\n\n  var NUMBER = {\n    className: 'number',\n    variants: [\n      { begin: SCHEME_SIMPLE_NUMBER_RE, relevance: 0 },\n      { begin: SCHEME_COMPLEX_NUMBER_RE, relevance: 0 },\n      { begin: '#b[0-1]+(/[0-1]+)?' },\n      { begin: '#o[0-7]+(/[0-7]+)?' },\n      { begin: '#x[0-9a-f]+(/[0-9a-f]+)?' }\n    ]\n  };\n\n  var STRING = hljs.QUOTE_STRING_MODE;\n\n  var REGULAR_EXPRESSION = {\n    className: 'regexp',\n    begin: '#[pr]x\"',\n    end: '[^\\\\\\\\]\"'\n  };\n\n  var COMMENT_MODES = [\n    hljs.COMMENT(\n      ';',\n      '$',\n      {\n        relevance: 0\n      }\n    ),\n    hljs.COMMENT('#\\\\|', '\\\\|#')\n  ];\n\n  var IDENT = {\n    begin: SCHEME_IDENT_RE,\n    relevance: 0\n  };\n\n  var QUOTED_IDENT = {\n    className: 'symbol',\n    begin: '\\'' + SCHEME_IDENT_RE\n  };\n\n  var BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n\n  var QUOTED_LIST = {\n    variants: [\n      { begin: /'/ },\n      { begin: '`' }\n    ],\n    contains: [\n      {\n        begin: '\\\\(', end: '\\\\)',\n        contains: ['self', LITERAL, STRING, NUMBER, IDENT, QUOTED_IDENT]\n      }\n    ]\n  };\n\n  var NAME = {\n    className: 'name',\n    begin: SCHEME_IDENT_RE,\n    lexemes: SCHEME_IDENT_RE,\n    keywords: BUILTINS\n  };\n\n  var LAMBDA = {\n    begin: /lambda/, endsWithParent: true, returnBegin: true,\n    contains: [\n      NAME,\n      {\n        begin: /\\(/, end: /\\)/, endsParent: true,\n        contains: [IDENT],\n      }\n    ]\n  };\n\n  var LIST = {\n    variants: [\n      { begin: '\\\\(', end: '\\\\)' },\n      { begin: '\\\\[', end: '\\\\]' }\n    ],\n    contains: [LAMBDA, NAME, BODY]\n  };\n\n  BODY.contains = [LITERAL, NUMBER, STRING, IDENT, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES);\n\n  return {\n    illegal: /\\S/,\n    contains: [SHEBANG, NUMBER, STRING, QUOTED_IDENT, QUOTED_LIST, LIST].concat(COMMENT_MODES)\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}