{"ast":null,"code":"'use strict';\n\nmodule.exports = regex;\nregex.displayName = 'regex';\nregex.aliases = [];\nfunction regex(Prism) {\n  ;\n  (function (Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    };\n    var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/;\n    var charClass = /\\\\[wsd]|\\.|\\\\p{[^{}]+}/i;\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')';\n    var range = RegExp(rangeChar + '-' + rangeChar); // the name of a capturing group\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    };\n    var backreference = [/\\\\(?![123][0-7]{2})[1-9]/,\n    // a backreference which is not an octal escape\n    {\n      pattern: /\\\\k<[^<>']+>/,\n      inside: {\n        'group-name': groupName\n      }\n    }];\n    Prism.languages.regex = {\n      charset: {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'charset-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true\n          },\n          'charset-punctuation': /^\\[|\\]$/,\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': /-/\n            }\n          },\n          'special-escape': specialEscape,\n          charclass: charClass,\n          backreference: backreference,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      charclass: charClass,\n      backreference: backreference,\n      anchor: /[$^]|\\\\[ABbGZz]/,\n      escape: escape,\n      group: [{\n        // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n        // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n        // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n        pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n        inside: {\n          'group-name': groupName\n        }\n      }, /\\)/],\n      quantifier: /[+*?]|\\{(?:\\d+,?\\d*)\\}/,\n      alternation: /\\|/\n    };\n    ['actionscript', 'coffescript', 'flow', 'javascript', 'typescript', 'vala'].forEach(function (lang) {\n      var grammar = Prism.languages[lang];\n      if (grammar) {\n        grammar['regex'].inside = {\n          'regex-flags': /[a-z]+$/,\n          'regex-delimiter': /^\\/|\\/$/,\n          'language-regex': {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.regex\n          }\n        };\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","regex","displayName","aliases","Prism","specialEscape","pattern","alias","escape","charClass","rangeChar","source","range","RegExp","groupName","lookbehind","backreference","inside","languages","charset","charclass","anchor","group","quantifier","alternation","forEach","lang","grammar"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/refractor/lang/regex.js"],"sourcesContent":["'use strict'\n\nmodule.exports = regex\nregex.displayName = 'regex'\nregex.aliases = []\nfunction regex(Prism) {\n  ;(function(Prism) {\n    var specialEscape = {\n      pattern: /\\\\[\\\\(){}[\\]^$+*?|.]/,\n      alias: 'escape'\n    }\n    var escape = /\\\\(?:x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u\\{[\\da-fA-F]+\\}|c[a-zA-Z]|0[0-7]{0,2}|[123][0-7]{2}|.)/\n    var charClass = /\\\\[wsd]|\\.|\\\\p{[^{}]+}/i\n    var rangeChar = '(?:[^\\\\\\\\-]|' + escape.source + ')'\n    var range = RegExp(rangeChar + '-' + rangeChar) // the name of a capturing group\n    var groupName = {\n      pattern: /(<|')[^<>']+(?=[>']$)/,\n      lookbehind: true,\n      alias: 'variable'\n    }\n    var backreference = [\n      /\\\\(?![123][0-7]{2})[1-9]/, // a backreference which is not an octal escape\n      {\n        pattern: /\\\\k<[^<>']+>/,\n        inside: {\n          'group-name': groupName\n        }\n      }\n    ]\n    Prism.languages.regex = {\n      charset: {\n        pattern: /((?:^|[^\\\\])(?:\\\\\\\\)*)\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/,\n        lookbehind: true,\n        inside: {\n          'charset-negation': {\n            pattern: /(^\\[)\\^/,\n            lookbehind: true\n          },\n          'charset-punctuation': /^\\[|\\]$/,\n          range: {\n            pattern: range,\n            inside: {\n              escape: escape,\n              'range-punctuation': /-/\n            }\n          },\n          'special-escape': specialEscape,\n          charclass: charClass,\n          backreference: backreference,\n          escape: escape\n        }\n      },\n      'special-escape': specialEscape,\n      charclass: charClass,\n      backreference: backreference,\n      anchor: /[$^]|\\\\[ABbGZz]/,\n      escape: escape,\n      group: [\n        {\n          // https://docs.oracle.com/javase/10/docs/api/java/util/regex/Pattern.html\n          // https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?view=netframework-4.7.2#grouping-constructs\n          // (), (?<name>), (?'name'), (?>), (?:), (?=), (?!), (?<=), (?<!), (?is-m), (?i-m:)\n          pattern: /\\((?:\\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,\n          inside: {\n            'group-name': groupName\n          }\n        },\n        /\\)/\n      ],\n      quantifier: /[+*?]|\\{(?:\\d+,?\\d*)\\}/,\n      alternation: /\\|/\n    }\n    ;[\n      'actionscript',\n      'coffescript',\n      'flow',\n      'javascript',\n      'typescript',\n      'vala'\n    ].forEach(function(lang) {\n      var grammar = Prism.languages[lang]\n      if (grammar) {\n        grammar['regex'].inside = {\n          'regex-flags': /[a-z]+$/,\n          'regex-delimiter': /^\\/|\\/$/,\n          'language-regex': {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.regex\n          }\n        }\n      }\n    })\n  })(Prism)\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,KAAK;AACtBA,KAAK,CAACC,WAAW,GAAG,OAAO;AAC3BD,KAAK,CAACE,OAAO,GAAG,EAAE;AAClB,SAASF,KAAKA,CAACG,KAAK,EAAE;EACpB;EAAC,CAAC,UAASA,KAAK,EAAE;IAChB,IAAIC,aAAa,GAAG;MAClBC,OAAO,EAAE,sBAAsB;MAC/BC,KAAK,EAAE;IACT,CAAC;IACD,IAAIC,MAAM,GAAG,4FAA4F;IACzG,IAAIC,SAAS,GAAG,yBAAyB;IACzC,IAAIC,SAAS,GAAG,cAAc,GAAGF,MAAM,CAACG,MAAM,GAAG,GAAG;IACpD,IAAIC,KAAK,GAAGC,MAAM,CAACH,SAAS,GAAG,GAAG,GAAGA,SAAS,CAAC,EAAC;IAChD,IAAII,SAAS,GAAG;MACdR,OAAO,EAAE,uBAAuB;MAChCS,UAAU,EAAE,IAAI;MAChBR,KAAK,EAAE;IACT,CAAC;IACD,IAAIS,aAAa,GAAG,CAClB,0BAA0B;IAAE;IAC5B;MACEV,OAAO,EAAE,cAAc;MACvBW,MAAM,EAAE;QACN,YAAY,EAAEH;MAChB;IACF,CAAC,CACF;IACDV,KAAK,CAACc,SAAS,CAACjB,KAAK,GAAG;MACtBkB,OAAO,EAAE;QACPb,OAAO,EAAE,iDAAiD;QAC1DS,UAAU,EAAE,IAAI;QAChBE,MAAM,EAAE;UACN,kBAAkB,EAAE;YAClBX,OAAO,EAAE,SAAS;YAClBS,UAAU,EAAE;UACd,CAAC;UACD,qBAAqB,EAAE,SAAS;UAChCH,KAAK,EAAE;YACLN,OAAO,EAAEM,KAAK;YACdK,MAAM,EAAE;cACNT,MAAM,EAAEA,MAAM;cACd,mBAAmB,EAAE;YACvB;UACF,CAAC;UACD,gBAAgB,EAAEH,aAAa;UAC/Be,SAAS,EAAEX,SAAS;UACpBO,aAAa,EAAEA,aAAa;UAC5BR,MAAM,EAAEA;QACV;MACF,CAAC;MACD,gBAAgB,EAAEH,aAAa;MAC/Be,SAAS,EAAEX,SAAS;MACpBO,aAAa,EAAEA,aAAa;MAC5BK,MAAM,EAAE,iBAAiB;MACzBb,MAAM,EAAEA,MAAM;MACdc,KAAK,EAAE,CACL;QACE;QACA;QACA;QACAhB,OAAO,EAAE,6EAA6E;QACtFW,MAAM,EAAE;UACN,YAAY,EAAEH;QAChB;MACF,CAAC,EACD,IAAI,CACL;MACDS,UAAU,EAAE,wBAAwB;MACpCC,WAAW,EAAE;IACf,CAAC;IACA,CACC,cAAc,EACd,aAAa,EACb,MAAM,EACN,YAAY,EACZ,YAAY,EACZ,MAAM,CACP,CAACC,OAAO,CAAC,UAASC,IAAI,EAAE;MACvB,IAAIC,OAAO,GAAGvB,KAAK,CAACc,SAAS,CAACQ,IAAI,CAAC;MACnC,IAAIC,OAAO,EAAE;QACXA,OAAO,CAAC,OAAO,CAAC,CAACV,MAAM,GAAG;UACxB,aAAa,EAAE,SAAS;UACxB,iBAAiB,EAAE,SAAS;UAC5B,gBAAgB,EAAE;YAChBX,OAAO,EAAE,SAAS;YAClBW,MAAM,EAAEb,KAAK,CAACc,SAAS,CAACjB;UAC1B;QACF,CAAC;MACH;IACF,CAAC,CAAC;EACJ,CAAC,EAAEG,KAAK,CAAC;AACX"},"metadata":{},"sourceType":"script","externalDependencies":[]}