{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActionConfiguration = exports.ActionMethods = void 0;\nvar Configuration_js_1 = require(\"../Configuration.js\");\nvar TexParser_js_1 = __importDefault(require(\"../TexParser.js\"));\nvar SymbolMap_js_1 = require(\"../SymbolMap.js\");\nvar BaseMethods_js_1 = __importDefault(require(\"../base/BaseMethods.js\"));\nexports.ActionMethods = {};\nexports.ActionMethods.Macro = BaseMethods_js_1.default.Macro;\nexports.ActionMethods.Toggle = function (parser, name) {\n  var children = [];\n  var arg;\n  while ((arg = parser.GetArgument(name)) !== '\\\\endtoggle') {\n    children.push(new TexParser_js_1.default(arg, parser.stack.env, parser.configuration).mml());\n  }\n  parser.Push(parser.create('node', 'maction', children, {\n    actiontype: 'toggle'\n  }));\n};\nexports.ActionMethods.Mathtip = function (parser, name) {\n  var arg = parser.ParseArg(name);\n  var tip = parser.ParseArg(name);\n  parser.Push(parser.create('node', 'maction', [arg, tip], {\n    actiontype: 'tooltip'\n  }));\n};\nnew SymbolMap_js_1.CommandMap('action-macros', {\n  toggle: 'Toggle',\n  mathtip: 'Mathtip',\n  texttip: ['Macro', '\\\\mathtip{#1}{\\\\text{#2}}', 2]\n}, exports.ActionMethods);\nexports.ActionConfiguration = Configuration_js_1.Configuration.create('action', {\n  handler: {\n    macro: ['action-macros']\n  }\n});","map":{"version":3,"names":["Configuration_js_1","require","TexParser_js_1","__importDefault","SymbolMap_js_1","BaseMethods_js_1","exports","ActionMethods","Macro","default","Toggle","parser","name","children","arg","GetArgument","push","stack","env","configuration","mml","Push","create","actiontype","Mathtip","ParseArg","tip","CommandMap","toggle","mathtip","texttip","ActionConfiguration","Configuration","handler","macro"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/input/tex/action/ActionConfiguration.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the action package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration} from '../Configuration.js';\nimport TexParser from '../TexParser.js';\nimport {CommandMap} from '../SymbolMap.js';\nimport {ParseMethod} from '../Types.js';\nimport BaseMethods from '../base/BaseMethods.js';\n\n\n// Namespace\nexport let ActionMethods: Record<string, ParseMethod> = {};\n\nActionMethods.Macro = BaseMethods.Macro;\n\n/**\n * Implement \\toggle {math1} {math2} ... \\endtoggle\n *    (as an <maction actiontype=\"toggle\">)\n * @param {TexParser} parser The current tex parser.\n * @param {string} name The name of the calling macro.\n */\nActionMethods.Toggle = function(parser: TexParser, name: string) {\n  const children = [];\n  let arg;\n  while ((arg = parser.GetArgument(name)) !== '\\\\endtoggle') {\n    children.push(\n      new TexParser(arg, parser.stack.env, parser.configuration).mml());\n  }\n  parser.Push(\n    parser.create('node', 'maction', children, {actiontype: 'toggle'}));\n};\n\n\n/**\n * Implement \\mathtip{math}{tip}\n *   (an an <maction actiontype=\"tooltip\">)\n * @param {TexParser} parser The current tex parser.\n * @param {string} name The name of the calling macro.\n */\nActionMethods.Mathtip = function(parser: TexParser, name: string) {\n  const arg = parser.ParseArg(name);\n  const tip = parser.ParseArg(name);\n  parser.Push(\n    parser.create('node', 'maction', [arg, tip], {actiontype: 'tooltip'}));\n};\n\n\nnew CommandMap('action-macros', {\n  toggle:  'Toggle',\n  mathtip: 'Mathtip',\n  texttip: ['Macro', '\\\\mathtip{#1}{\\\\text{#2}}', 2]\n}, ActionMethods);\n\n\nexport const ActionConfiguration = Configuration.create(\n  'action', {handler: {macro: ['action-macros']}}\n);\n"],"mappings":";;;;;;;;;;;AAwBA,IAAAA,kBAAA,GAAAC,OAAA;AACA,IAAAC,cAAA,GAAAC,eAAA,CAAAF,OAAA;AACA,IAAAG,cAAA,GAAAH,OAAA;AAEA,IAAAI,gBAAA,GAAAF,eAAA,CAAAF,OAAA;AAIWK,OAAA,CAAAC,aAAa,GAAgC,EAAE;AAE1DD,OAAA,CAAAC,aAAa,CAACC,KAAK,GAAGH,gBAAA,CAAAI,OAAW,CAACD,KAAK;AAQvCF,OAAA,CAAAC,aAAa,CAACG,MAAM,GAAG,UAASC,MAAiB,EAAEC,IAAY;EAC7D,IAAMC,QAAQ,GAAG,EAAE;EACnB,IAAIC,GAAG;EACP,OAAO,CAACA,GAAG,GAAGH,MAAM,CAACI,WAAW,CAACH,IAAI,CAAC,MAAM,aAAa,EAAE;IACzDC,QAAQ,CAACG,IAAI,CACX,IAAId,cAAA,CAAAO,OAAS,CAACK,GAAG,EAAEH,MAAM,CAACM,KAAK,CAACC,GAAG,EAAEP,MAAM,CAACQ,aAAa,CAAC,CAACC,GAAG,EAAE,CAAC;;EAErET,MAAM,CAACU,IAAI,CACTV,MAAM,CAACW,MAAM,CAAC,MAAM,EAAE,SAAS,EAAET,QAAQ,EAAE;IAACU,UAAU,EAAE;EAAQ,CAAC,CAAC,CAAC;AACvE,CAAC;AASDjB,OAAA,CAAAC,aAAa,CAACiB,OAAO,GAAG,UAASb,MAAiB,EAAEC,IAAY;EAC9D,IAAME,GAAG,GAAGH,MAAM,CAACc,QAAQ,CAACb,IAAI,CAAC;EACjC,IAAMc,GAAG,GAAGf,MAAM,CAACc,QAAQ,CAACb,IAAI,CAAC;EACjCD,MAAM,CAACU,IAAI,CACTV,MAAM,CAACW,MAAM,CAAC,MAAM,EAAE,SAAS,EAAE,CAACR,GAAG,EAAEY,GAAG,CAAC,EAAE;IAACH,UAAU,EAAE;EAAS,CAAC,CAAC,CAAC;AAC1E,CAAC;AAGD,IAAInB,cAAA,CAAAuB,UAAU,CAAC,eAAe,EAAE;EAC9BC,MAAM,EAAG,QAAQ;EACjBC,OAAO,EAAE,SAAS;EAClBC,OAAO,EAAE,CAAC,OAAO,EAAE,2BAA2B,EAAE,CAAC;CAClD,EAAExB,OAAA,CAAAC,aAAa,CAAC;AAGJD,OAAA,CAAAyB,mBAAmB,GAAG/B,kBAAA,CAAAgC,aAAa,CAACV,MAAM,CACrD,QAAQ,EAAE;EAACW,OAAO,EAAE;IAACC,KAAK,EAAE,CAAC,eAAe;EAAC;AAAC,CAAC,CAChD"},"metadata":{},"sourceType":"script","externalDependencies":[]}