{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument } from '@mui/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridExpandedRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getColumnsToExport } from './utils';\nimport { mergeStateWithPaginationModel } from '../pagination/useGridPagination';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridPrintExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { getTotalHeaderHeight } from '../columns/gridColumnsUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction raf() {\n  return new Promise(resolve => {\n    requestAnimationFrame(() => {\n      resolve();\n    });\n  });\n}\nfunction buildPrintWindow(title) {\n  const iframeEl = document.createElement('iframe');\n  iframeEl.style.position = 'absolute';\n  iframeEl.style.width = '0px';\n  iframeEl.style.height = '0px';\n  iframeEl.title = title || document.title;\n  return iframeEl;\n}\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridPrintExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  const previousRows = React.useRef([]);\n  React.useEffect(() => {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]);\n\n  // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns, includeCheckboxes) => new Promise(resolve => {\n    const exportedColumnFields = getColumnsToExport({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n    if (includeCheckboxes) {\n      newColumnVisibilityModel[GRID_CHECKBOX_SELECTION_COL_DEF.field] = true;\n    }\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]);\n  const updateGridRowsForPrint = React.useCallback(getRowsToExport => {\n    const rowsToExportIds = getRowsToExport({\n      apiRef\n    });\n    const newRows = rowsToExportIds.map(id => apiRef.current.getRow(id));\n    apiRef.current.setRows(newRows);\n  }, [apiRef]);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    var _querySelector, _querySelector2;\n    const normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false,\n      includeCheckboxes: false\n    }, options);\n    const printDoc = printWindow.contentDocument;\n    if (!printDoc) {\n      return;\n    }\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true);\n\n    // Allow to overflow to not hide the border of the last row\n    const gridMain = gridClone.querySelector(\".\".concat(gridClasses.main));\n    gridMain.style.overflow = 'visible';\n\n    // See https://support.google.com/chrome/thread/191619088?hl=en&msgid=193009642\n    gridClone.style.contain = 'size';\n    const columnHeaders = gridClone.querySelector(\".\".concat(gridClasses.columnHeaders));\n    const columnHeadersInner = columnHeaders.querySelector(\".\".concat(gridClasses.columnHeadersInner));\n    columnHeadersInner.style.width = '100%';\n    let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(\".\".concat(gridClasses.toolbarContainer))) == null ? void 0 : _querySelector.offsetHeight) || 0;\n    let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(\".\".concat(gridClasses.footerContainer))) == null ? void 0 : _querySelector2.offsetHeight) || 0;\n    if (normalizeOptions.hideToolbar) {\n      var _gridClone$querySelec;\n      (_gridClone$querySelec = gridClone.querySelector(\".\".concat(gridClasses.toolbarContainer))) == null || _gridClone$querySelec.remove();\n      gridToolbarElementHeight = 0;\n    }\n    if (normalizeOptions.hideFooter) {\n      var _gridClone$querySelec2;\n      (_gridClone$querySelec2 = gridClone.querySelector(\".\".concat(gridClasses.footerContainer))) == null || _gridClone$querySelec2.remove();\n      gridFooterElementHeight = 0;\n    }\n\n    // Expand container height to accommodate all rows\n    const computedTotalHeight = rowsMeta.currentPageTotalHeight + getTotalHeaderHeight(apiRef, props.columnHeaderHeight) + gridToolbarElementHeight + gridFooterElementHeight;\n    gridClone.style.height = \"\".concat(computedTotalHeight, \"px\");\n    // The height above does not include grid border width, so we need to exclude it\n    gridClone.style.boxSizing = 'content-box';\n\n    // the footer is always being placed at the bottom of the page as if all rows are exported\n    // so if getRowsToExport is being used to only export a subset of rows then we need to\n    // adjust the footer position to be correctly placed at the bottom of the grid\n    if (options != null && options.getRowsToExport) {\n      const gridFooterElement = gridClone.querySelector(\".\".concat(gridClasses.footerContainer));\n      gridFooterElement.style.position = 'absolute';\n      gridFooterElement.style.width = '100%';\n      gridFooterElement.style.top = \"\".concat(computedTotalHeight - gridFooterElementHeight, \"px\");\n    }\n\n    // printDoc.body.appendChild(gridClone); should be enough but a clone isolation bug in Safari\n    // prevents us to do it\n    const container = document.createElement('div');\n    container.appendChild(gridClone);\n    printDoc.body.innerHTML = container.innerHTML;\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n    const stylesheetLoadPromises = [];\n    if (normalizeOptions.copyStyles) {\n      const rootCandidate = gridRootElement.getRootNode();\n      const root = rootCandidate.constructor.name === 'ShadowRoot' ? rootCandidate : doc.current;\n      const headStyleElements = root.querySelectorAll(\"style, link[rel='stylesheet']\");\n      for (let i = 0; i < headStyleElements.length; i += 1) {\n        const node = headStyleElements[i];\n        if (node.tagName === 'STYLE') {\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          const sheet = node.sheet;\n          if (sheet) {\n            let styleCSS = '';\n            // NOTE: for-of is not supported by IE\n            for (let j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += \"\".concat(sheet.cssRules[j].cssText, \"\\r\\n\");\n              }\n            }\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          for (let j = 0; j < node.attributes.length; j += 1) {\n            const attr = node.attributes[j];\n            if (attr) {\n              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n          stylesheetLoadPromises.push(new Promise(resolve => {\n            newHeadStyleElements.addEventListener('load', () => resolve());\n          }));\n          printDoc.head.appendChild(newHeadStyleElements);\n        }\n      }\n    }\n\n    // Trigger print\n    if (process.env.NODE_ENV !== 'test') {\n      // wait for remote stylesheets to load\n      Promise.all(stylesheetLoadPromises).then(() => {\n        printWindow.contentWindow.print();\n      });\n    }\n  }, [apiRef, doc, props.columnHeaderHeight]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    var _previousGridState$cu;\n    // Remove the print iframe\n    doc.current.body.removeChild(printWindow);\n\n    // Revert grid to previous state\n    apiRef.current.restoreState(previousGridState.current || {});\n    if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu = _previousGridState$cu.columns) != null && _previousGridState$cu.columnVisibilityModel)) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n    apiRef.current.unstable_setVirtualization(true);\n    apiRef.current.setRows(previousRows.current);\n\n    // Clear local state\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n    previousRows.current = [];\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(\"Export data as Print\");\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI: No grid root element available.');\n    }\n    previousGridState.current = apiRef.current.exportState();\n    // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n    previousRows.current = apiRef.current.getSortedRows();\n    if (props.pagination) {\n      const visibleRowCount = gridExpandedRowCountSelector(apiRef);\n      const paginationModel = {\n        page: 0,\n        pageSize: visibleRowCount\n      };\n      apiRef.current.updateControlState('pagination',\n      // Using signature `DataGridPro` to allow more than 100 rows in the print export\n      mergeStateWithPaginationModel(visibleRowCount, 'DataGridPro', paginationModel));\n      apiRef.current.forceUpdate();\n    }\n    await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns, options == null ? void 0 : options.includeCheckboxes);\n    if (options != null && options.getRowsToExport) {\n      updateGridRowsForPrint(options.getRowsToExport);\n    }\n    apiRef.current.unstable_setVirtualization(false);\n    await raf(); // wait for the state changes to take action\n    const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);\n    if (process.env.NODE_ENV === 'test') {\n      doc.current.body.appendChild(printWindow);\n      // In test env, run the all pipeline without waiting for loading\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => {\n        handlePrintWindowLoad(printWindow, options);\n        const mediaQueryList = printWindow.contentWindow.matchMedia('print');\n        mediaQueryList.addEventListener('change', mql => {\n          const isAfterPrint = mql.matches === false;\n          if (isAfterPrint) {\n            handlePrintWindowAfterPrint(printWindow);\n          }\n        });\n      };\n      doc.current.body.appendChild(printWindow);\n    }\n  }, [props, logger, apiRef, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint, updateGridRowsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$printOptions;\n    if ((_options$printOptions = options.printOptions) != null && _options$printOptions.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};","map":{"version":3,"names":["_extends","React","unstable_ownerDocument","ownerDocument","useGridLogger","gridExpandedRowCountSelector","gridColumnDefinitionsSelector","gridColumnVisibilityModelSelector","gridClasses","useGridApiMethod","gridRowsMetaSelector","getColumnsToExport","mergeStateWithPaginationModel","useGridRegisterPipeProcessor","GridPrintExportMenuItem","getTotalHeaderHeight","GRID_CHECKBOX_SELECTION_COL_DEF","jsx","_jsx","raf","Promise","resolve","requestAnimationFrame","buildPrintWindow","title","iframeEl","document","createElement","style","position","width","height","useGridPrintExport","apiRef","props","logger","doc","useRef","previousGridState","previousColumnVisibility","previousRows","useEffect","current","rootElementRef","updateGridColumnsForPrint","useCallback","fields","allColumns","includeCheckboxes","exportedColumnFields","options","map","column","field","columns","newColumnVisibilityModel","forEach","includes","setColumnVisibilityModel","updateGridRowsForPrint","getRowsToExport","rowsToExportIds","newRows","id","getRow","setRows","handlePrintWindowLoad","printWindow","_querySelector","_querySelector2","normalizeOptions","copyStyles","hideToolbar","hideFooter","printDoc","contentDocument","rowsMeta","state","gridRootElement","gridClone","cloneNode","gridMain","querySelector","concat","main","overflow","contain","columnHeaders","columnHeadersInner","gridToolbarElementHeight","toolbarContainer","offsetHeight","gridFooterElementHeight","footerContainer","_gridClone$querySelec","remove","_gridClone$querySelec2","computedTotalHeight","currentPageTotalHeight","columnHeaderHeight","boxSizing","gridFooterElement","top","container","appendChild","body","innerHTML","defaultPageStyle","pageStyle","styleElement","createTextNode","head","bodyClassName","classList","add","split","stylesheetLoadPromises","rootCandidate","getRootNode","root","constructor","name","headStyleElements","querySelectorAll","i","length","node","tagName","newHeadStyleElements","sheet","styleCSS","j","cssRules","cssText","getAttribute","attributes","attr","setAttribute","nodeName","nodeValue","push","addEventListener","process","env","NODE_ENV","all","then","contentWindow","print","handlePrintWindowAfterPrint","_previousGridState$cu","removeChild","restoreState","columnVisibilityModel","unstable_setVirtualization","exportDataAsPrint","debug","Error","exportState","getSortedRows","pagination","visibleRowCount","paginationModel","page","pageSize","updateControlState","forceUpdate","fileName","onload","mediaQueryList","matchMedia","mql","isAfterPrint","matches","printExportApi","addExportMenuButtons","initialValue","_options$printOptions","printOptions","disableToolbarButton","component","componentName"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_ownerDocument as ownerDocument } from '@mui/utils';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridExpandedRowCountSelector } from '../filter/gridFilterSelector';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../columns/gridColumnsSelector';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getColumnsToExport } from './utils';\nimport { mergeStateWithPaginationModel } from '../pagination/useGridPagination';\nimport { useGridRegisterPipeProcessor } from '../../core/pipeProcessing';\nimport { GridPrintExportMenuItem } from '../../../components/toolbar/GridToolbarExport';\nimport { getTotalHeaderHeight } from '../columns/gridColumnsUtils';\nimport { GRID_CHECKBOX_SELECTION_COL_DEF } from '../../../colDef/gridCheckboxSelectionColDef';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction raf() {\n  return new Promise(resolve => {\n    requestAnimationFrame(() => {\n      resolve();\n    });\n  });\n}\nfunction buildPrintWindow(title) {\n  const iframeEl = document.createElement('iframe');\n  iframeEl.style.position = 'absolute';\n  iframeEl.style.width = '0px';\n  iframeEl.style.height = '0px';\n  iframeEl.title = title || document.title;\n  return iframeEl;\n}\n\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\nexport const useGridPrintExport = (apiRef, props) => {\n  const logger = useGridLogger(apiRef, 'useGridPrintExport');\n  const doc = React.useRef(null);\n  const previousGridState = React.useRef(null);\n  const previousColumnVisibility = React.useRef({});\n  const previousRows = React.useRef([]);\n  React.useEffect(() => {\n    doc.current = ownerDocument(apiRef.current.rootElementRef.current);\n  }, [apiRef]);\n\n  // Returns a promise because updateColumns triggers state update and\n  // the new state needs to be in place before the grid can be sized correctly\n  const updateGridColumnsForPrint = React.useCallback((fields, allColumns, includeCheckboxes) => new Promise(resolve => {\n    const exportedColumnFields = getColumnsToExport({\n      apiRef,\n      options: {\n        fields,\n        allColumns\n      }\n    }).map(column => column.field);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const newColumnVisibilityModel = {};\n    columns.forEach(column => {\n      newColumnVisibilityModel[column.field] = exportedColumnFields.includes(column.field);\n    });\n    if (includeCheckboxes) {\n      newColumnVisibilityModel[GRID_CHECKBOX_SELECTION_COL_DEF.field] = true;\n    }\n    apiRef.current.setColumnVisibilityModel(newColumnVisibilityModel);\n    resolve();\n  }), [apiRef]);\n  const updateGridRowsForPrint = React.useCallback(getRowsToExport => {\n    const rowsToExportIds = getRowsToExport({\n      apiRef\n    });\n    const newRows = rowsToExportIds.map(id => apiRef.current.getRow(id));\n    apiRef.current.setRows(newRows);\n  }, [apiRef]);\n  const handlePrintWindowLoad = React.useCallback((printWindow, options) => {\n    var _querySelector, _querySelector2;\n    const normalizeOptions = _extends({\n      copyStyles: true,\n      hideToolbar: false,\n      hideFooter: false,\n      includeCheckboxes: false\n    }, options);\n    const printDoc = printWindow.contentDocument;\n    if (!printDoc) {\n      return;\n    }\n    const rowsMeta = gridRowsMetaSelector(apiRef.current.state);\n    const gridRootElement = apiRef.current.rootElementRef.current;\n    const gridClone = gridRootElement.cloneNode(true);\n\n    // Allow to overflow to not hide the border of the last row\n    const gridMain = gridClone.querySelector(`.${gridClasses.main}`);\n    gridMain.style.overflow = 'visible';\n\n    // See https://support.google.com/chrome/thread/191619088?hl=en&msgid=193009642\n    gridClone.style.contain = 'size';\n    const columnHeaders = gridClone.querySelector(`.${gridClasses.columnHeaders}`);\n    const columnHeadersInner = columnHeaders.querySelector(`.${gridClasses.columnHeadersInner}`);\n    columnHeadersInner.style.width = '100%';\n    let gridToolbarElementHeight = ((_querySelector = gridRootElement.querySelector(`.${gridClasses.toolbarContainer}`)) == null ? void 0 : _querySelector.offsetHeight) || 0;\n    let gridFooterElementHeight = ((_querySelector2 = gridRootElement.querySelector(`.${gridClasses.footerContainer}`)) == null ? void 0 : _querySelector2.offsetHeight) || 0;\n    if (normalizeOptions.hideToolbar) {\n      var _gridClone$querySelec;\n      (_gridClone$querySelec = gridClone.querySelector(`.${gridClasses.toolbarContainer}`)) == null || _gridClone$querySelec.remove();\n      gridToolbarElementHeight = 0;\n    }\n    if (normalizeOptions.hideFooter) {\n      var _gridClone$querySelec2;\n      (_gridClone$querySelec2 = gridClone.querySelector(`.${gridClasses.footerContainer}`)) == null || _gridClone$querySelec2.remove();\n      gridFooterElementHeight = 0;\n    }\n\n    // Expand container height to accommodate all rows\n    const computedTotalHeight = rowsMeta.currentPageTotalHeight + getTotalHeaderHeight(apiRef, props.columnHeaderHeight) + gridToolbarElementHeight + gridFooterElementHeight;\n    gridClone.style.height = `${computedTotalHeight}px`;\n    // The height above does not include grid border width, so we need to exclude it\n    gridClone.style.boxSizing = 'content-box';\n\n    // the footer is always being placed at the bottom of the page as if all rows are exported\n    // so if getRowsToExport is being used to only export a subset of rows then we need to\n    // adjust the footer position to be correctly placed at the bottom of the grid\n    if (options != null && options.getRowsToExport) {\n      const gridFooterElement = gridClone.querySelector(`.${gridClasses.footerContainer}`);\n      gridFooterElement.style.position = 'absolute';\n      gridFooterElement.style.width = '100%';\n      gridFooterElement.style.top = `${computedTotalHeight - gridFooterElementHeight}px`;\n    }\n\n    // printDoc.body.appendChild(gridClone); should be enough but a clone isolation bug in Safari\n    // prevents us to do it\n    const container = document.createElement('div');\n    container.appendChild(gridClone);\n    printDoc.body.innerHTML = container.innerHTML;\n    const defaultPageStyle = typeof normalizeOptions.pageStyle === 'function' ? normalizeOptions.pageStyle() : normalizeOptions.pageStyle;\n    if (typeof defaultPageStyle === 'string') {\n      // TODO custom styles should always win\n      const styleElement = printDoc.createElement('style');\n      styleElement.appendChild(printDoc.createTextNode(defaultPageStyle));\n      printDoc.head.appendChild(styleElement);\n    }\n    if (normalizeOptions.bodyClassName) {\n      printDoc.body.classList.add(...normalizeOptions.bodyClassName.split(' '));\n    }\n    const stylesheetLoadPromises = [];\n    if (normalizeOptions.copyStyles) {\n      const rootCandidate = gridRootElement.getRootNode();\n      const root = rootCandidate.constructor.name === 'ShadowRoot' ? rootCandidate : doc.current;\n      const headStyleElements = root.querySelectorAll(\"style, link[rel='stylesheet']\");\n      for (let i = 0; i < headStyleElements.length; i += 1) {\n        const node = headStyleElements[i];\n        if (node.tagName === 'STYLE') {\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          const sheet = node.sheet;\n          if (sheet) {\n            let styleCSS = '';\n            // NOTE: for-of is not supported by IE\n            for (let j = 0; j < sheet.cssRules.length; j += 1) {\n              if (typeof sheet.cssRules[j].cssText === 'string') {\n                styleCSS += `${sheet.cssRules[j].cssText}\\r\\n`;\n              }\n            }\n            newHeadStyleElements.appendChild(printDoc.createTextNode(styleCSS));\n            printDoc.head.appendChild(newHeadStyleElements);\n          }\n        } else if (node.getAttribute('href')) {\n          // If `href` tag is empty, avoid loading these links\n\n          const newHeadStyleElements = printDoc.createElement(node.tagName);\n          for (let j = 0; j < node.attributes.length; j += 1) {\n            const attr = node.attributes[j];\n            if (attr) {\n              newHeadStyleElements.setAttribute(attr.nodeName, attr.nodeValue || '');\n            }\n          }\n          stylesheetLoadPromises.push(new Promise(resolve => {\n            newHeadStyleElements.addEventListener('load', () => resolve());\n          }));\n          printDoc.head.appendChild(newHeadStyleElements);\n        }\n      }\n    }\n\n    // Trigger print\n    if (process.env.NODE_ENV !== 'test') {\n      // wait for remote stylesheets to load\n      Promise.all(stylesheetLoadPromises).then(() => {\n        printWindow.contentWindow.print();\n      });\n    }\n  }, [apiRef, doc, props.columnHeaderHeight]);\n  const handlePrintWindowAfterPrint = React.useCallback(printWindow => {\n    var _previousGridState$cu;\n    // Remove the print iframe\n    doc.current.body.removeChild(printWindow);\n\n    // Revert grid to previous state\n    apiRef.current.restoreState(previousGridState.current || {});\n    if (!((_previousGridState$cu = previousGridState.current) != null && (_previousGridState$cu = _previousGridState$cu.columns) != null && _previousGridState$cu.columnVisibilityModel)) {\n      // if the apiRef.current.exportState(); did not exported the column visibility, we update it\n      apiRef.current.setColumnVisibilityModel(previousColumnVisibility.current);\n    }\n    apiRef.current.unstable_setVirtualization(true);\n    apiRef.current.setRows(previousRows.current);\n\n    // Clear local state\n    previousGridState.current = null;\n    previousColumnVisibility.current = {};\n    previousRows.current = [];\n  }, [apiRef]);\n  const exportDataAsPrint = React.useCallback(async options => {\n    logger.debug(`Export data as Print`);\n    if (!apiRef.current.rootElementRef.current) {\n      throw new Error('MUI: No grid root element available.');\n    }\n    previousGridState.current = apiRef.current.exportState();\n    // It appends that the visibility model is not exported, especially if columnVisibility is not controlled\n    previousColumnVisibility.current = gridColumnVisibilityModelSelector(apiRef);\n    previousRows.current = apiRef.current.getSortedRows();\n    if (props.pagination) {\n      const visibleRowCount = gridExpandedRowCountSelector(apiRef);\n      const paginationModel = {\n        page: 0,\n        pageSize: visibleRowCount\n      };\n      apiRef.current.updateControlState('pagination',\n      // Using signature `DataGridPro` to allow more than 100 rows in the print export\n      mergeStateWithPaginationModel(visibleRowCount, 'DataGridPro', paginationModel));\n      apiRef.current.forceUpdate();\n    }\n    await updateGridColumnsForPrint(options == null ? void 0 : options.fields, options == null ? void 0 : options.allColumns, options == null ? void 0 : options.includeCheckboxes);\n    if (options != null && options.getRowsToExport) {\n      updateGridRowsForPrint(options.getRowsToExport);\n    }\n    apiRef.current.unstable_setVirtualization(false);\n    await raf(); // wait for the state changes to take action\n    const printWindow = buildPrintWindow(options == null ? void 0 : options.fileName);\n    if (process.env.NODE_ENV === 'test') {\n      doc.current.body.appendChild(printWindow);\n      // In test env, run the all pipeline without waiting for loading\n      handlePrintWindowLoad(printWindow, options);\n      handlePrintWindowAfterPrint(printWindow);\n    } else {\n      printWindow.onload = () => {\n        handlePrintWindowLoad(printWindow, options);\n        const mediaQueryList = printWindow.contentWindow.matchMedia('print');\n        mediaQueryList.addEventListener('change', mql => {\n          const isAfterPrint = mql.matches === false;\n          if (isAfterPrint) {\n            handlePrintWindowAfterPrint(printWindow);\n          }\n        });\n      };\n      doc.current.body.appendChild(printWindow);\n    }\n  }, [props, logger, apiRef, handlePrintWindowLoad, handlePrintWindowAfterPrint, updateGridColumnsForPrint, updateGridRowsForPrint]);\n  const printExportApi = {\n    exportDataAsPrint\n  };\n  useGridApiMethod(apiRef, printExportApi, 'public');\n\n  /**\n   * PRE-PROCESSING\n   */\n  const addExportMenuButtons = React.useCallback((initialValue, options) => {\n    var _options$printOptions;\n    if ((_options$printOptions = options.printOptions) != null && _options$printOptions.disableToolbarButton) {\n      return initialValue;\n    }\n    return [...initialValue, {\n      component: /*#__PURE__*/_jsx(GridPrintExportMenuItem, {\n        options: options.printOptions\n      }),\n      componentName: 'printExport'\n    }];\n  }, []);\n  useGridRegisterPipeProcessor(apiRef, 'exportMenu', addExportMenuButtons);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}