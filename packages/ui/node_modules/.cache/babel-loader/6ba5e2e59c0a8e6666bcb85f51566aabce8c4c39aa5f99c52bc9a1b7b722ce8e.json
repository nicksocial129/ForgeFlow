{"ast":null,"code":"import{useState}from'react';import{useDispatch,useSelector}from'react-redux';import{enqueueSnackbar as enqueueSnackbarAction,closeSnackbar as closeSnackbarAction,SET_CHATFLOW}from'store/actions';import{SketchPicker}from'react-color';import{Box,Typography,Button,Switch,OutlinedInput,Popover,Stack,IconButton}from'@mui/material';import{useTheme}from'@mui/material/styles';// Project import\nimport{StyledButton}from'ui-component/button/StyledButton';import{TooltipWithParser}from'ui-component/tooltip/TooltipWithParser';// Icons\nimport{IconX,IconCopy,IconArrowUpRightCircle}from'@tabler/icons';// API\nimport chatflowsApi from'api/chatflows';// utils\nimport useNotifier from'utils/useNotifier';// Const\nimport{baseURL}from'store/constant';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const defaultConfig={backgroundColor:'#ffffff',fontSize:16,poweredByTextColor:'#303235',botMessage:{backgroundColor:'#f7f8ff',textColor:'#303235'},userMessage:{backgroundColor:'#3B81F6',textColor:'#ffffff'},textInput:{backgroundColor:'#ffffff',textColor:'#303235',sendButtonColor:'#3B81F6'}};const ShareChatbot=_ref=>{var _chatflow$isPublic,_chatbotConfig$genera,_chatbotConfig$title,_chatbotConfig$titleA,_chatbotConfig$welcom,_chatbotConfig$backgr,_chatbotConfig$fontSi,_chatbotConfig$powere,_chatbotConfig$botMes,_chatbotConfig$botMes2,_chatbotConfig$botMes3,_chatbotConfig$botMes4,_chatbotConfig$botMes5,_chatbotConfig$botMes6,_chatbotConfig$botMes7,_chatbotConfig$botMes8,_chatbotConfig$userMe,_chatbotConfig$userMe2,_chatbotConfig$userMe3,_chatbotConfig$userMe4,_chatbotConfig$userMe5,_chatbotConfig$userMe6,_chatbotConfig$userMe7,_chatbotConfig$userMe8,_chatbotConfig$textIn,_chatbotConfig$textIn2,_chatbotConfig$textIn3,_chatbotConfig$textIn4,_chatbotConfig$textIn5,_chatbotConfig$textIn6,_chatbotConfig$textIn7,_chatbotConfig$textIn8;let{isSessionMemory}=_ref;const dispatch=useDispatch();const theme=useTheme();const chatflow=useSelector(state=>state.canvas.chatflow);const chatflowid=chatflow.id;const chatbotConfig=chatflow.chatbotConfig?JSON.parse(chatflow.chatbotConfig):{};useNotifier();const enqueueSnackbar=function(){return dispatch(enqueueSnackbarAction(...arguments));};const closeSnackbar=function(){return dispatch(closeSnackbarAction(...arguments));};const[isPublicChatflow,setChatflowIsPublic]=useState((_chatflow$isPublic=chatflow.isPublic)!==null&&_chatflow$isPublic!==void 0?_chatflow$isPublic:false);const[generateNewSession,setGenerateNewSession]=useState((_chatbotConfig$genera=chatbotConfig===null||chatbotConfig===void 0?void 0:chatbotConfig.generateNewSession)!==null&&_chatbotConfig$genera!==void 0?_chatbotConfig$genera:false);const[title,setTitle]=useState((_chatbotConfig$title=chatbotConfig===null||chatbotConfig===void 0?void 0:chatbotConfig.title)!==null&&_chatbotConfig$title!==void 0?_chatbotConfig$title:'');const[titleAvatarSrc,setTitleAvatarSrc]=useState((_chatbotConfig$titleA=chatbotConfig===null||chatbotConfig===void 0?void 0:chatbotConfig.titleAvatarSrc)!==null&&_chatbotConfig$titleA!==void 0?_chatbotConfig$titleA:'');const[welcomeMessage,setWelcomeMessage]=useState((_chatbotConfig$welcom=chatbotConfig===null||chatbotConfig===void 0?void 0:chatbotConfig.welcomeMessage)!==null&&_chatbotConfig$welcom!==void 0?_chatbotConfig$welcom:'');const[backgroundColor,setBackgroundColor]=useState((_chatbotConfig$backgr=chatbotConfig===null||chatbotConfig===void 0?void 0:chatbotConfig.backgroundColor)!==null&&_chatbotConfig$backgr!==void 0?_chatbotConfig$backgr:defaultConfig.backgroundColor);const[fontSize,setFontSize]=useState((_chatbotConfig$fontSi=chatbotConfig===null||chatbotConfig===void 0?void 0:chatbotConfig.fontSize)!==null&&_chatbotConfig$fontSi!==void 0?_chatbotConfig$fontSi:defaultConfig.fontSize);const[poweredByTextColor,setPoweredByTextColor]=useState((_chatbotConfig$powere=chatbotConfig===null||chatbotConfig===void 0?void 0:chatbotConfig.poweredByTextColor)!==null&&_chatbotConfig$powere!==void 0?_chatbotConfig$powere:defaultConfig.poweredByTextColor);const[botMessageBackgroundColor,setBotMessageBackgroundColor]=useState((_chatbotConfig$botMes=chatbotConfig===null||chatbotConfig===void 0?void 0:(_chatbotConfig$botMes2=chatbotConfig.botMessage)===null||_chatbotConfig$botMes2===void 0?void 0:_chatbotConfig$botMes2.backgroundColor)!==null&&_chatbotConfig$botMes!==void 0?_chatbotConfig$botMes:defaultConfig.botMessage.backgroundColor);const[botMessageTextColor,setBotMessageTextColor]=useState((_chatbotConfig$botMes3=chatbotConfig===null||chatbotConfig===void 0?void 0:(_chatbotConfig$botMes4=chatbotConfig.botMessage)===null||_chatbotConfig$botMes4===void 0?void 0:_chatbotConfig$botMes4.textColor)!==null&&_chatbotConfig$botMes3!==void 0?_chatbotConfig$botMes3:defaultConfig.botMessage.textColor);const[botMessageAvatarSrc,setBotMessageAvatarSrc]=useState((_chatbotConfig$botMes5=chatbotConfig===null||chatbotConfig===void 0?void 0:(_chatbotConfig$botMes6=chatbotConfig.botMessage)===null||_chatbotConfig$botMes6===void 0?void 0:_chatbotConfig$botMes6.avatarSrc)!==null&&_chatbotConfig$botMes5!==void 0?_chatbotConfig$botMes5:'');const[botMessageShowAvatar,setBotMessageShowAvatar]=useState((_chatbotConfig$botMes7=chatbotConfig===null||chatbotConfig===void 0?void 0:(_chatbotConfig$botMes8=chatbotConfig.botMessage)===null||_chatbotConfig$botMes8===void 0?void 0:_chatbotConfig$botMes8.showAvatar)!==null&&_chatbotConfig$botMes7!==void 0?_chatbotConfig$botMes7:false);const[userMessageBackgroundColor,setUserMessageBackgroundColor]=useState((_chatbotConfig$userMe=chatbotConfig===null||chatbotConfig===void 0?void 0:(_chatbotConfig$userMe2=chatbotConfig.userMessage)===null||_chatbotConfig$userMe2===void 0?void 0:_chatbotConfig$userMe2.backgroundColor)!==null&&_chatbotConfig$userMe!==void 0?_chatbotConfig$userMe:defaultConfig.userMessage.backgroundColor);const[userMessageTextColor,setUserMessageTextColor]=useState((_chatbotConfig$userMe3=chatbotConfig===null||chatbotConfig===void 0?void 0:(_chatbotConfig$userMe4=chatbotConfig.userMessage)===null||_chatbotConfig$userMe4===void 0?void 0:_chatbotConfig$userMe4.textColor)!==null&&_chatbotConfig$userMe3!==void 0?_chatbotConfig$userMe3:defaultConfig.userMessage.textColor);const[userMessageAvatarSrc,setUserMessageAvatarSrc]=useState((_chatbotConfig$userMe5=chatbotConfig===null||chatbotConfig===void 0?void 0:(_chatbotConfig$userMe6=chatbotConfig.userMessage)===null||_chatbotConfig$userMe6===void 0?void 0:_chatbotConfig$userMe6.avatarSrc)!==null&&_chatbotConfig$userMe5!==void 0?_chatbotConfig$userMe5:'');const[userMessageShowAvatar,setUserMessageShowAvatar]=useState((_chatbotConfig$userMe7=chatbotConfig===null||chatbotConfig===void 0?void 0:(_chatbotConfig$userMe8=chatbotConfig.userMessage)===null||_chatbotConfig$userMe8===void 0?void 0:_chatbotConfig$userMe8.showAvatar)!==null&&_chatbotConfig$userMe7!==void 0?_chatbotConfig$userMe7:false);const[textInputBackgroundColor,setTextInputBackgroundColor]=useState((_chatbotConfig$textIn=chatbotConfig===null||chatbotConfig===void 0?void 0:(_chatbotConfig$textIn2=chatbotConfig.textInput)===null||_chatbotConfig$textIn2===void 0?void 0:_chatbotConfig$textIn2.backgroundColor)!==null&&_chatbotConfig$textIn!==void 0?_chatbotConfig$textIn:defaultConfig.textInput.backgroundColor);const[textInputTextColor,setTextInputTextColor]=useState((_chatbotConfig$textIn3=chatbotConfig===null||chatbotConfig===void 0?void 0:(_chatbotConfig$textIn4=chatbotConfig.textInput)===null||_chatbotConfig$textIn4===void 0?void 0:_chatbotConfig$textIn4.textColor)!==null&&_chatbotConfig$textIn3!==void 0?_chatbotConfig$textIn3:defaultConfig.textInput.textColor);const[textInputPlaceholder,setTextInputPlaceholder]=useState((_chatbotConfig$textIn5=chatbotConfig===null||chatbotConfig===void 0?void 0:(_chatbotConfig$textIn6=chatbotConfig.textInput)===null||_chatbotConfig$textIn6===void 0?void 0:_chatbotConfig$textIn6.placeholder)!==null&&_chatbotConfig$textIn5!==void 0?_chatbotConfig$textIn5:'');const[textInputSendButtonColor,setTextInputSendButtonColor]=useState((_chatbotConfig$textIn7=chatbotConfig===null||chatbotConfig===void 0?void 0:(_chatbotConfig$textIn8=chatbotConfig.textInput)===null||_chatbotConfig$textIn8===void 0?void 0:_chatbotConfig$textIn8.sendButtonColor)!==null&&_chatbotConfig$textIn7!==void 0?_chatbotConfig$textIn7:defaultConfig.textInput.sendButtonColor);const[colorAnchorEl,setColorAnchorEl]=useState(null);const[selectedColorConfig,setSelectedColorConfig]=useState('');const[sketchPickerColor,setSketchPickerColor]=useState('');const openColorPopOver=Boolean(colorAnchorEl);const[copyAnchorEl,setCopyAnchorEl]=useState(null);const openCopyPopOver=Boolean(copyAnchorEl);const formatObj=()=>{const obj={botMessage:{showAvatar:false},userMessage:{showAvatar:false},textInput:{},overrideConfig:{}};if(title)obj.title=title;if(titleAvatarSrc)obj.titleAvatarSrc=titleAvatarSrc;if(welcomeMessage)obj.welcomeMessage=welcomeMessage;if(backgroundColor)obj.backgroundColor=backgroundColor;if(fontSize)obj.fontSize=fontSize;if(poweredByTextColor)obj.poweredByTextColor=poweredByTextColor;if(botMessageBackgroundColor)obj.botMessage.backgroundColor=botMessageBackgroundColor;if(botMessageTextColor)obj.botMessage.textColor=botMessageTextColor;if(botMessageAvatarSrc)obj.botMessage.avatarSrc=botMessageAvatarSrc;if(botMessageShowAvatar)obj.botMessage.showAvatar=botMessageShowAvatar;if(userMessageBackgroundColor)obj.userMessage.backgroundColor=userMessageBackgroundColor;if(userMessageTextColor)obj.userMessage.textColor=userMessageTextColor;if(userMessageAvatarSrc)obj.userMessage.avatarSrc=userMessageAvatarSrc;if(userMessageShowAvatar)obj.userMessage.showAvatar=userMessageShowAvatar;if(textInputBackgroundColor)obj.textInput.backgroundColor=textInputBackgroundColor;if(textInputTextColor)obj.textInput.textColor=textInputTextColor;if(textInputPlaceholder)obj.textInput.placeholder=textInputPlaceholder;if(textInputSendButtonColor)obj.textInput.sendButtonColor=textInputSendButtonColor;if(isSessionMemory)obj.overrideConfig.generateNewSession=generateNewSession;if(chatbotConfig!==null&&chatbotConfig!==void 0&&chatbotConfig.starterPrompts)obj.starterPrompts=chatbotConfig.starterPrompts;return obj;};const onSave=async()=>{try{const saveResp=await chatflowsApi.updateChatflow(chatflowid,{chatbotConfig:JSON.stringify(formatObj())});if(saveResp.data){enqueueSnackbar({message:'Chatbot Configuration Saved',options:{key:new Date().getTime()+Math.random(),variant:'success',action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});dispatch({type:SET_CHATFLOW,chatflow:saveResp.data});}}catch(error){console.error(error);const errorData=error.response.data||\"\".concat(error.response.status,\": \").concat(error.response.statusText);enqueueSnackbar({message:\"Failed to save Chatbot Configuration: \".concat(errorData),options:{key:new Date().getTime()+Math.random(),variant:'error',persist:true,action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});}};const onSwitchChange=async checked=>{try{const saveResp=await chatflowsApi.updateChatflow(chatflowid,{isPublic:checked});if(saveResp.data){enqueueSnackbar({message:'Chatbot Configuration Saved',options:{key:new Date().getTime()+Math.random(),variant:'success',action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});dispatch({type:SET_CHATFLOW,chatflow:saveResp.data});}}catch(error){console.error(error);const errorData=error.response.data||\"\".concat(error.response.status,\": \").concat(error.response.statusText);enqueueSnackbar({message:\"Failed to save Chatbot Configuration: \".concat(errorData),options:{key:new Date().getTime()+Math.random(),variant:'error',persist:true,action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});}};const handleClosePopOver=()=>{setColorAnchorEl(null);};const handleCloseCopyPopOver=()=>{setCopyAnchorEl(null);};const onColorSelected=hexColor=>{switch(selectedColorConfig){case'backgroundColor':setBackgroundColor(hexColor);break;case'poweredByTextColor':setPoweredByTextColor(hexColor);break;case'botMessageBackgroundColor':setBotMessageBackgroundColor(hexColor);break;case'botMessageTextColor':setBotMessageTextColor(hexColor);break;case'userMessageBackgroundColor':setUserMessageBackgroundColor(hexColor);break;case'userMessageTextColor':setUserMessageTextColor(hexColor);break;case'textInputBackgroundColor':setTextInputBackgroundColor(hexColor);break;case'textInputTextColor':setTextInputTextColor(hexColor);break;case'textInputSendButtonColor':setTextInputSendButtonColor(hexColor);break;}setSketchPickerColor(hexColor);};const onTextChanged=(value,fieldName)=>{switch(fieldName){case'title':setTitle(value);break;case'titleAvatarSrc':setTitleAvatarSrc(value);break;case'welcomeMessage':setWelcomeMessage(value);break;case'fontSize':setFontSize(value);break;case'botMessageAvatarSrc':setBotMessageAvatarSrc(value);break;case'userMessageAvatarSrc':setUserMessageAvatarSrc(value);break;case'textInputPlaceholder':setTextInputPlaceholder(value);break;}};const onBooleanChanged=(value,fieldName)=>{switch(fieldName){case'botMessageShowAvatar':setBotMessageShowAvatar(value);break;case'userMessageShowAvatar':setUserMessageShowAvatar(value);break;case'generateNewSession':setGenerateNewSession(value);break;}};const colorField=(color,fieldName,fieldLabel)=>{return/*#__PURE__*/_jsx(Box,{sx:{pt:2,pb:2},children:/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'column',alignItems:'flex-start'},children:[/*#__PURE__*/_jsx(Typography,{sx:{mb:1},children:fieldLabel}),/*#__PURE__*/_jsx(Box,{sx:{cursor:'pointer',width:'30px',height:'30px',border:'1px solid #616161',marginRight:'10px',backgroundColor:color!==null&&color!==void 0?color:'#ffffff',borderRadius:'5px'},onClick:event=>{setSelectedColorConfig(fieldName);setSketchPickerColor(color!==null&&color!==void 0?color:'#ffffff');setColorAnchorEl(event.currentTarget);}})]})});};const booleanField=(value,fieldName,fieldLabel)=>{return/*#__PURE__*/_jsx(Box,{sx:{pt:2,pb:2},children:/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'column',alignItems:'flex-start'},children:[/*#__PURE__*/_jsx(Typography,{sx:{mb:1},children:fieldLabel}),/*#__PURE__*/_jsx(Switch,{id:fieldName,checked:value,onChange:event=>{onBooleanChanged(event.target.checked,fieldName);}})]})});};const textField=function(message,fieldName,fieldLabel){let fieldType=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'string';let placeholder=arguments.length>4&&arguments[4]!==undefined?arguments[4]:'';return/*#__PURE__*/_jsx(Box,{sx:{pt:2,pb:2},children:/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'column',alignItems:'flex-start'},children:[/*#__PURE__*/_jsx(Typography,{sx:{mb:1},children:fieldLabel}),/*#__PURE__*/_jsx(OutlinedInput,{id:fieldName,type:fieldType,fullWidth:true,value:message,placeholder:placeholder,name:fieldName,onChange:e=>{onTextChanged(e.target.value,fieldName);}})]})});};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Stack,{direction:\"row\",children:[/*#__PURE__*/_jsx(Typography,{sx:{p:1,borderRadius:10,backgroundColor:theme.palette.primary.light,width:'max-content',height:'max-content'},variant:\"h5\",children:\"\".concat(baseURL,\"/chatbot/\").concat(chatflowid)}),/*#__PURE__*/_jsx(IconButton,{title:\"Copy Link\",color:\"success\",onClick:event=>{navigator.clipboard.writeText(\"\".concat(baseURL,\"/chatbot/\").concat(chatflowid));setCopyAnchorEl(event.currentTarget);setTimeout(()=>{handleCloseCopyPopOver();},1500);},children:/*#__PURE__*/_jsx(IconCopy,{})}),/*#__PURE__*/_jsx(IconButton,{title:\"Open New Tab\",color:\"primary\",onClick:()=>window.open(\"\".concat(baseURL,\"/chatbot/\").concat(chatflowid),'_blank'),children:/*#__PURE__*/_jsx(IconArrowUpRightCircle,{})}),/*#__PURE__*/_jsx(\"div\",{style:{flex:1}}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',alignItems:'center'},children:[/*#__PURE__*/_jsx(Switch,{checked:isPublicChatflow,onChange:event=>{setChatflowIsPublic(event.target.checked);onSwitchChange(event.target.checked);}}),/*#__PURE__*/_jsx(Typography,{children:\"Make Public\"}),/*#__PURE__*/_jsx(TooltipWithParser,{style:{marginLeft:10},title:'Making public will allow anyone to access the chatbot without username & password'})]})]}),textField(title,'title','Title','string','Flowise Assistant'),textField(titleAvatarSrc,'titleAvatarSrc','Title Avatar Link','string',\"https://raw.githubusercontent.com/FlowiseAI/Flowise/main/assets/FloWiseAI_dark.png\"),textField(welcomeMessage,'welcomeMessage','Welcome Message','string','Hello! This is custom welcome message'),colorField(backgroundColor,'backgroundColor','Background Color'),textField(fontSize,'fontSize','Font Size','number'),colorField(poweredByTextColor,'poweredByTextColor','PoweredBy TextColor'),/*#__PURE__*/_jsx(Typography,{variant:\"h4\",sx:{mb:1,mt:2},children:\"Bot Message\"}),colorField(botMessageBackgroundColor,'botMessageBackgroundColor','Background Color'),colorField(botMessageTextColor,'botMessageTextColor','Text Color'),textField(botMessageAvatarSrc,'botMessageAvatarSrc','Avatar Link','string',\"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png\"),booleanField(botMessageShowAvatar,'botMessageShowAvatar','Show Avatar'),/*#__PURE__*/_jsx(Typography,{variant:\"h4\",sx:{mb:1,mt:2},children:\"User Message\"}),colorField(userMessageBackgroundColor,'userMessageBackgroundColor','Background Color'),colorField(userMessageTextColor,'userMessageTextColor','Text Color'),textField(userMessageAvatarSrc,'userMessageAvatarSrc','Avatar Link','string',\"https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png\"),booleanField(userMessageShowAvatar,'userMessageShowAvatar','Show Avatar'),/*#__PURE__*/_jsx(Typography,{variant:\"h4\",sx:{mb:1,mt:2},children:\"Text Input\"}),colorField(textInputBackgroundColor,'textInputBackgroundColor','Background Color'),colorField(textInputTextColor,'textInputTextColor','Text Color'),textField(textInputPlaceholder,'textInputPlaceholder','TextInput Placeholder','string',\"Type question..\"),colorField(textInputSendButtonColor,'textInputSendButtonColor','TextIntput Send Button Color'),isSessionMemory&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",sx:{mb:1,mt:2},children:\"Session Memory\"}),booleanField(generateNewSession,'generateNewSession','Start new session when chatbot link is opened or refreshed')]}),/*#__PURE__*/_jsx(StyledButton,{style:{marginBottom:10,marginTop:10},variant:\"contained\",onClick:()=>onSave(),children:\"Save Changes\"}),/*#__PURE__*/_jsx(Popover,{open:openColorPopOver,anchorEl:colorAnchorEl,onClose:handleClosePopOver,anchorOrigin:{vertical:'top',horizontal:'right'},transformOrigin:{vertical:'top',horizontal:'left'},children:/*#__PURE__*/_jsx(SketchPicker,{color:sketchPickerColor,onChange:color=>onColorSelected(color.hex)})}),/*#__PURE__*/_jsx(Popover,{open:openCopyPopOver,anchorEl:copyAnchorEl,onClose:handleCloseCopyPopOver,anchorOrigin:{vertical:'top',horizontal:'right'},transformOrigin:{vertical:'top',horizontal:'left'},children:/*#__PURE__*/_jsx(Typography,{variant:\"h6\",sx:{pl:1,pr:1,color:'white',background:theme.palette.success.dark},children:\"Copied!\"})})]});};export default ShareChatbot;","map":{"version":3,"names":["useState","useDispatch","useSelector","enqueueSnackbar","enqueueSnackbarAction","closeSnackbar","closeSnackbarAction","SET_CHATFLOW","SketchPicker","Box","Typography","Button","Switch","OutlinedInput","Popover","Stack","IconButton","useTheme","StyledButton","TooltipWithParser","IconX","IconCopy","IconArrowUpRightCircle","chatflowsApi","useNotifier","baseURL","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","defaultConfig","backgroundColor","fontSize","poweredByTextColor","botMessage","textColor","userMessage","textInput","sendButtonColor","ShareChatbot","_ref","_chatflow$isPublic","_chatbotConfig$genera","_chatbotConfig$title","_chatbotConfig$titleA","_chatbotConfig$welcom","_chatbotConfig$backgr","_chatbotConfig$fontSi","_chatbotConfig$powere","_chatbotConfig$botMes","_chatbotConfig$botMes2","_chatbotConfig$botMes3","_chatbotConfig$botMes4","_chatbotConfig$botMes5","_chatbotConfig$botMes6","_chatbotConfig$botMes7","_chatbotConfig$botMes8","_chatbotConfig$userMe","_chatbotConfig$userMe2","_chatbotConfig$userMe3","_chatbotConfig$userMe4","_chatbotConfig$userMe5","_chatbotConfig$userMe6","_chatbotConfig$userMe7","_chatbotConfig$userMe8","_chatbotConfig$textIn","_chatbotConfig$textIn2","_chatbotConfig$textIn3","_chatbotConfig$textIn4","_chatbotConfig$textIn5","_chatbotConfig$textIn6","_chatbotConfig$textIn7","_chatbotConfig$textIn8","isSessionMemory","dispatch","theme","chatflow","state","canvas","chatflowid","id","chatbotConfig","JSON","parse","arguments","isPublicChatflow","setChatflowIsPublic","isPublic","generateNewSession","setGenerateNewSession","title","setTitle","titleAvatarSrc","setTitleAvatarSrc","welcomeMessage","setWelcomeMessage","setBackgroundColor","setFontSize","setPoweredByTextColor","botMessageBackgroundColor","setBotMessageBackgroundColor","botMessageTextColor","setBotMessageTextColor","botMessageAvatarSrc","setBotMessageAvatarSrc","avatarSrc","botMessageShowAvatar","setBotMessageShowAvatar","showAvatar","userMessageBackgroundColor","setUserMessageBackgroundColor","userMessageTextColor","setUserMessageTextColor","userMessageAvatarSrc","setUserMessageAvatarSrc","userMessageShowAvatar","setUserMessageShowAvatar","textInputBackgroundColor","setTextInputBackgroundColor","textInputTextColor","setTextInputTextColor","textInputPlaceholder","setTextInputPlaceholder","placeholder","textInputSendButtonColor","setTextInputSendButtonColor","colorAnchorEl","setColorAnchorEl","selectedColorConfig","setSelectedColorConfig","sketchPickerColor","setSketchPickerColor","openColorPopOver","Boolean","copyAnchorEl","setCopyAnchorEl","openCopyPopOver","formatObj","obj","overrideConfig","starterPrompts","onSave","saveResp","updateChatflow","stringify","data","message","options","key","Date","getTime","Math","random","variant","action","style","color","onClick","children","type","error","console","errorData","response","concat","status","statusText","persist","onSwitchChange","checked","handleClosePopOver","handleCloseCopyPopOver","onColorSelected","hexColor","onTextChanged","value","fieldName","onBooleanChanged","colorField","fieldLabel","sx","pt","pb","display","flexDirection","alignItems","mb","cursor","width","height","border","marginRight","borderRadius","event","currentTarget","booleanField","onChange","target","textField","fieldType","length","undefined","fullWidth","name","e","direction","p","palette","primary","light","navigator","clipboard","writeText","setTimeout","window","open","flex","marginLeft","mt","marginBottom","marginTop","anchorEl","onClose","anchorOrigin","vertical","horizontal","transformOrigin","hex","pl","pr","background","success","dark"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/packages/ui/src/views/chatflows/ShareChatbot.js"],"sourcesContent":["import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction, SET_CHATFLOW } from 'store/actions'\nimport { SketchPicker } from 'react-color'\nimport PropTypes from 'prop-types'\n\nimport { Box, Typography, Button, Switch, OutlinedInput, Popover, Stack, IconButton } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\n// Project import\nimport { StyledButton } from 'ui-component/button/StyledButton'\nimport { TooltipWithParser } from 'ui-component/tooltip/TooltipWithParser'\n\n// Icons\nimport { IconX, IconCopy, IconArrowUpRightCircle } from '@tabler/icons'\n\n// API\nimport chatflowsApi from 'api/chatflows'\n\n// utils\nimport useNotifier from 'utils/useNotifier'\n\n// Const\nimport { baseURL } from 'store/constant'\n\nconst defaultConfig = {\n    backgroundColor: '#ffffff',\n    fontSize: 16,\n    poweredByTextColor: '#303235',\n    botMessage: {\n        backgroundColor: '#f7f8ff',\n        textColor: '#303235'\n    },\n    userMessage: {\n        backgroundColor: '#3B81F6',\n        textColor: '#ffffff'\n    },\n    textInput: {\n        backgroundColor: '#ffffff',\n        textColor: '#303235',\n        sendButtonColor: '#3B81F6'\n    }\n}\n\nconst ShareChatbot = ({ isSessionMemory }) => {\n    const dispatch = useDispatch()\n    const theme = useTheme()\n    const chatflow = useSelector((state) => state.canvas.chatflow)\n    const chatflowid = chatflow.id\n    const chatbotConfig = chatflow.chatbotConfig ? JSON.parse(chatflow.chatbotConfig) : {}\n\n    useNotifier()\n\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const [isPublicChatflow, setChatflowIsPublic] = useState(chatflow.isPublic ?? false)\n    const [generateNewSession, setGenerateNewSession] = useState(chatbotConfig?.generateNewSession ?? false)\n\n    const [title, setTitle] = useState(chatbotConfig?.title ?? '')\n    const [titleAvatarSrc, setTitleAvatarSrc] = useState(chatbotConfig?.titleAvatarSrc ?? '')\n\n    const [welcomeMessage, setWelcomeMessage] = useState(chatbotConfig?.welcomeMessage ?? '')\n    const [backgroundColor, setBackgroundColor] = useState(chatbotConfig?.backgroundColor ?? defaultConfig.backgroundColor)\n    const [fontSize, setFontSize] = useState(chatbotConfig?.fontSize ?? defaultConfig.fontSize)\n    const [poweredByTextColor, setPoweredByTextColor] = useState(chatbotConfig?.poweredByTextColor ?? defaultConfig.poweredByTextColor)\n\n    const [botMessageBackgroundColor, setBotMessageBackgroundColor] = useState(\n        chatbotConfig?.botMessage?.backgroundColor ?? defaultConfig.botMessage.backgroundColor\n    )\n    const [botMessageTextColor, setBotMessageTextColor] = useState(\n        chatbotConfig?.botMessage?.textColor ?? defaultConfig.botMessage.textColor\n    )\n    const [botMessageAvatarSrc, setBotMessageAvatarSrc] = useState(chatbotConfig?.botMessage?.avatarSrc ?? '')\n    const [botMessageShowAvatar, setBotMessageShowAvatar] = useState(chatbotConfig?.botMessage?.showAvatar ?? false)\n\n    const [userMessageBackgroundColor, setUserMessageBackgroundColor] = useState(\n        chatbotConfig?.userMessage?.backgroundColor ?? defaultConfig.userMessage.backgroundColor\n    )\n    const [userMessageTextColor, setUserMessageTextColor] = useState(\n        chatbotConfig?.userMessage?.textColor ?? defaultConfig.userMessage.textColor\n    )\n    const [userMessageAvatarSrc, setUserMessageAvatarSrc] = useState(chatbotConfig?.userMessage?.avatarSrc ?? '')\n    const [userMessageShowAvatar, setUserMessageShowAvatar] = useState(chatbotConfig?.userMessage?.showAvatar ?? false)\n\n    const [textInputBackgroundColor, setTextInputBackgroundColor] = useState(\n        chatbotConfig?.textInput?.backgroundColor ?? defaultConfig.textInput.backgroundColor\n    )\n    const [textInputTextColor, setTextInputTextColor] = useState(chatbotConfig?.textInput?.textColor ?? defaultConfig.textInput.textColor)\n    const [textInputPlaceholder, setTextInputPlaceholder] = useState(chatbotConfig?.textInput?.placeholder ?? '')\n    const [textInputSendButtonColor, setTextInputSendButtonColor] = useState(\n        chatbotConfig?.textInput?.sendButtonColor ?? defaultConfig.textInput.sendButtonColor\n    )\n\n    const [colorAnchorEl, setColorAnchorEl] = useState(null)\n    const [selectedColorConfig, setSelectedColorConfig] = useState('')\n    const [sketchPickerColor, setSketchPickerColor] = useState('')\n    const openColorPopOver = Boolean(colorAnchorEl)\n\n    const [copyAnchorEl, setCopyAnchorEl] = useState(null)\n    const openCopyPopOver = Boolean(copyAnchorEl)\n\n    const formatObj = () => {\n        const obj = {\n            botMessage: {\n                showAvatar: false\n            },\n            userMessage: {\n                showAvatar: false\n            },\n            textInput: {},\n            overrideConfig: {}\n        }\n        if (title) obj.title = title\n        if (titleAvatarSrc) obj.titleAvatarSrc = titleAvatarSrc\n        if (welcomeMessage) obj.welcomeMessage = welcomeMessage\n        if (backgroundColor) obj.backgroundColor = backgroundColor\n        if (fontSize) obj.fontSize = fontSize\n        if (poweredByTextColor) obj.poweredByTextColor = poweredByTextColor\n\n        if (botMessageBackgroundColor) obj.botMessage.backgroundColor = botMessageBackgroundColor\n        if (botMessageTextColor) obj.botMessage.textColor = botMessageTextColor\n        if (botMessageAvatarSrc) obj.botMessage.avatarSrc = botMessageAvatarSrc\n        if (botMessageShowAvatar) obj.botMessage.showAvatar = botMessageShowAvatar\n\n        if (userMessageBackgroundColor) obj.userMessage.backgroundColor = userMessageBackgroundColor\n        if (userMessageTextColor) obj.userMessage.textColor = userMessageTextColor\n        if (userMessageAvatarSrc) obj.userMessage.avatarSrc = userMessageAvatarSrc\n        if (userMessageShowAvatar) obj.userMessage.showAvatar = userMessageShowAvatar\n\n        if (textInputBackgroundColor) obj.textInput.backgroundColor = textInputBackgroundColor\n        if (textInputTextColor) obj.textInput.textColor = textInputTextColor\n        if (textInputPlaceholder) obj.textInput.placeholder = textInputPlaceholder\n        if (textInputSendButtonColor) obj.textInput.sendButtonColor = textInputSendButtonColor\n\n        if (isSessionMemory) obj.overrideConfig.generateNewSession = generateNewSession\n\n        if (chatbotConfig?.starterPrompts) obj.starterPrompts = chatbotConfig.starterPrompts\n\n        return obj\n    }\n\n    const onSave = async () => {\n        try {\n            const saveResp = await chatflowsApi.updateChatflow(chatflowid, {\n                chatbotConfig: JSON.stringify(formatObj())\n            })\n            if (saveResp.data) {\n                enqueueSnackbar({\n                    message: 'Chatbot Configuration Saved',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\n            }\n        } catch (error) {\n            console.error(error)\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to save Chatbot Configuration: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n    }\n\n    const onSwitchChange = async (checked) => {\n        try {\n            const saveResp = await chatflowsApi.updateChatflow(chatflowid, { isPublic: checked })\n            if (saveResp.data) {\n                enqueueSnackbar({\n                    message: 'Chatbot Configuration Saved',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                dispatch({ type: SET_CHATFLOW, chatflow: saveResp.data })\n            }\n        } catch (error) {\n            console.error(error)\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to save Chatbot Configuration: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n        }\n    }\n\n    const handleClosePopOver = () => {\n        setColorAnchorEl(null)\n    }\n\n    const handleCloseCopyPopOver = () => {\n        setCopyAnchorEl(null)\n    }\n\n    const onColorSelected = (hexColor) => {\n        switch (selectedColorConfig) {\n            case 'backgroundColor':\n                setBackgroundColor(hexColor)\n                break\n            case 'poweredByTextColor':\n                setPoweredByTextColor(hexColor)\n                break\n            case 'botMessageBackgroundColor':\n                setBotMessageBackgroundColor(hexColor)\n                break\n            case 'botMessageTextColor':\n                setBotMessageTextColor(hexColor)\n                break\n            case 'userMessageBackgroundColor':\n                setUserMessageBackgroundColor(hexColor)\n                break\n            case 'userMessageTextColor':\n                setUserMessageTextColor(hexColor)\n                break\n            case 'textInputBackgroundColor':\n                setTextInputBackgroundColor(hexColor)\n                break\n            case 'textInputTextColor':\n                setTextInputTextColor(hexColor)\n                break\n            case 'textInputSendButtonColor':\n                setTextInputSendButtonColor(hexColor)\n                break\n        }\n        setSketchPickerColor(hexColor)\n    }\n\n    const onTextChanged = (value, fieldName) => {\n        switch (fieldName) {\n            case 'title':\n                setTitle(value)\n                break\n            case 'titleAvatarSrc':\n                setTitleAvatarSrc(value)\n                break\n            case 'welcomeMessage':\n                setWelcomeMessage(value)\n                break\n            case 'fontSize':\n                setFontSize(value)\n                break\n            case 'botMessageAvatarSrc':\n                setBotMessageAvatarSrc(value)\n                break\n            case 'userMessageAvatarSrc':\n                setUserMessageAvatarSrc(value)\n                break\n            case 'textInputPlaceholder':\n                setTextInputPlaceholder(value)\n                break\n        }\n    }\n\n    const onBooleanChanged = (value, fieldName) => {\n        switch (fieldName) {\n            case 'botMessageShowAvatar':\n                setBotMessageShowAvatar(value)\n                break\n            case 'userMessageShowAvatar':\n                setUserMessageShowAvatar(value)\n                break\n            case 'generateNewSession':\n                setGenerateNewSession(value)\n                break\n        }\n    }\n\n    const colorField = (color, fieldName, fieldLabel) => {\n        return (\n            <Box sx={{ pt: 2, pb: 2 }}>\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\n                    <Box\n                        sx={{\n                            cursor: 'pointer',\n                            width: '30px',\n                            height: '30px',\n                            border: '1px solid #616161',\n                            marginRight: '10px',\n                            backgroundColor: color ?? '#ffffff',\n                            borderRadius: '5px'\n                        }}\n                        onClick={(event) => {\n                            setSelectedColorConfig(fieldName)\n                            setSketchPickerColor(color ?? '#ffffff')\n                            setColorAnchorEl(event.currentTarget)\n                        }}\n                    ></Box>\n                </div>\n            </Box>\n        )\n    }\n\n    const booleanField = (value, fieldName, fieldLabel) => {\n        return (\n            <Box sx={{ pt: 2, pb: 2 }}>\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\n                    <Switch\n                        id={fieldName}\n                        checked={value}\n                        onChange={(event) => {\n                            onBooleanChanged(event.target.checked, fieldName)\n                        }}\n                    />\n                </div>\n            </Box>\n        )\n    }\n\n    const textField = (message, fieldName, fieldLabel, fieldType = 'string', placeholder = '') => {\n        return (\n            <Box sx={{ pt: 2, pb: 2 }}>\n                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-start' }}>\n                    <Typography sx={{ mb: 1 }}>{fieldLabel}</Typography>\n                    <OutlinedInput\n                        id={fieldName}\n                        type={fieldType}\n                        fullWidth\n                        value={message}\n                        placeholder={placeholder}\n                        name={fieldName}\n                        onChange={(e) => {\n                            onTextChanged(e.target.value, fieldName)\n                        }}\n                    />\n                </div>\n            </Box>\n        )\n    }\n\n    return (\n        <>\n            <Stack direction='row'>\n                <Typography\n                    sx={{\n                        p: 1,\n                        borderRadius: 10,\n                        backgroundColor: theme.palette.primary.light,\n                        width: 'max-content',\n                        height: 'max-content'\n                    }}\n                    variant='h5'\n                >\n                    {`${baseURL}/chatbot/${chatflowid}`}\n                </Typography>\n                <IconButton\n                    title='Copy Link'\n                    color='success'\n                    onClick={(event) => {\n                        navigator.clipboard.writeText(`${baseURL}/chatbot/${chatflowid}`)\n                        setCopyAnchorEl(event.currentTarget)\n                        setTimeout(() => {\n                            handleCloseCopyPopOver()\n                        }, 1500)\n                    }}\n                >\n                    <IconCopy />\n                </IconButton>\n                <IconButton title='Open New Tab' color='primary' onClick={() => window.open(`${baseURL}/chatbot/${chatflowid}`, '_blank')}>\n                    <IconArrowUpRightCircle />\n                </IconButton>\n                <div style={{ flex: 1 }} />\n                <div style={{ display: 'flex', alignItems: 'center' }}>\n                    <Switch\n                        checked={isPublicChatflow}\n                        onChange={(event) => {\n                            setChatflowIsPublic(event.target.checked)\n                            onSwitchChange(event.target.checked)\n                        }}\n                    />\n                    <Typography>Make Public</Typography>\n                    <TooltipWithParser\n                        style={{ marginLeft: 10 }}\n                        title={'Making public will allow anyone to access the chatbot without username & password'}\n                    />\n                </div>\n            </Stack>\n            {textField(title, 'title', 'Title', 'string', 'Flowise Assistant')}\n            {textField(\n                titleAvatarSrc,\n                'titleAvatarSrc',\n                'Title Avatar Link',\n                'string',\n                `https://raw.githubusercontent.com/FlowiseAI/Flowise/main/assets/FloWiseAI_dark.png`\n            )}\n            {textField(welcomeMessage, 'welcomeMessage', 'Welcome Message', 'string', 'Hello! This is custom welcome message')}\n            {colorField(backgroundColor, 'backgroundColor', 'Background Color')}\n            {textField(fontSize, 'fontSize', 'Font Size', 'number')}\n            {colorField(poweredByTextColor, 'poweredByTextColor', 'PoweredBy TextColor')}\n\n            {/*BOT Message*/}\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                Bot Message\n            </Typography>\n            {colorField(botMessageBackgroundColor, 'botMessageBackgroundColor', 'Background Color')}\n            {colorField(botMessageTextColor, 'botMessageTextColor', 'Text Color')}\n            {textField(\n                botMessageAvatarSrc,\n                'botMessageAvatarSrc',\n                'Avatar Link',\n                'string',\n                `https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/parroticon.png`\n            )}\n            {booleanField(botMessageShowAvatar, 'botMessageShowAvatar', 'Show Avatar')}\n\n            {/*USER Message*/}\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                User Message\n            </Typography>\n            {colorField(userMessageBackgroundColor, 'userMessageBackgroundColor', 'Background Color')}\n            {colorField(userMessageTextColor, 'userMessageTextColor', 'Text Color')}\n            {textField(\n                userMessageAvatarSrc,\n                'userMessageAvatarSrc',\n                'Avatar Link',\n                'string',\n                `https://raw.githubusercontent.com/zahidkhawaja/langchain-chat-nextjs/main/public/usericon.png`\n            )}\n            {booleanField(userMessageShowAvatar, 'userMessageShowAvatar', 'Show Avatar')}\n\n            {/*TEXT Input*/}\n            <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                Text Input\n            </Typography>\n            {colorField(textInputBackgroundColor, 'textInputBackgroundColor', 'Background Color')}\n            {colorField(textInputTextColor, 'textInputTextColor', 'Text Color')}\n            {textField(textInputPlaceholder, 'textInputPlaceholder', 'TextInput Placeholder', 'string', `Type question..`)}\n            {colorField(textInputSendButtonColor, 'textInputSendButtonColor', 'TextIntput Send Button Color')}\n\n            {/*Session Memory Input*/}\n            {isSessionMemory && (\n                <>\n                    <Typography variant='h4' sx={{ mb: 1, mt: 2 }}>\n                        Session Memory\n                    </Typography>\n                    {booleanField(generateNewSession, 'generateNewSession', 'Start new session when chatbot link is opened or refreshed')}\n                </>\n            )}\n\n            <StyledButton style={{ marginBottom: 10, marginTop: 10 }} variant='contained' onClick={() => onSave()}>\n                Save Changes\n            </StyledButton>\n            <Popover\n                open={openColorPopOver}\n                anchorEl={colorAnchorEl}\n                onClose={handleClosePopOver}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right'\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'left'\n                }}\n            >\n                <SketchPicker color={sketchPickerColor} onChange={(color) => onColorSelected(color.hex)} />\n            </Popover>\n            <Popover\n                open={openCopyPopOver}\n                anchorEl={copyAnchorEl}\n                onClose={handleCloseCopyPopOver}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right'\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'left'\n                }}\n            >\n                <Typography variant='h6' sx={{ pl: 1, pr: 1, color: 'white', background: theme.palette.success.dark }}>\n                    Copied!\n                </Typography>\n            </Popover>\n        </>\n    )\n}\n\nShareChatbot.propTypes = {\n    isSessionMemory: PropTypes.bool\n}\n\nexport default ShareChatbot\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}