{"ast":null,"code":"'use strict';\n\nmodule.exports = sass;\nsass.displayName = 'sass';\nsass.aliases = [];\nfunction sass(Prism) {\n  ;\n  (function (Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n        lookbehind: true\n      }\n    });\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/m\n        }\n      }\n    });\n    delete Prism.languages.sass.atrule;\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n    var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n      pattern: /(\\s+)-(?=\\s)/,\n      lookbehind: true\n    }];\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n        inside: {\n          property: [/[^:\\s]+(?=\\s*:)/, {\n            pattern: /(:)[^:\\s]+/,\n            lookbehind: true\n          }],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    });\n    delete Prism.languages.sass.property;\n    delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n        lookbehind: true\n      }\n    });\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","sass","displayName","aliases","Prism","languages","extend","comment","pattern","lookbehind","insertBefore","inside","atrule","variable","operator","punctuation","property","important","selector"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/refractor/lang/sass.js"],"sourcesContent":["'use strict'\n\nmodule.exports = sass\nsass.displayName = 'sass'\nsass.aliases = []\nfunction sass(Prism) {\n  ;(function(Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/m\n        }\n      }\n    })\n    delete Prism.languages.sass.atrule\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    var operator = [\n      /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,\n      {\n        pattern: /(\\s+)-(?=\\s)/,\n        lookbehind: true\n      }\n    ]\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n        inside: {\n          property: [\n            /[^:\\s]+(?=\\s*:)/,\n            {\n              pattern: /(:)[^:\\s]+/,\n              lookbehind: true\n            }\n          ],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    })\n    delete Prism.languages.sass.property\n    delete Prism.languages.sass.important // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n        lookbehind: true\n      }\n    })\n  })(Prism)\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,IAAI;AACrBA,IAAI,CAACC,WAAW,GAAG,MAAM;AACzBD,IAAI,CAACE,OAAO,GAAG,EAAE;AACjB,SAASF,IAAIA,CAACG,KAAK,EAAE;EACnB;EAAC,CAAC,UAASA,KAAK,EAAE;IAChBA,KAAK,CAACC,SAAS,CAACJ,IAAI,GAAGG,KAAK,CAACC,SAAS,CAACC,MAAM,CAAC,KAAK,EAAE;MACnD;MACAC,OAAO,EAAE;QACPC,OAAO,EAAE,gDAAgD;QACzDC,UAAU,EAAE;MACd;IACF,CAAC,CAAC;IACFL,KAAK,CAACC,SAAS,CAACK,YAAY,CAAC,MAAM,EAAE,QAAQ,EAAE;MAC7C;MACA,aAAa,EAAE;QACb;QACAF,OAAO,EAAE,qBAAqB;QAC9BG,MAAM,EAAE;UACNC,MAAM,EAAE;QACV;MACF;IACF,CAAC,CAAC;IACF,OAAOR,KAAK,CAACC,SAAS,CAACJ,IAAI,CAACW,MAAM;IAClC,IAAIC,QAAQ,GAAG,wBAAwB;IACvC,IAAIC,QAAQ,GAAG,CACb,0CAA0C,EAC1C;MACEN,OAAO,EAAE,cAAc;MACvBC,UAAU,EAAE;IACd,CAAC,CACF;IACDL,KAAK,CAACC,SAAS,CAACK,YAAY,CAAC,MAAM,EAAE,UAAU,EAAE;MAC/C;MACA,eAAe,EAAE;QACfF,OAAO,EAAE,cAAc;QACvBG,MAAM,EAAE;UACNI,WAAW,EAAE,GAAG;UAChBF,QAAQ,EAAEA,QAAQ;UAClBC,QAAQ,EAAEA;QACZ;MACF,CAAC;MACD;MACA,eAAe,EAAE;QACfN,OAAO,EAAE,qCAAqC;QAC9CG,MAAM,EAAE;UACNK,QAAQ,EAAE,CACR,iBAAiB,EACjB;YACER,OAAO,EAAE,YAAY;YACrBC,UAAU,EAAE;UACd,CAAC,CACF;UACDM,WAAW,EAAE,GAAG;UAChBF,QAAQ,EAAEA,QAAQ;UAClBC,QAAQ,EAAEA,QAAQ;UAClBG,SAAS,EAAEb,KAAK,CAACC,SAAS,CAACJ,IAAI,CAACgB;QAClC;MACF;IACF,CAAC,CAAC;IACF,OAAOb,KAAK,CAACC,SAAS,CAACJ,IAAI,CAACe,QAAQ;IACpC,OAAOZ,KAAK,CAACC,SAAS,CAACJ,IAAI,CAACgB,SAAS,EAAC;IACtC;IACAb,KAAK,CAACC,SAAS,CAACK,YAAY,CAAC,MAAM,EAAE,aAAa,EAAE;MAClDQ,QAAQ,EAAE;QACRV,OAAO,EAAE,wEAAwE;QACjFC,UAAU,EAAE;MACd;IACF,CAAC,CAAC;EACJ,CAAC,EAAEL,KAAK,CAAC;AACX"},"metadata":{},"sourceType":"script","externalDependencies":[]}