{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonInferredMrowMixin = exports.CommonMrowMixin = void 0;\nvar BBox_js_1 = require(\"../../../util/BBox.js\");\nfunction CommonMrowMixin(Base) {\n  return function (_super) {\n    __extends(class_1, _super);\n    function class_1() {\n      var e_1, _a;\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var _this = _super.apply(this, __spreadArray([], __read(args), false)) || this;\n      _this.stretchChildren();\n      try {\n        for (var _b = __values(_this.childNodes), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var child = _c.value;\n          if (child.bbox.pwidth) {\n            _this.bbox.pwidth = BBox_js_1.BBox.fullWidth;\n            break;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      return _this;\n    }\n    Object.defineProperty(class_1.prototype, \"fixesPWidth\", {\n      get: function () {\n        return false;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    class_1.prototype.stretchChildren = function () {\n      var e_2, _a, e_3, _b, e_4, _c;\n      var stretchy = [];\n      try {\n        for (var _d = __values(this.childNodes), _e = _d.next(); !_e.done; _e = _d.next()) {\n          var child = _e.value;\n          if (child.canStretch(1)) {\n            stretchy.push(child);\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n      var count = stretchy.length;\n      var nodeCount = this.childNodes.length;\n      if (count && nodeCount > 1) {\n        var H = 0,\n          D = 0;\n        var all = count > 1 && count === nodeCount;\n        try {\n          for (var _f = __values(this.childNodes), _g = _f.next(); !_g.done; _g = _f.next()) {\n            var child = _g.value;\n            var noStretch = child.stretch.dir === 0;\n            if (all || noStretch) {\n              var _h = child.getOuterBBox(noStretch),\n                h = _h.h,\n                d = _h.d,\n                rscale = _h.rscale;\n              h *= rscale;\n              d *= rscale;\n              if (h > H) H = h;\n              if (d > D) D = d;\n            }\n          }\n        } catch (e_3_1) {\n          e_3 = {\n            error: e_3_1\n          };\n        } finally {\n          try {\n            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);\n          } finally {\n            if (e_3) throw e_3.error;\n          }\n        }\n        try {\n          for (var stretchy_1 = __values(stretchy), stretchy_1_1 = stretchy_1.next(); !stretchy_1_1.done; stretchy_1_1 = stretchy_1.next()) {\n            var child = stretchy_1_1.value;\n            child.coreMO().getStretchedVariant([H, D]);\n          }\n        } catch (e_4_1) {\n          e_4 = {\n            error: e_4_1\n          };\n        } finally {\n          try {\n            if (stretchy_1_1 && !stretchy_1_1.done && (_c = stretchy_1.return)) _c.call(stretchy_1);\n          } finally {\n            if (e_4) throw e_4.error;\n          }\n        }\n      }\n    };\n    return class_1;\n  }(Base);\n}\nexports.CommonMrowMixin = CommonMrowMixin;\nfunction CommonInferredMrowMixin(Base) {\n  return function (_super) {\n    __extends(class_2, _super);\n    function class_2() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n    class_2.prototype.getScale = function () {\n      this.bbox.scale = this.parent.bbox.scale;\n      this.bbox.rscale = 1;\n    };\n    return class_2;\n  }(Base);\n}\nexports.CommonInferredMrowMixin = CommonInferredMrowMixin;","map":{"version":3,"names":["BBox_js_1","require","CommonMrowMixin","Base","_super","__extends","class_1","args","_i","arguments","length","_this","apply","__spreadArray","__read","stretchChildren","_b","__values","childNodes","_c","next","done","child","value","bbox","pwidth","BBox","fullWidth","Object","defineProperty","prototype","get","stretchy","_d","_e","canStretch","push","count","nodeCount","H","D","all","_f","_g","noStretch","stretch","dir","_h","getOuterBBox","h","d","rscale","stretchy_1","stretchy_1_1","coreMO","getStretchedVariant","exports","CommonInferredMrowMixin","class_2","getScale","scale","parent"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/output/common/Wrappers/mrow.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CommonMrow wrapper minin for the MmlMrow object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AnyWrapper, WrapperConstructor, Constructor} from '../Wrapper.js';\nimport {CommonMo} from './mo.js';\nimport {BBox} from '../../../util/BBox.js';\nimport {DIRECTION} from '../FontData.js';\n\n/*****************************************************************/\n/**\n * The CommonMrow interface\n */\nexport interface CommonMrow extends AnyWrapper {\n  /**\n   * Handle vertical stretching of children to match height of\n   *  other nodes in the row.\n   */\n  stretchChildren(): void;\n}\n\n/**\n * Shorthand for the CommonMrow constructor\n */\nexport type MrowConstructor = Constructor<CommonMrow>;\n\n/*****************************************************************/\n/**\n * The CommonMrow wrapper mixin for the MmlMrow object\n *\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMrowMixin<T extends WrapperConstructor>(Base: T): MrowConstructor & T {\n\n  return class extends Base {\n\n    /**\n     * @override\n     */\n    get fixesPWidth() {\n      return false;\n    }\n\n    /**\n     * @override\n     * @constructor\n     */\n    constructor(...args: any[]) {\n      super(...args);\n      this.stretchChildren();\n      for (const child of this.childNodes) {\n        if (child.bbox.pwidth) {\n          this.bbox.pwidth = BBox.fullWidth;\n          break;\n        }\n      }\n    }\n\n    /**\n     * Handle vertical stretching of children to match height of\n     *  other nodes in the row.\n     */\n    public stretchChildren() {\n      let stretchy: AnyWrapper[] = [];\n      //\n      //  Locate and count the stretchy children\n      //\n      for (const child of this.childNodes) {\n        if (child.canStretch(DIRECTION.Vertical)) {\n          stretchy.push(child);\n        }\n      }\n      let count = stretchy.length;\n      let nodeCount = this.childNodes.length;\n      if (count && nodeCount > 1) {\n        let H = 0, D = 0;\n        //\n        //  If all the children are stretchy, find the largest one,\n        //  otherwise, find the height and depth of the non-stretchy\n        //  children.\n        //\n        let all = (count > 1 && count === nodeCount);\n        for (const child of this.childNodes) {\n          const noStretch = (child.stretch.dir === DIRECTION.None);\n          if (all || noStretch) {\n            let {h, d, rscale} = child.getOuterBBox(noStretch);\n            h *= rscale;\n            d *= rscale;\n            if (h > H) H = h;\n            if (d > D) D = d;\n          }\n        }\n        //\n        //  Stretch the stretchable children\n        //\n        for (const child of stretchy) {\n          (child.coreMO() as CommonMo).getStretchedVariant([H, D]);\n        }\n      }\n    }\n\n  };\n}\n\n/*****************************************************************/\n/*****************************************************************/\n/**\n * The CommonInferredMrow interface\n */\nexport interface CommonInferredMrow extends CommonMrow {\n}\n\n/**\n * Shorthand for the CommonInferredMrow constructor\n */\nexport type InferredMrowConstructor = Constructor<CommonInferredMrow>;\n\n/*****************************************************************/\n/**\n * The CommonInferredMrow wrapper mixin for the MmlInferredMrow object\n *\n * @template T  The Wrapper class constructor type\n */\nexport function CommonInferredMrowMixin<T extends MrowConstructor>(Base: T): InferredMrowConstructor & T {\n\n  return class extends Base {\n\n    /**\n     * Since inferred rows don't produce a container span, we can't\n     * set a font-size for it, so we inherit the parent scale\n     *\n     * @override\n     */\n    public getScale() {\n      this.bbox.scale = this.parent.bbox.scale;\n      this.bbox.rscale = 1;\n    }\n  };\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}