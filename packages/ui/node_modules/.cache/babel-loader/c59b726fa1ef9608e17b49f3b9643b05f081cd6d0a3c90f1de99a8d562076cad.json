{"ast":null,"code":"/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @typedef {[string, string]} MathNotation\n *   Markers to use for math.\n *   See: <http://docs.mathjax.org/en/latest/options/input/tex.html#the-configuration-block>\n *\n * @typedef OutputSvgOptions\n *   <http://docs.mathjax.org/en/latest/options/output/svg.html#the-configuration-block>\n * @property {number} [scale]\n * @property {number} [minScale]\n * @property {boolean} [mtextInheritFont]\n * @property {boolean} [merrorInheritFont]\n * @property {boolean} [mathmlSpacing]\n * @property {Record<string, boolean>} [skipAttributes]\n * @property {number} [exFactor]\n * @property {'left'|'center'|'right'} [displayAlign]\n * @property {string} [displayIndent]\n * @property {'local'|'global'} [fontCache]\n * @property {string|null} [localID]\n * @property {boolean} [internalSpeechTitles]\n * @property {number} [titleID]\n *\n * @typedef OutputCHtmlOptions\n *   <http://docs.mathjax.org/en/latest/options/output/chtml.html#the-configuration-block>\n * @property {number} [scale]\n * @property {number} [minScale]\n * @property {boolean} [matchFontHeight]\n * @property {boolean} [mtextInheritFont]\n * @property {boolean} [merrorInheritFont]\n * @property {boolean} [mathmlSpacing]\n * @property {Record<string, boolean>} [skipAttributes]\n * @property {number} [exFactor]\n * @property {'left'|'center'|'right'} [displayAlign]\n * @property {string} [displayIndent]\n * @property {string} fontURL\n * @property {boolean} [adaptiveCSS]\n *\n * @typedef InputTexOptions\n *   <http://docs.mathjax.org/en/latest/options/input/tex.html#the-configuration-block>\n * @property {string[]} [packages]\n * @property {MathNotation[]} [inlineMath]\n * @property {MathNotation[]} [displayMath]\n * @property {boolean} [processEscapes]\n * @property {boolean} [processEnvironments]\n * @property {boolean} [processRefs]\n * @property {RegExp} [digits]\n * @property {'none'|'ams'|'all'} [tags]\n * @property {'left'|'right'} [tagSide]\n * @property {string} [tagIndent]\n * @property {boolean} [useLabelIds]\n * @property {string} [multlineWidth]\n * @property {number} [maxMacros]\n * @property {number} [maxBuffer]\n * @property {string} [baseURL]\n * @property {(jax: any, error: any) => string} [formatError]\n *\n * @typedef Options\n *   Configuration.\n * @property {InputTexOptions} [tex]\n *   Configuration for the input TeX.\n * @property {OutputCHtmlOptions} [chtml]\n *   Configuration for the output (when CHTML).\n * @property {OutputSvgOptions} [svg]\n *   Configuration for the output (when SVG).\n *\n * @typedef Renderer\n * @property {(node: Element, options: {display: boolean}) => void} render\n * @property {() => Element} [styleSheet]\n *\n * @callback CreateRenderer\n * @param {Options} options\n * @returns {Renderer}\n */\n\nimport { visit, SKIP } from 'unist-util-visit';\n\n/**\n * @param {CreateRenderer} createRenderer\n */\nexport function createPlugin(createRenderer) {\n  /** @type {import('unified').Plugin<[Options?]|void[], Root>} */\n  return function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return tree => {\n      const renderer = createRenderer(options);\n      let found = false;\n      /** @type {Root|Element} */\n      let context = tree;\n      visit(tree, 'element', node => {\n        const classes = node.properties && Array.isArray(node.properties.className) ? node.properties.className : [];\n        const inline = classes.includes('math-inline');\n        const display = classes.includes('math-display');\n        if (node.tagName === 'head') {\n          context = node;\n        }\n        if (!inline && !display) {\n          return;\n        }\n        found = true;\n        renderer.render(node, {\n          display\n        });\n        return SKIP;\n      });\n      if (found && renderer.styleSheet) {\n        context.children.push(renderer.styleSheet());\n      }\n    };\n  };\n}","map":{"version":3,"names":["visit","SKIP","createPlugin","createRenderer","options","arguments","length","undefined","tree","renderer","found","context","node","classes","properties","Array","isArray","className","inline","includes","display","tagName","render","styleSheet","children","push"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/rehype-mathjax/lib/create-plugin.js"],"sourcesContent":["/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @typedef {[string, string]} MathNotation\n *   Markers to use for math.\n *   See: <http://docs.mathjax.org/en/latest/options/input/tex.html#the-configuration-block>\n *\n * @typedef OutputSvgOptions\n *   <http://docs.mathjax.org/en/latest/options/output/svg.html#the-configuration-block>\n * @property {number} [scale]\n * @property {number} [minScale]\n * @property {boolean} [mtextInheritFont]\n * @property {boolean} [merrorInheritFont]\n * @property {boolean} [mathmlSpacing]\n * @property {Record<string, boolean>} [skipAttributes]\n * @property {number} [exFactor]\n * @property {'left'|'center'|'right'} [displayAlign]\n * @property {string} [displayIndent]\n * @property {'local'|'global'} [fontCache]\n * @property {string|null} [localID]\n * @property {boolean} [internalSpeechTitles]\n * @property {number} [titleID]\n *\n * @typedef OutputCHtmlOptions\n *   <http://docs.mathjax.org/en/latest/options/output/chtml.html#the-configuration-block>\n * @property {number} [scale]\n * @property {number} [minScale]\n * @property {boolean} [matchFontHeight]\n * @property {boolean} [mtextInheritFont]\n * @property {boolean} [merrorInheritFont]\n * @property {boolean} [mathmlSpacing]\n * @property {Record<string, boolean>} [skipAttributes]\n * @property {number} [exFactor]\n * @property {'left'|'center'|'right'} [displayAlign]\n * @property {string} [displayIndent]\n * @property {string} fontURL\n * @property {boolean} [adaptiveCSS]\n *\n * @typedef InputTexOptions\n *   <http://docs.mathjax.org/en/latest/options/input/tex.html#the-configuration-block>\n * @property {string[]} [packages]\n * @property {MathNotation[]} [inlineMath]\n * @property {MathNotation[]} [displayMath]\n * @property {boolean} [processEscapes]\n * @property {boolean} [processEnvironments]\n * @property {boolean} [processRefs]\n * @property {RegExp} [digits]\n * @property {'none'|'ams'|'all'} [tags]\n * @property {'left'|'right'} [tagSide]\n * @property {string} [tagIndent]\n * @property {boolean} [useLabelIds]\n * @property {string} [multlineWidth]\n * @property {number} [maxMacros]\n * @property {number} [maxBuffer]\n * @property {string} [baseURL]\n * @property {(jax: any, error: any) => string} [formatError]\n *\n * @typedef Options\n *   Configuration.\n * @property {InputTexOptions} [tex]\n *   Configuration for the input TeX.\n * @property {OutputCHtmlOptions} [chtml]\n *   Configuration for the output (when CHTML).\n * @property {OutputSvgOptions} [svg]\n *   Configuration for the output (when SVG).\n *\n * @typedef Renderer\n * @property {(node: Element, options: {display: boolean}) => void} render\n * @property {() => Element} [styleSheet]\n *\n * @callback CreateRenderer\n * @param {Options} options\n * @returns {Renderer}\n */\n\nimport {visit, SKIP} from 'unist-util-visit'\n\n/**\n * @param {CreateRenderer} createRenderer\n */\nexport function createPlugin(createRenderer) {\n  /** @type {import('unified').Plugin<[Options?]|void[], Root>} */\n  return (options = {}) =>\n    (tree) => {\n      const renderer = createRenderer(options)\n      let found = false\n      /** @type {Root|Element} */\n      let context = tree\n\n      visit(tree, 'element', (node) => {\n        const classes =\n          node.properties && Array.isArray(node.properties.className)\n            ? node.properties.className\n            : []\n        const inline = classes.includes('math-inline')\n        const display = classes.includes('math-display')\n\n        if (node.tagName === 'head') {\n          context = node\n        }\n\n        if (!inline && !display) {\n          return\n        }\n\n        found = true\n        renderer.render(node, {display})\n\n        return SKIP\n      })\n\n      if (found && renderer.styleSheet) {\n        context.children.push(renderer.styleSheet())\n      }\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,KAAK,EAAEC,IAAI,QAAO,kBAAkB;;AAE5C;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,cAAc,EAAE;EAC3C;EACA,OAAO;IAAA,IAACC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAA,OACjBG,IAAI,IAAK;MACR,MAAMC,QAAQ,GAAGN,cAAc,CAACC,OAAO,CAAC;MACxC,IAAIM,KAAK,GAAG,KAAK;MACjB;MACA,IAAIC,OAAO,GAAGH,IAAI;MAElBR,KAAK,CAACQ,IAAI,EAAE,SAAS,EAAGI,IAAI,IAAK;QAC/B,MAAMC,OAAO,GACXD,IAAI,CAACE,UAAU,IAAIC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAACE,UAAU,CAACG,SAAS,CAAC,GACvDL,IAAI,CAACE,UAAU,CAACG,SAAS,GACzB,EAAE;QACR,MAAMC,MAAM,GAAGL,OAAO,CAACM,QAAQ,CAAC,aAAa,CAAC;QAC9C,MAAMC,OAAO,GAAGP,OAAO,CAACM,QAAQ,CAAC,cAAc,CAAC;QAEhD,IAAIP,IAAI,CAACS,OAAO,KAAK,MAAM,EAAE;UAC3BV,OAAO,GAAGC,IAAI;QAChB;QAEA,IAAI,CAACM,MAAM,IAAI,CAACE,OAAO,EAAE;UACvB;QACF;QAEAV,KAAK,GAAG,IAAI;QACZD,QAAQ,CAACa,MAAM,CAACV,IAAI,EAAE;UAACQ;QAAO,CAAC,CAAC;QAEhC,OAAOnB,IAAI;MACb,CAAC,CAAC;MAEF,IAAIS,KAAK,IAAID,QAAQ,CAACc,UAAU,EAAE;QAChCZ,OAAO,CAACa,QAAQ,CAACC,IAAI,CAAChB,QAAQ,CAACc,UAAU,CAAC,CAAC,CAAC;MAC9C;IACF,CAAC;EAAA;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}