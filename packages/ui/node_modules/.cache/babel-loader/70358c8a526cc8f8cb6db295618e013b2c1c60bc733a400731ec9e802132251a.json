{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AmsConfiguration = exports.AmsTags = void 0;\nvar Configuration_js_1 = require(\"../Configuration.js\");\nvar AmsItems_js_1 = require(\"./AmsItems.js\");\nvar Tags_js_1 = require(\"../Tags.js\");\nvar AmsMethods_js_1 = require(\"./AmsMethods.js\");\nrequire(\"./AmsMappings.js\");\nvar SymbolMap_js_1 = require(\"../SymbolMap.js\");\nvar AmsTags = function (_super) {\n  __extends(AmsTags, _super);\n  function AmsTags() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  return AmsTags;\n}(Tags_js_1.AbstractTags);\nexports.AmsTags = AmsTags;\nvar init = function (config) {\n  new SymbolMap_js_1.CommandMap(AmsMethods_js_1.NEW_OPS, {}, {});\n  config.append(Configuration_js_1.Configuration.local({\n    handler: {\n      macro: [AmsMethods_js_1.NEW_OPS]\n    },\n    priority: -1\n  }));\n};\nexports.AmsConfiguration = Configuration_js_1.Configuration.create('ams', {\n  handler: {\n    character: ['AMSmath-operatorLetter'],\n    delimiter: ['AMSsymbols-delimiter', 'AMSmath-delimiter'],\n    macro: ['AMSsymbols-mathchar0mi', 'AMSsymbols-mathchar0mo', 'AMSsymbols-delimiter', 'AMSsymbols-macros', 'AMSmath-mathchar0mo', 'AMSmath-macros', 'AMSmath-delimiter'],\n    environment: ['AMSmath-environment']\n  },\n  items: (_a = {}, _a[AmsItems_js_1.MultlineItem.prototype.kind] = AmsItems_js_1.MultlineItem, _a[AmsItems_js_1.FlalignItem.prototype.kind] = AmsItems_js_1.FlalignItem, _a),\n  tags: {\n    'ams': AmsTags\n  },\n  init: init,\n  config: function (_config, jax) {\n    if (jax.parseOptions.options.multlineWidth) {\n      jax.parseOptions.options.ams.multlineWidth = jax.parseOptions.options.multlineWidth;\n    }\n    delete jax.parseOptions.options.multlineWidth;\n  },\n  options: {\n    multlineWidth: '',\n    ams: {\n      multlineWidth: '100%',\n      multlineIndent: '1em'\n    }\n  }\n});","map":{"version":3,"names":["Configuration_js_1","require","AmsItems_js_1","Tags_js_1","AmsMethods_js_1","SymbolMap_js_1","AmsTags","_super","__extends","AbstractTags","exports","init","config","CommandMap","NEW_OPS","append","Configuration","local","handler","macro","priority","AmsConfiguration","create","character","delimiter","environment","items","_a","MultlineItem","prototype","kind","FlalignItem","tags","_config","jax","parseOptions","options","multlineWidth","ams","multlineIndent"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/input/tex/ams/AmsConfiguration.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2018-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Configuration file for the AMS package.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Configuration, ParserConfiguration} from '../Configuration.js';\nimport {MultlineItem, FlalignItem} from './AmsItems.js';\nimport {AbstractTags} from '../Tags.js';\nimport {NEW_OPS} from './AmsMethods.js';\nimport './AmsMappings.js';\nimport {CommandMap} from '../SymbolMap.js';\n\n\n/**\n * Standard AMS style tagging.\n * @constructor\n * @extends {AbstractTags}\n */\nexport class AmsTags extends AbstractTags { }\n\n\n/**\n * Init method for AMS package.\n * @param {ParserConfiguration} config The current configuration.\n */\nlet init = function(config: ParserConfiguration) {\n  new CommandMap(NEW_OPS, {}, {});\n  config.append(Configuration.local({handler: {macro: [NEW_OPS]},\n                                    priority: -1}));\n};\n\nexport const AmsConfiguration = Configuration.create(\n  'ams', {\n    handler: {\n      character: ['AMSmath-operatorLetter'],\n      delimiter: ['AMSsymbols-delimiter', 'AMSmath-delimiter'],\n      macro: ['AMSsymbols-mathchar0mi', 'AMSsymbols-mathchar0mo',\n              'AMSsymbols-delimiter', 'AMSsymbols-macros',\n              'AMSmath-mathchar0mo', 'AMSmath-macros', 'AMSmath-delimiter'],\n      environment: ['AMSmath-environment']\n    },\n    items: {\n      [MultlineItem.prototype.kind]: MultlineItem,\n      [FlalignItem.prototype.kind]: FlalignItem,\n    },\n    tags: {'ams': AmsTags},\n    init: init,\n    config: (_config: ParserConfiguration, jax: any)  => {\n      //\n      //  Move multlineWidth from old location to ams block (remove in next version)\n      //\n      if (jax.parseOptions.options.multlineWidth) {\n        jax.parseOptions.options.ams.multlineWidth = jax.parseOptions.options.multlineWidth;\n      }\n      delete jax.parseOptions.options.multlineWidth;\n    },\n    options: {\n      multlineWidth: '',\n      ams: {\n        multlineWidth: '100%',  // The width to use for multline environments.\n        multlineIndent: '1em',  // The margin to use on both sides of multline environments.\n      }\n    }\n  }\n);\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAAA,kBAAA,GAAAC,OAAA;AACA,IAAAC,aAAA,GAAAD,OAAA;AACA,IAAAE,SAAA,GAAAF,OAAA;AACA,IAAAG,eAAA,GAAAH,OAAA;AACAA,OAAA;AACA,IAAAI,cAAA,GAAAJ,OAAA;AAQA,IAAAK,OAAA,aAAAC,MAAA;EAA6BC,SAAA,CAAAF,OAAA,EAAAC,MAAA;EAA7B,SAAAD,QAAA;;EAA4C;EAAA,OAAAA,OAAC;AAAD,CAAC,CAAhBH,SAAA,CAAAM,YAAY;AAA5BC,OAAA,CAAAJ,OAAA,GAAAA,OAAA;AAOb,IAAIK,IAAI,GAAG,SAAAA,CAASC,MAA2B;EAC7C,IAAIP,cAAA,CAAAQ,UAAU,CAACT,eAAA,CAAAU,OAAO,EAAE,EAAE,EAAE,EAAE,CAAC;EAC/BF,MAAM,CAACG,MAAM,CAACf,kBAAA,CAAAgB,aAAa,CAACC,KAAK,CAAC;IAACC,OAAO,EAAE;MAACC,KAAK,EAAE,CAACf,eAAA,CAAAU,OAAO;IAAC,CAAC;IAC5BM,QAAQ,EAAE,CAAC;EAAC,CAAC,CAAC,CAAC;AACnD,CAAC;AAEYV,OAAA,CAAAW,gBAAgB,GAAGrB,kBAAA,CAAAgB,aAAa,CAACM,MAAM,CAClD,KAAK,EAAE;EACLJ,OAAO,EAAE;IACPK,SAAS,EAAE,CAAC,wBAAwB,CAAC;IACrCC,SAAS,EAAE,CAAC,sBAAsB,EAAE,mBAAmB,CAAC;IACxDL,KAAK,EAAE,CAAC,wBAAwB,EAAE,wBAAwB,EAClD,sBAAsB,EAAE,mBAAmB,EAC3C,qBAAqB,EAAE,gBAAgB,EAAE,mBAAmB,CAAC;IACrEM,WAAW,EAAE,CAAC,qBAAqB;GACpC;EACDC,KAAK,GAAAC,EAAA,OACHA,EAAA,CAACzB,aAAA,CAAA0B,YAAY,CAACC,SAAS,CAACC,IAAI,IAAG5B,aAAA,CAAA0B,YAAY,EAC3CD,EAAA,CAACzB,aAAA,CAAA6B,WAAW,CAACF,SAAS,CAACC,IAAI,IAAG5B,aAAA,CAAA6B,WAAW,E,GAC1C;EACDC,IAAI,EAAE;IAAC,KAAK,EAAE1B;EAAO,CAAC;EACtBK,IAAI,EAAEA,IAAI;EACVC,MAAM,EAAE,SAAAA,CAACqB,OAA4B,EAAEC,GAAQ;IAI7C,IAAIA,GAAG,CAACC,YAAY,CAACC,OAAO,CAACC,aAAa,EAAE;MAC1CH,GAAG,CAACC,YAAY,CAACC,OAAO,CAACE,GAAG,CAACD,aAAa,GAAGH,GAAG,CAACC,YAAY,CAACC,OAAO,CAACC,aAAa;;IAErF,OAAOH,GAAG,CAACC,YAAY,CAACC,OAAO,CAACC,aAAa;EAC/C,CAAC;EACDD,OAAO,EAAE;IACPC,aAAa,EAAE,EAAE;IACjBC,GAAG,EAAE;MACHD,aAAa,EAAE,MAAM;MACrBE,cAAc,EAAE;;;CAGrB,CACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}