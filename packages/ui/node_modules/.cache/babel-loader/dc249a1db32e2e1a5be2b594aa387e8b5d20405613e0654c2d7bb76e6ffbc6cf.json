{"ast":null,"code":"'use strict';\n\nmodule.exports = ruby;\nruby.displayName = 'ruby';\nruby.aliases = ['rb'];\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;\n  (function (Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [/#.*/, {\n        pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n        greedy: true\n      }],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    });\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    };\n    delete Prism.languages.ruby.function;\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [{\n        pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        // Here we need to specifically allow interpolation\n        pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }, {\n        pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n        lookbehind: true,\n        greedy: true\n      }],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    });\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    });\n    Prism.languages.ruby.string = [{\n      pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      // Here we need to specifically allow interpolation\n      pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }, {\n      pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        interpolation: interpolation\n      }\n    }];\n    Prism.languages.rb = Prism.languages.ruby;\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","ruby","displayName","aliases","Prism","languages","extend","comment","pattern","greedy","keyword","interpolation","inside","delimiter","alias","rest","function","insertBefore","regex","lookbehind","variable","symbol","builtin","constant","string","rb"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/refractor/lang/ruby.js"],"sourcesContent":["'use strict'\n\nmodule.exports = ruby\nruby.displayName = 'ruby'\nruby.aliases = ['rb']\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;(function(Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [\n        /#.*/,\n        {\n          pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n          greedy: true\n        }\n      ],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    })\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    }\n    delete Prism.languages.ruby.function\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [\n        {\n          pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          // Here we need to specifically allow interpolation\n          pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    })\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    })\n    Prism.languages.ruby.string = [\n      {\n        pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        // Here we need to specifically allow interpolation\n        pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }\n    ]\n    Prism.languages.rb = Prism.languages.ruby\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}