{"ast":null,"code":"'use strict';\n\nmodule.exports = haml;\nhaml.displayName = 'haml';\nhaml.aliases = [];\nfunction haml(Prism) {\n  /* TODO\n  Handle multiline code after tag\n  %foo= some |\n  multiline |\n  code |\n  */\n  ;\n  (function (Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [{\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      }, {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      }],\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.markup\n        }\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [{\n            // Lookbehind tries to prevent interpolations from breaking it all\n            // Allows for one nested group of braces\n            pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,\n            lookbehind: true,\n            inside: {\n              rest: Prism.languages.ruby\n            }\n          }, {\n            pattern: /\\([^)]+\\)/,\n            inside: {\n              'attr-value': {\n                pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                lookbehind: true\n              },\n              'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n              punctuation: /[=(),]/\n            }\n          }, {\n            pattern: /\\[[^\\]]+\\]/,\n            inside: {\n              rest: Prism.languages.ruby\n            }\n          }],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.ruby\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    };\n    var filter_pattern = '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+'; // Non exhaustive list of available filters and associated languages\n    var filters = ['css', {\n      filter: 'coffee',\n      language: 'coffeescript'\n    }, 'erb', 'javascript', 'less', 'markdown', 'ruby', 'scss', 'textile'];\n    var all_filters = {};\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i];\n      filter = typeof filter === 'string' ? {\n        filter: filter,\n        language: filter\n      } : filter;\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(filter_pattern.replace('{{filter_name}}', filter.filter)),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        };\n      }\n    }\n    Prism.languages.insertBefore('haml', 'filter', all_filters);\n  })(Prism);\n}","map":{"version":3,"names":["module","exports","haml","displayName","aliases","Prism","languages","pattern","lookbehind","alias","inside","rest","ruby","filter","markup","doctype","tag","attributes","punctuation","code","interpolation","delimiter","filter_pattern","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/react-code-blocks/node_modules/refractor/lang/haml.js"],"sourcesContent":["'use strict'\n\nmodule.exports = haml\nhaml.displayName = 'haml'\nhaml.aliases = []\nfunction haml(Prism) {\n  /* TODO\nHandle multiline code after tag\n%foo= some |\nmultiline |\ncode |\n*/\n  ;(function(Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [\n        {\n          pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.+)/,\n          lookbehind: true,\n          inside: {\n            rest: Prism.languages.ruby\n          }\n        },\n        {\n          pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ]+.*\\|[\\t ]*)*/,\n          lookbehind: true,\n          inside: {\n            rest: Prism.languages.ruby\n          }\n        }\n      ],\n      // See at the end of the file for known filters\n      filter: {\n        pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ]+.+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.markup\n        }\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              // Lookbehind tries to prevent interpolations from breaking it all\n              // Allows for one nested group of braces\n              pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^}])+\\}/,\n              lookbehind: true,\n              inside: {\n                rest: Prism.languages.ruby\n              }\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                  lookbehind: true\n                },\n                'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[=(),]/\n              }\n            },\n            {\n              pattern: /\\[[^\\]]+\\]/,\n              inside: {\n                rest: Prism.languages.ruby\n              }\n            }\n          ],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: {\n          rest: Prism.languages.ruby\n        }\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          rest: Prism.languages.ruby\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    }\n    var filter_pattern =\n      '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ]+.+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+' // Non exhaustive list of available filters and associated languages\n    var filters = [\n      'css',\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'erb',\n      'javascript',\n      'less',\n      'markdown',\n      'ruby',\n      'scss',\n      'textile'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('{{filter_name}}', filter.filter)\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'variable'\n            },\n            rest: Prism.languages[filter.language]\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('haml', 'filter', all_filters)\n  })(Prism)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}