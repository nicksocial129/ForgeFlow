{"ast":null,"code":"import{createPortal}from'react-dom';import{useDispatch,useSelector}from'react-redux';import{useState,useEffect,forwardRef}from'react';import moment from'moment';import rehypeMathjax from'rehype-mathjax';import rehypeRaw from'rehype-raw';import remarkGfm from'remark-gfm';import remarkMath from'remark-math';import axios from'axios';// material-ui\nimport{Button,Tooltip,ListItemButton,Box,Stack,Dialog,DialogContent,DialogTitle,ListItem,ListItemText,Chip}from'@mui/material';import{useTheme}from'@mui/material/styles';import DatePicker from'react-datepicker';import robotPNG from'assets/images/robot.png';import userPNG from'assets/images/account.png';import msgEmptySVG from'assets/images/message_empty.svg';import{IconFileExport,IconEraser,IconX,IconDownload}from'@tabler/icons';// Project import\nimport{MemoizedReactMarkdown}from'ui-component/markdown/MemoizedReactMarkdown';import{CodeBlock}from'ui-component/markdown/CodeBlock';import SourceDocDialog from'ui-component/dialog/SourceDocDialog';import{MultiDropdown}from'ui-component/dropdown/MultiDropdown';import{StyledButton}from'ui-component/button/StyledButton';// store\nimport{HIDE_CANVAS_DIALOG,SHOW_CANVAS_DIALOG}from'store/actions';// API\nimport chatmessageApi from'api/chatmessage';import useApi from'hooks/useApi';import useConfirm from'hooks/useConfirm';// Utils\nimport{isValidURL,removeDuplicateURL}from'utils/genericHelper';import useNotifier from'utils/useNotifier';import{baseURL}from'store/constant';import{enqueueSnackbar as enqueueSnackbarAction,closeSnackbar as closeSnackbarAction}from'store/actions';import'views/chatmessage/ChatMessage.css';import'react-datepicker/dist/react-datepicker.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const DatePickerCustomInput=/*#__PURE__*/forwardRef(function DatePickerCustomInput(_ref,ref){let{value,onClick}=_ref;return/*#__PURE__*/_jsx(ListItemButton,{style:{borderRadius:15,border:'1px solid #e0e0e0'},onClick:onClick,ref:ref,children:value});});const ViewMessagesDialog=_ref2=>{let{show,dialogProps,onCancel}=_ref2;const portalElement=document.getElementById('portal');const dispatch=useDispatch();const theme=useTheme();const customization=useSelector(state=>state.customization);const{confirm}=useConfirm();useNotifier();const enqueueSnackbar=function(){return dispatch(enqueueSnackbarAction(...arguments));};const closeSnackbar=function(){return dispatch(closeSnackbarAction(...arguments));};const[chatlogs,setChatLogs]=useState([]);const[allChatlogs,setAllChatLogs]=useState([]);const[chatMessages,setChatMessages]=useState([]);const[selectedMessageIndex,setSelectedMessageIndex]=useState(0);const[sourceDialogOpen,setSourceDialogOpen]=useState(false);const[sourceDialogProps,setSourceDialogProps]=useState({});const[chatTypeFilter,setChatTypeFilter]=useState([]);const[startDate,setStartDate]=useState(new Date().setMonth(new Date().getMonth()-1));const[endDate,setEndDate]=useState(new Date());const getChatmessageApi=useApi(chatmessageApi.getAllChatmessageFromChatflow);const getChatmessageFromPKApi=useApi(chatmessageApi.getChatmessageFromPK);const onStartDateSelected=date=>{setStartDate(date);getChatmessageApi.request(dialogProps.chatflow.id,{startDate:date,endDate:endDate,chatType:chatTypeFilter.length?chatTypeFilter:undefined});};const onEndDateSelected=date=>{setEndDate(date);getChatmessageApi.request(dialogProps.chatflow.id,{endDate:date,startDate:startDate,chatType:chatTypeFilter.length?chatTypeFilter:undefined});};const onChatTypeSelected=chatTypes=>{setChatTypeFilter(chatTypes);getChatmessageApi.request(dialogProps.chatflow.id,{chatType:chatTypes.length?chatTypes:undefined,startDate:startDate,endDate:endDate});};const exportMessages=()=>{const obj={};for(let i=0;i<allChatlogs.length;i+=1){const chatmsg=allChatlogs[i];const chatPK=getChatPK(chatmsg);const msg={content:chatmsg.content,role:chatmsg.role==='apiMessage'?'bot':'user',time:chatmsg.createdDate};if(chatmsg.sourceDocuments)msg.sourceDocuments=JSON.parse(chatmsg.sourceDocuments);if(chatmsg.usedTools)msg.usedTools=JSON.parse(chatmsg.usedTools);if(chatmsg.fileAnnotations)msg.fileAnnotations=JSON.parse(chatmsg.fileAnnotations);if(!Object.prototype.hasOwnProperty.call(obj,chatPK)){var _chatmsg$sessionId,_chatmsg$memoryType;obj[chatPK]={id:chatmsg.chatId,source:chatmsg.chatType==='INTERNAL'?'UI':'API/Embed',sessionId:(_chatmsg$sessionId=chatmsg.sessionId)!==null&&_chatmsg$sessionId!==void 0?_chatmsg$sessionId:null,memoryType:(_chatmsg$memoryType=chatmsg.memoryType)!==null&&_chatmsg$memoryType!==void 0?_chatmsg$memoryType:null,messages:[msg]};}else if(Object.prototype.hasOwnProperty.call(obj,chatPK)){obj[chatPK].messages=[...obj[chatPK].messages,msg];}}const exportMessages=[];for(const key in obj){exportMessages.push({...obj[key]});}for(let i=0;i<exportMessages.length;i+=1){exportMessages[i].messages=exportMessages[i].messages.reverse();}const dataStr=JSON.stringify(exportMessages,null,2);const dataUri='data:application/json;charset=utf-8,'+encodeURIComponent(dataStr);const exportFileDefaultName=\"\".concat(dialogProps.chatflow.id,\"-Message.json\");let linkElement=document.createElement('a');linkElement.setAttribute('href',dataUri);linkElement.setAttribute('download',exportFileDefaultName);linkElement.click();};const clearChat=async chatmsg=>{const description=chatmsg.sessionId&&chatmsg.memoryType?\"Are you sure you want to clear session id: \".concat(chatmsg.sessionId,\" from \").concat(chatmsg.memoryType,\"?\"):\"Are you sure you want to clear messages?\";const confirmPayload={title:\"Clear Session\",description,confirmButtonName:'Clear',cancelButtonName:'Cancel'};const isConfirmed=await confirm(confirmPayload);const chatflowid=dialogProps.chatflow.id;if(isConfirmed){try{const obj={chatflowid,isClearFromViewMessageDialog:true};if(chatmsg.chatId)obj.chatId=chatmsg.chatId;if(chatmsg.chatType)obj.chatType=chatmsg.chatType;if(chatmsg.memoryType)obj.memoryType=chatmsg.memoryType;if(chatmsg.sessionId)obj.sessionId=chatmsg.sessionId;await chatmessageApi.deleteChatmessage(chatflowid,obj);const description=chatmsg.sessionId&&chatmsg.memoryType?\"Succesfully cleared session id: \".concat(chatmsg.sessionId,\" from \").concat(chatmsg.memoryType):\"Succesfully cleared messages\";enqueueSnackbar({message:description,options:{key:new Date().getTime()+Math.random(),variant:'success',action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});getChatmessageApi.request(chatflowid);}catch(error){const errorData=error.response.data||\"\".concat(error.response.status,\": \").concat(error.response.statusText);enqueueSnackbar({message:errorData,options:{key:new Date().getTime()+Math.random(),variant:'error',persist:true,action:key=>/*#__PURE__*/_jsx(Button,{style:{color:'white'},onClick:()=>closeSnackbar(key),children:/*#__PURE__*/_jsx(IconX,{})})}});}}};const getChatMessages=chatmessages=>{let prevDate='';const loadedMessages=[];for(let i=0;i<chatmessages.length;i+=1){const chatmsg=chatmessages[i];if(!prevDate){prevDate=chatmsg.createdDate.split('T')[0];loadedMessages.push({message:chatmsg.createdDate,type:'timeMessage'});}else{const currentDate=chatmsg.createdDate.split('T')[0];if(currentDate!==prevDate){prevDate=currentDate;loadedMessages.push({message:chatmsg.createdDate,type:'timeMessage'});}}const obj={...chatmsg,message:chatmsg.content,type:chatmsg.role};if(chatmsg.sourceDocuments)obj.sourceDocuments=JSON.parse(chatmsg.sourceDocuments);if(chatmsg.usedTools)obj.usedTools=JSON.parse(chatmsg.usedTools);if(chatmsg.fileAnnotations)obj.fileAnnotations=JSON.parse(chatmsg.fileAnnotations);loadedMessages.push(obj);}setChatMessages(loadedMessages);};const getChatPK=chatmsg=>{var _chatmsg$memoryType2,_chatmsg$sessionId2;const chatId=chatmsg.chatId;const memoryType=(_chatmsg$memoryType2=chatmsg.memoryType)!==null&&_chatmsg$memoryType2!==void 0?_chatmsg$memoryType2:'null';const sessionId=(_chatmsg$sessionId2=chatmsg.sessionId)!==null&&_chatmsg$sessionId2!==void 0?_chatmsg$sessionId2:'null';return\"\".concat(chatId,\"_\").concat(memoryType,\"_\").concat(sessionId);};const transformChatPKToParams=chatPK=>{let[c1,c2,...rest]=chatPK.split('_');const chatId=c1;const memoryType=c2;const sessionId=rest.join('_');const params={chatId};if(memoryType!=='null')params.memoryType=memoryType;if(sessionId!=='null')params.sessionId=sessionId;return params;};const processChatLogs=allChatMessages=>{const seen={};const filteredChatLogs=[];for(let i=0;i<allChatMessages.length;i+=1){const PK=getChatPK(allChatMessages[i]);const item=allChatMessages[i];if(!Object.prototype.hasOwnProperty.call(seen,PK)){seen[PK]={counter:1,item:allChatMessages[i]};}else if(Object.prototype.hasOwnProperty.call(seen,PK)&&seen[PK].counter===1){seen[PK]={counter:2,item:{...seen[PK].item,apiContent:seen[PK].item.role==='apiMessage'?\"Bot: \".concat(seen[PK].item.content):\"User: \".concat(seen[PK].item.content),userContent:item.role==='apiMessage'?\"Bot: \".concat(item.content):\"User: \".concat(item.content)}};filteredChatLogs.push(seen[PK].item);}}setChatLogs(filteredChatLogs);if(filteredChatLogs.length)return getChatPK(filteredChatLogs[0]);return undefined;};const handleItemClick=(idx,chatmsg)=>{setSelectedMessageIndex(idx);getChatmessageFromPKApi.request(dialogProps.chatflow.id,transformChatPKToParams(getChatPK(chatmsg)));};const onURLClick=data=>{window.open(data,'_blank');};const downloadFile=async fileAnnotation=>{try{const response=await axios.post(\"\".concat(baseURL,\"/api/v1/openai-assistants-file\"),{fileName:fileAnnotation.fileName},{responseType:'blob'});const blob=new Blob([response.data],{type:response.headers['content-type']});const downloadUrl=window.URL.createObjectURL(blob);const link=document.createElement('a');link.href=downloadUrl;link.download=fileAnnotation.fileName;document.body.appendChild(link);link.click();link.remove();}catch(error){console.error('Download failed:',error);}};const onSourceDialogClick=(data,title)=>{setSourceDialogProps({data,title});setSourceDialogOpen(true);};useEffect(()=>{if(getChatmessageFromPKApi.data){getChatMessages(getChatmessageFromPKApi.data);}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[getChatmessageFromPKApi.data]);useEffect(()=>{if(getChatmessageApi.data){setAllChatLogs(getChatmessageApi.data);const chatPK=processChatLogs(getChatmessageApi.data);setSelectedMessageIndex(0);if(chatPK)getChatmessageFromPKApi.request(dialogProps.chatflow.id,transformChatPKToParams(chatPK));}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[getChatmessageApi.data]);useEffect(()=>{if(dialogProps.chatflow){getChatmessageApi.request(dialogProps.chatflow.id);}return()=>{setChatLogs([]);setAllChatLogs([]);setChatMessages([]);setChatTypeFilter([]);setSelectedMessageIndex(0);setStartDate(new Date().setMonth(new Date().getMonth()-1));setEndDate(new Date());};// eslint-disable-next-line react-hooks/exhaustive-deps\n},[dialogProps]);useEffect(()=>{if(show)dispatch({type:SHOW_CANVAS_DIALOG});else dispatch({type:HIDE_CANVAS_DIALOG});return()=>dispatch({type:HIDE_CANVAS_DIALOG});},[show,dispatch]);const component=show?/*#__PURE__*/_jsxs(Dialog,{onClose:onCancel,open:show,fullWidth:true,maxWidth:chatlogs&&chatlogs.length==0?'md':'lg',\"aria-labelledby\":\"alert-dialog-title\",\"aria-describedby\":\"alert-dialog-description\",children:[/*#__PURE__*/_jsx(DialogTitle,{sx:{fontSize:'1rem'},id:\"alert-dialog-title\",children:/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'row'},children:[dialogProps.title,/*#__PURE__*/_jsx(\"div\",{style:{flex:1}}),/*#__PURE__*/_jsx(Button,{variant:\"outlined\",onClick:()=>exportMessages(),startIcon:/*#__PURE__*/_jsx(IconFileExport,{}),children:\"Export\"})]})}),/*#__PURE__*/_jsx(DialogContent,{children:/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'row',alignItems:'center',width:'100%',marginBottom:10},children:[/*#__PURE__*/_jsxs(\"div\",{style:{marginRight:10},children:[/*#__PURE__*/_jsx(\"b\",{style:{marginRight:10},children:\"From Date\"}),/*#__PURE__*/_jsx(DatePicker,{selected:startDate,onChange:date=>onStartDateSelected(date),selectsStart:true,startDate:startDate,endDate:endDate,customInput:/*#__PURE__*/_jsx(DatePickerCustomInput,{})})]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginRight:10},children:[/*#__PURE__*/_jsx(\"b\",{style:{marginRight:10},children:\"To Date\"}),/*#__PURE__*/_jsx(DatePicker,{selected:endDate,onChange:date=>onEndDateSelected(date),selectsEnd:true,startDate:startDate,endDate:endDate,minDate:startDate,maxDate:new Date(),customInput:/*#__PURE__*/_jsx(DatePickerCustomInput,{})})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'row',alignItems:'center',minWidth:'200px',marginRight:10},children:[/*#__PURE__*/_jsx(\"b\",{style:{marginRight:10},children:\"Source\"}),/*#__PURE__*/_jsx(MultiDropdown,{name:\"chatType\",options:[{label:'UI',name:'INTERNAL'},{label:'API/Embed',name:'EXTERNAL'}],onSelect:newValue=>onChatTypeSelected(newValue),value:chatTypeFilter,formControlSx:{mt:0}},JSON.stringify(chatTypeFilter))]}),/*#__PURE__*/_jsx(\"div\",{style:{flex:1}})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'row'},children:[chatlogs&&chatlogs.length==0&&/*#__PURE__*/_jsxs(Stack,{sx:{alignItems:'center',justifyContent:'center',width:'100%'},flexDirection:\"column\",children:[/*#__PURE__*/_jsx(Box,{sx:{p:5,height:'auto'},children:/*#__PURE__*/_jsx(\"img\",{style:{objectFit:'cover',height:'20vh',width:'auto'},src:msgEmptySVG,alt:\"msgEmptySVG\"})}),/*#__PURE__*/_jsx(\"div\",{children:\"No Messages\"})]}),chatlogs&&chatlogs.length>0&&/*#__PURE__*/_jsx(\"div\",{style:{flexBasis:'40%'},children:/*#__PURE__*/_jsx(Box,{sx:{overflowY:'auto',display:'flex',flexGrow:1,flexDirection:'column',maxHeight:'calc(100vh - 260px)'},children:chatlogs.map((chatmsg,index)=>/*#__PURE__*/_jsx(ListItemButton,{sx:{p:0,borderRadius:\"\".concat(customization.borderRadius,\"px\"),boxShadow:'0 2px 14px 0 rgb(32 40 45 / 8%)',mt:1,ml:1,mr:1,mb:index===chatlogs.length-1?1:0},selected:selectedMessageIndex===index,onClick:()=>handleItemClick(index,chatmsg),children:/*#__PURE__*/_jsx(ListItem,{alignItems:\"center\",children:/*#__PURE__*/_jsx(ListItemText,{primary:/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'column',marginBottom:10},children:[/*#__PURE__*/_jsx(\"span\",{children:chatmsg===null||chatmsg===void 0?void 0:chatmsg.userContent}),/*#__PURE__*/_jsx(\"div\",{style:{maxHeight:'100px',maxWidth:'400px',whiteSpace:'nowrap',overflow:'hidden',textOverflow:'ellipsis'},children:chatmsg===null||chatmsg===void 0?void 0:chatmsg.apiContent})]}),secondary:moment(chatmsg.createdDate).format('MMMM Do YYYY, h:mm:ss a')})})},index))})}),chatlogs&&chatlogs.length>0&&/*#__PURE__*/_jsxs(\"div\",{style:{flexBasis:'60%',paddingRight:'30px'},children:[chatMessages&&chatMessages.length>1&&/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'row'},children:[/*#__PURE__*/_jsxs(\"div\",{style:{flex:1,marginLeft:'20px',marginBottom:'15px',marginTop:'10px'},children:[chatMessages[1].sessionId&&/*#__PURE__*/_jsxs(\"div\",{children:[\"Session Id:\\xA0\",/*#__PURE__*/_jsx(\"b\",{children:chatMessages[1].sessionId})]}),chatMessages[1].chatType&&/*#__PURE__*/_jsxs(\"div\",{children:[\"Source:\\xA0\",/*#__PURE__*/_jsx(\"b\",{children:chatMessages[1].chatType==='INTERNAL'?'UI':'API/Embed'})]}),chatMessages[1].memoryType&&/*#__PURE__*/_jsxs(\"div\",{children:[\"Memory:\\xA0\",/*#__PURE__*/_jsx(\"b\",{children:chatMessages[1].memoryType})]})]}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'column',alignContent:'center',alignItems:'end'},children:[/*#__PURE__*/_jsx(StyledButton,{sx:{height:'max-content',width:'max-content'},variant:\"outlined\",color:\"error\",title:\"Clear Message\",onClick:()=>clearChat(chatMessages[1]),startIcon:/*#__PURE__*/_jsx(IconEraser,{}),children:\"Clear\"}),chatMessages[1].sessionId&&/*#__PURE__*/_jsx(Tooltip,{title:'At your left 👈 you will see the Memory node that was used in this conversation. You need to have the matching Memory node with same parameters in the canvas, in order to delete the session conversations stored on the Memory node',placement:\"bottom\",children:/*#__PURE__*/_jsx(\"h5\",{style:{cursor:'pointer',color:theme.palette.primary.main},children:\"Why my session is not deleted?\"})})]})]}),/*#__PURE__*/_jsx(\"div\",{style:{marginLeft:'20px',border:'1px solid #e0e0e0',borderRadius:\"\".concat(customization.borderRadius,\"px\")},className:\"cloud-message\",children:/*#__PURE__*/_jsx(\"div\",{style:{width:'100%',height:'100%'},children:chatMessages&&chatMessages.map((message,index)=>{if(message.type==='apiMessage'||message.type==='userMessage'){return/*#__PURE__*/_jsxs(Box,{sx:{background:message.type==='apiMessage'?theme.palette.asyncSelect.main:'',pl:1,pr:1},style:{display:'flex',justifyContent:'center',alignContent:'center'},children:[message.type==='apiMessage'?/*#__PURE__*/_jsx(\"img\",{style:{marginLeft:'10px'},src:robotPNG,alt:\"AI\",width:\"25\",height:\"25\",className:\"boticon\"}):/*#__PURE__*/_jsx(\"img\",{style:{marginLeft:'10px'},src:userPNG,alt:\"Me\",width:\"25\",height:\"25\",className:\"usericon\"}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',flexDirection:'column',width:'100%'},children:[message.usedTools&&/*#__PURE__*/_jsx(\"div\",{style:{display:'block',flexDirection:'row',width:'100%'},children:message.usedTools.map((tool,index)=>{return/*#__PURE__*/_jsx(Chip,{size:\"small\",label:tool.tool,component:\"a\",sx:{mr:1,mt:1},variant:\"outlined\",clickable:true,onClick:()=>onSourceDialogClick(tool,'Used Tools')},index);})}),/*#__PURE__*/_jsx(\"div\",{className:\"markdownanswer\",children:/*#__PURE__*/_jsx(MemoizedReactMarkdown,{remarkPlugins:[remarkGfm,remarkMath],rehypePlugins:[rehypeMathjax,rehypeRaw],components:{code(_ref3){let{inline,className,children,...props}=_ref3;const match=/language-(\\w+)/.exec(className||'');return!inline?/*#__PURE__*/_jsx(CodeBlock,{chatflowid:dialogProps.chatflow.id,isDialog:true,language:match&&match[1]||'',value:String(children).replace(/\\n$/,''),...props},Math.random()):/*#__PURE__*/_jsx(\"code\",{className:className,...props,children:children});}},children:message.message})}),message.fileAnnotations&&/*#__PURE__*/_jsx(\"div\",{style:{display:'block',flexDirection:'row',width:'100%'},children:message.fileAnnotations.map((fileAnnotation,index)=>{return/*#__PURE__*/_jsx(Button,{sx:{fontSize:'0.85rem',textTransform:'none',mb:1,mr:1},variant:\"outlined\",onClick:()=>downloadFile(fileAnnotation),endIcon:/*#__PURE__*/_jsx(IconDownload,{color:theme.palette.primary.main}),children:fileAnnotation.fileName},index);})}),message.sourceDocuments&&/*#__PURE__*/_jsx(\"div\",{style:{display:'block',flexDirection:'row',width:'100%'},children:removeDuplicateURL(message).map((source,index)=>{const URL=source.metadata&&source.metadata.source?isValidURL(source.metadata.source):undefined;return/*#__PURE__*/_jsx(Chip,{size:\"small\",label:URL?URL.pathname.substring(0,15)==='/'?URL.host:\"\".concat(URL.pathname.substring(0,15),\"...\"):\"\".concat(source.pageContent.substring(0,15),\"...\"),component:\"a\",sx:{mr:1,mb:1},variant:\"outlined\",clickable:true,onClick:()=>URL?onURLClick(source.metadata.source):onSourceDialogClick(source)},index);})})]})]},index);}else{return/*#__PURE__*/_jsx(Box,{sx:{background:theme.palette.timeMessage.main,p:2},style:{display:'flex',justifyContent:'center',alignContent:'center'},children:moment(message.message).format('MMMM Do YYYY, h:mm:ss a')},index);}})})})]})]}),/*#__PURE__*/_jsx(SourceDocDialog,{show:sourceDialogOpen,dialogProps:sourceDialogProps,onCancel:()=>setSourceDialogOpen(false)})]})})]}):null;return/*#__PURE__*/createPortal(component,portalElement);};export default ViewMessagesDialog;","map":{"version":3,"names":["createPortal","useDispatch","useSelector","useState","useEffect","forwardRef","moment","rehypeMathjax","rehypeRaw","remarkGfm","remarkMath","axios","Button","Tooltip","ListItemButton","Box","Stack","Dialog","DialogContent","DialogTitle","ListItem","ListItemText","Chip","useTheme","DatePicker","robotPNG","userPNG","msgEmptySVG","IconFileExport","IconEraser","IconX","IconDownload","MemoizedReactMarkdown","CodeBlock","SourceDocDialog","MultiDropdown","StyledButton","HIDE_CANVAS_DIALOG","SHOW_CANVAS_DIALOG","chatmessageApi","useApi","useConfirm","isValidURL","removeDuplicateURL","useNotifier","baseURL","enqueueSnackbar","enqueueSnackbarAction","closeSnackbar","closeSnackbarAction","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","DatePickerCustomInput","_ref","ref","value","onClick","style","borderRadius","border","children","ViewMessagesDialog","_ref2","show","dialogProps","onCancel","portalElement","document","getElementById","dispatch","theme","customization","state","confirm","arguments","chatlogs","setChatLogs","allChatlogs","setAllChatLogs","chatMessages","setChatMessages","selectedMessageIndex","setSelectedMessageIndex","sourceDialogOpen","setSourceDialogOpen","sourceDialogProps","setSourceDialogProps","chatTypeFilter","setChatTypeFilter","startDate","setStartDate","Date","setMonth","getMonth","endDate","setEndDate","getChatmessageApi","getAllChatmessageFromChatflow","getChatmessageFromPKApi","getChatmessageFromPK","onStartDateSelected","date","request","chatflow","id","chatType","length","undefined","onEndDateSelected","onChatTypeSelected","chatTypes","exportMessages","obj","i","chatmsg","chatPK","getChatPK","msg","content","role","time","createdDate","sourceDocuments","JSON","parse","usedTools","fileAnnotations","Object","prototype","hasOwnProperty","call","_chatmsg$sessionId","_chatmsg$memoryType","chatId","source","sessionId","memoryType","messages","key","push","reverse","dataStr","stringify","dataUri","encodeURIComponent","exportFileDefaultName","concat","linkElement","createElement","setAttribute","click","clearChat","description","confirmPayload","title","confirmButtonName","cancelButtonName","isConfirmed","chatflowid","isClearFromViewMessageDialog","deleteChatmessage","message","options","getTime","Math","random","variant","action","color","error","errorData","response","data","status","statusText","persist","getChatMessages","chatmessages","prevDate","loadedMessages","split","type","currentDate","_chatmsg$memoryType2","_chatmsg$sessionId2","transformChatPKToParams","c1","c2","rest","join","params","processChatLogs","allChatMessages","seen","filteredChatLogs","PK","item","counter","apiContent","userContent","handleItemClick","idx","onURLClick","window","open","downloadFile","fileAnnotation","post","fileName","responseType","blob","Blob","headers","downloadUrl","URL","createObjectURL","link","href","download","body","appendChild","remove","console","onSourceDialogClick","component","onClose","fullWidth","maxWidth","sx","fontSize","display","flexDirection","flex","startIcon","alignItems","width","marginBottom","marginRight","selected","onChange","selectsStart","customInput","selectsEnd","minDate","maxDate","minWidth","name","label","onSelect","newValue","formControlSx","mt","justifyContent","p","height","objectFit","src","alt","flexBasis","overflowY","flexGrow","maxHeight","map","index","boxShadow","ml","mr","mb","primary","whiteSpace","overflow","textOverflow","secondary","format","paddingRight","marginLeft","marginTop","alignContent","placement","cursor","palette","main","className","background","asyncSelect","pl","pr","tool","size","clickable","remarkPlugins","rehypePlugins","components","code","_ref3","inline","props","match","exec","isDialog","language","String","replace","textTransform","endIcon","metadata","pathname","substring","host","pageContent","timeMessage"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/packages/ui/src/ui-component/dialog/ViewMessagesDialog.js"],"sourcesContent":["import { createPortal } from 'react-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useState, useEffect, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport moment from 'moment'\nimport rehypeMathjax from 'rehype-mathjax'\nimport rehypeRaw from 'rehype-raw'\nimport remarkGfm from 'remark-gfm'\nimport remarkMath from 'remark-math'\nimport axios from 'axios'\n\n// material-ui\nimport {\n    Button,\n    Tooltip,\n    ListItemButton,\n    Box,\n    Stack,\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    ListItem,\n    ListItemText,\n    Chip\n} from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport DatePicker from 'react-datepicker'\n\nimport robotPNG from 'assets/images/robot.png'\nimport userPNG from 'assets/images/account.png'\nimport msgEmptySVG from 'assets/images/message_empty.svg'\nimport { IconFileExport, IconEraser, IconX, IconDownload } from '@tabler/icons'\n\n// Project import\nimport { MemoizedReactMarkdown } from 'ui-component/markdown/MemoizedReactMarkdown'\nimport { CodeBlock } from 'ui-component/markdown/CodeBlock'\nimport SourceDocDialog from 'ui-component/dialog/SourceDocDialog'\nimport { MultiDropdown } from 'ui-component/dropdown/MultiDropdown'\nimport { StyledButton } from 'ui-component/button/StyledButton'\n\n// store\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\n\n// API\nimport chatmessageApi from 'api/chatmessage'\nimport useApi from 'hooks/useApi'\nimport useConfirm from 'hooks/useConfirm'\n\n// Utils\nimport { isValidURL, removeDuplicateURL } from 'utils/genericHelper'\nimport useNotifier from 'utils/useNotifier'\nimport { baseURL } from 'store/constant'\n\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\n\nimport 'views/chatmessage/ChatMessage.css'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nconst DatePickerCustomInput = forwardRef(function DatePickerCustomInput({ value, onClick }, ref) {\n    return (\n        <ListItemButton style={{ borderRadius: 15, border: '1px solid #e0e0e0' }} onClick={onClick} ref={ref}>\n            {value}\n        </ListItemButton>\n    )\n})\n\nDatePickerCustomInput.propTypes = {\n    value: PropTypes.string,\n    onClick: PropTypes.func\n}\n\nconst ViewMessagesDialog = ({ show, dialogProps, onCancel }) => {\n    const portalElement = document.getElementById('portal')\n    const dispatch = useDispatch()\n    const theme = useTheme()\n    const customization = useSelector((state) => state.customization)\n    const { confirm } = useConfirm()\n\n    useNotifier()\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const [chatlogs, setChatLogs] = useState([])\n    const [allChatlogs, setAllChatLogs] = useState([])\n    const [chatMessages, setChatMessages] = useState([])\n    const [selectedMessageIndex, setSelectedMessageIndex] = useState(0)\n    const [sourceDialogOpen, setSourceDialogOpen] = useState(false)\n    const [sourceDialogProps, setSourceDialogProps] = useState({})\n    const [chatTypeFilter, setChatTypeFilter] = useState([])\n    const [startDate, setStartDate] = useState(new Date().setMonth(new Date().getMonth() - 1))\n    const [endDate, setEndDate] = useState(new Date())\n\n    const getChatmessageApi = useApi(chatmessageApi.getAllChatmessageFromChatflow)\n    const getChatmessageFromPKApi = useApi(chatmessageApi.getChatmessageFromPK)\n\n    const onStartDateSelected = (date) => {\n        setStartDate(date)\n        getChatmessageApi.request(dialogProps.chatflow.id, {\n            startDate: date,\n            endDate: endDate,\n            chatType: chatTypeFilter.length ? chatTypeFilter : undefined\n        })\n    }\n\n    const onEndDateSelected = (date) => {\n        setEndDate(date)\n        getChatmessageApi.request(dialogProps.chatflow.id, {\n            endDate: date,\n            startDate: startDate,\n            chatType: chatTypeFilter.length ? chatTypeFilter : undefined\n        })\n    }\n\n    const onChatTypeSelected = (chatTypes) => {\n        setChatTypeFilter(chatTypes)\n        getChatmessageApi.request(dialogProps.chatflow.id, {\n            chatType: chatTypes.length ? chatTypes : undefined,\n            startDate: startDate,\n            endDate: endDate\n        })\n    }\n\n    const exportMessages = () => {\n        const obj = {}\n        for (let i = 0; i < allChatlogs.length; i += 1) {\n            const chatmsg = allChatlogs[i]\n            const chatPK = getChatPK(chatmsg)\n            const msg = {\n                content: chatmsg.content,\n                role: chatmsg.role === 'apiMessage' ? 'bot' : 'user',\n                time: chatmsg.createdDate\n            }\n            if (chatmsg.sourceDocuments) msg.sourceDocuments = JSON.parse(chatmsg.sourceDocuments)\n            if (chatmsg.usedTools) msg.usedTools = JSON.parse(chatmsg.usedTools)\n            if (chatmsg.fileAnnotations) msg.fileAnnotations = JSON.parse(chatmsg.fileAnnotations)\n\n            if (!Object.prototype.hasOwnProperty.call(obj, chatPK)) {\n                obj[chatPK] = {\n                    id: chatmsg.chatId,\n                    source: chatmsg.chatType === 'INTERNAL' ? 'UI' : 'API/Embed',\n                    sessionId: chatmsg.sessionId ?? null,\n                    memoryType: chatmsg.memoryType ?? null,\n                    messages: [msg]\n                }\n            } else if (Object.prototype.hasOwnProperty.call(obj, chatPK)) {\n                obj[chatPK].messages = [...obj[chatPK].messages, msg]\n            }\n        }\n\n        const exportMessages = []\n        for (const key in obj) {\n            exportMessages.push({\n                ...obj[key]\n            })\n        }\n\n        for (let i = 0; i < exportMessages.length; i += 1) {\n            exportMessages[i].messages = exportMessages[i].messages.reverse()\n        }\n\n        const dataStr = JSON.stringify(exportMessages, null, 2)\n        const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr)\n\n        const exportFileDefaultName = `${dialogProps.chatflow.id}-Message.json`\n\n        let linkElement = document.createElement('a')\n        linkElement.setAttribute('href', dataUri)\n        linkElement.setAttribute('download', exportFileDefaultName)\n        linkElement.click()\n    }\n\n    const clearChat = async (chatmsg) => {\n        const description =\n            chatmsg.sessionId && chatmsg.memoryType\n                ? `Are you sure you want to clear session id: ${chatmsg.sessionId} from ${chatmsg.memoryType}?`\n                : `Are you sure you want to clear messages?`\n        const confirmPayload = {\n            title: `Clear Session`,\n            description,\n            confirmButtonName: 'Clear',\n            cancelButtonName: 'Cancel'\n        }\n        const isConfirmed = await confirm(confirmPayload)\n\n        const chatflowid = dialogProps.chatflow.id\n        if (isConfirmed) {\n            try {\n                const obj = { chatflowid, isClearFromViewMessageDialog: true }\n                if (chatmsg.chatId) obj.chatId = chatmsg.chatId\n                if (chatmsg.chatType) obj.chatType = chatmsg.chatType\n                if (chatmsg.memoryType) obj.memoryType = chatmsg.memoryType\n                if (chatmsg.sessionId) obj.sessionId = chatmsg.sessionId\n\n                await chatmessageApi.deleteChatmessage(chatflowid, obj)\n                const description =\n                    chatmsg.sessionId && chatmsg.memoryType\n                        ? `Succesfully cleared session id: ${chatmsg.sessionId} from ${chatmsg.memoryType}`\n                        : `Succesfully cleared messages`\n                enqueueSnackbar({\n                    message: description,\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                getChatmessageApi.request(chatflowid)\n            } catch (error) {\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n                enqueueSnackbar({\n                    message: errorData,\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'error',\n                        persist: true,\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n            }\n        }\n    }\n\n    const getChatMessages = (chatmessages) => {\n        let prevDate = ''\n        const loadedMessages = []\n        for (let i = 0; i < chatmessages.length; i += 1) {\n            const chatmsg = chatmessages[i]\n            if (!prevDate) {\n                prevDate = chatmsg.createdDate.split('T')[0]\n                loadedMessages.push({\n                    message: chatmsg.createdDate,\n                    type: 'timeMessage'\n                })\n            } else {\n                const currentDate = chatmsg.createdDate.split('T')[0]\n                if (currentDate !== prevDate) {\n                    prevDate = currentDate\n                    loadedMessages.push({\n                        message: chatmsg.createdDate,\n                        type: 'timeMessage'\n                    })\n                }\n            }\n            const obj = {\n                ...chatmsg,\n                message: chatmsg.content,\n                type: chatmsg.role\n            }\n            if (chatmsg.sourceDocuments) obj.sourceDocuments = JSON.parse(chatmsg.sourceDocuments)\n            if (chatmsg.usedTools) obj.usedTools = JSON.parse(chatmsg.usedTools)\n            if (chatmsg.fileAnnotations) obj.fileAnnotations = JSON.parse(chatmsg.fileAnnotations)\n\n            loadedMessages.push(obj)\n        }\n        setChatMessages(loadedMessages)\n    }\n\n    const getChatPK = (chatmsg) => {\n        const chatId = chatmsg.chatId\n        const memoryType = chatmsg.memoryType ?? 'null'\n        const sessionId = chatmsg.sessionId ?? 'null'\n        return `${chatId}_${memoryType}_${sessionId}`\n    }\n\n    const transformChatPKToParams = (chatPK) => {\n        let [c1, c2, ...rest] = chatPK.split('_')\n        const chatId = c1\n        const memoryType = c2\n        const sessionId = rest.join('_')\n\n        const params = { chatId }\n        if (memoryType !== 'null') params.memoryType = memoryType\n        if (sessionId !== 'null') params.sessionId = sessionId\n\n        return params\n    }\n\n    const processChatLogs = (allChatMessages) => {\n        const seen = {}\n        const filteredChatLogs = []\n        for (let i = 0; i < allChatMessages.length; i += 1) {\n            const PK = getChatPK(allChatMessages[i])\n\n            const item = allChatMessages[i]\n            if (!Object.prototype.hasOwnProperty.call(seen, PK)) {\n                seen[PK] = {\n                    counter: 1,\n                    item: allChatMessages[i]\n                }\n            } else if (Object.prototype.hasOwnProperty.call(seen, PK) && seen[PK].counter === 1) {\n                seen[PK] = {\n                    counter: 2,\n                    item: {\n                        ...seen[PK].item,\n                        apiContent:\n                            seen[PK].item.role === 'apiMessage' ? `Bot: ${seen[PK].item.content}` : `User: ${seen[PK].item.content}`,\n                        userContent: item.role === 'apiMessage' ? `Bot: ${item.content}` : `User: ${item.content}`\n                    }\n                }\n                filteredChatLogs.push(seen[PK].item)\n            }\n        }\n        setChatLogs(filteredChatLogs)\n        if (filteredChatLogs.length) return getChatPK(filteredChatLogs[0])\n        return undefined\n    }\n\n    const handleItemClick = (idx, chatmsg) => {\n        setSelectedMessageIndex(idx)\n        getChatmessageFromPKApi.request(dialogProps.chatflow.id, transformChatPKToParams(getChatPK(chatmsg)))\n    }\n\n    const onURLClick = (data) => {\n        window.open(data, '_blank')\n    }\n\n    const downloadFile = async (fileAnnotation) => {\n        try {\n            const response = await axios.post(\n                `${baseURL}/api/v1/openai-assistants-file`,\n                { fileName: fileAnnotation.fileName },\n                { responseType: 'blob' }\n            )\n            const blob = new Blob([response.data], { type: response.headers['content-type'] })\n            const downloadUrl = window.URL.createObjectURL(blob)\n            const link = document.createElement('a')\n            link.href = downloadUrl\n            link.download = fileAnnotation.fileName\n            document.body.appendChild(link)\n            link.click()\n            link.remove()\n        } catch (error) {\n            console.error('Download failed:', error)\n        }\n    }\n\n    const onSourceDialogClick = (data, title) => {\n        setSourceDialogProps({ data, title })\n        setSourceDialogOpen(true)\n    }\n\n    useEffect(() => {\n        if (getChatmessageFromPKApi.data) {\n            getChatMessages(getChatmessageFromPKApi.data)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getChatmessageFromPKApi.data])\n\n    useEffect(() => {\n        if (getChatmessageApi.data) {\n            setAllChatLogs(getChatmessageApi.data)\n            const chatPK = processChatLogs(getChatmessageApi.data)\n            setSelectedMessageIndex(0)\n            if (chatPK) getChatmessageFromPKApi.request(dialogProps.chatflow.id, transformChatPKToParams(chatPK))\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getChatmessageApi.data])\n\n    useEffect(() => {\n        if (dialogProps.chatflow) {\n            getChatmessageApi.request(dialogProps.chatflow.id)\n        }\n\n        return () => {\n            setChatLogs([])\n            setAllChatLogs([])\n            setChatMessages([])\n            setChatTypeFilter([])\n            setSelectedMessageIndex(0)\n            setStartDate(new Date().setMonth(new Date().getMonth() - 1))\n            setEndDate(new Date())\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dialogProps])\n\n    useEffect(() => {\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\n    }, [show, dispatch])\n\n    const component = show ? (\n        <Dialog\n            onClose={onCancel}\n            open={show}\n            fullWidth\n            maxWidth={chatlogs && chatlogs.length == 0 ? 'md' : 'lg'}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    {dialogProps.title}\n                    <div style={{ flex: 1 }} />\n                    <Button variant='outlined' onClick={() => exportMessages()} startIcon={<IconFileExport />}>\n                        Export\n                    </Button>\n                </div>\n            </DialogTitle>\n            <DialogContent>\n                <>\n                    <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', width: '100%', marginBottom: 10 }}>\n                        <div style={{ marginRight: 10 }}>\n                            <b style={{ marginRight: 10 }}>From Date</b>\n                            <DatePicker\n                                selected={startDate}\n                                onChange={(date) => onStartDateSelected(date)}\n                                selectsStart\n                                startDate={startDate}\n                                endDate={endDate}\n                                customInput={<DatePickerCustomInput />}\n                            />\n                        </div>\n                        <div style={{ marginRight: 10 }}>\n                            <b style={{ marginRight: 10 }}>To Date</b>\n                            <DatePicker\n                                selected={endDate}\n                                onChange={(date) => onEndDateSelected(date)}\n                                selectsEnd\n                                startDate={startDate}\n                                endDate={endDate}\n                                minDate={startDate}\n                                maxDate={new Date()}\n                                customInput={<DatePickerCustomInput />}\n                            />\n                        </div>\n                        <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center', minWidth: '200px', marginRight: 10 }}>\n                            <b style={{ marginRight: 10 }}>Source</b>\n                            <MultiDropdown\n                                key={JSON.stringify(chatTypeFilter)}\n                                name='chatType'\n                                options={[\n                                    {\n                                        label: 'UI',\n                                        name: 'INTERNAL'\n                                    },\n                                    {\n                                        label: 'API/Embed',\n                                        name: 'EXTERNAL'\n                                    }\n                                ]}\n                                onSelect={(newValue) => onChatTypeSelected(newValue)}\n                                value={chatTypeFilter}\n                                formControlSx={{ mt: 0 }}\n                            />\n                        </div>\n                        <div style={{ flex: 1 }}></div>\n                    </div>\n                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                        {chatlogs && chatlogs.length == 0 && (\n                            <Stack sx={{ alignItems: 'center', justifyContent: 'center', width: '100%' }} flexDirection='column'>\n                                <Box sx={{ p: 5, height: 'auto' }}>\n                                    <img\n                                        style={{ objectFit: 'cover', height: '20vh', width: 'auto' }}\n                                        src={msgEmptySVG}\n                                        alt='msgEmptySVG'\n                                    />\n                                </Box>\n                                <div>No Messages</div>\n                            </Stack>\n                        )}\n                        {chatlogs && chatlogs.length > 0 && (\n                            <div style={{ flexBasis: '40%' }}>\n                                <Box\n                                    sx={{\n                                        overflowY: 'auto',\n                                        display: 'flex',\n                                        flexGrow: 1,\n                                        flexDirection: 'column',\n                                        maxHeight: 'calc(100vh - 260px)'\n                                    }}\n                                >\n                                    {chatlogs.map((chatmsg, index) => (\n                                        <ListItemButton\n                                            key={index}\n                                            sx={{\n                                                p: 0,\n                                                borderRadius: `${customization.borderRadius}px`,\n                                                boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)',\n                                                mt: 1,\n                                                ml: 1,\n                                                mr: 1,\n                                                mb: index === chatlogs.length - 1 ? 1 : 0\n                                            }}\n                                            selected={selectedMessageIndex === index}\n                                            onClick={() => handleItemClick(index, chatmsg)}\n                                        >\n                                            <ListItem alignItems='center'>\n                                                <ListItemText\n                                                    primary={\n                                                        <div style={{ display: 'flex', flexDirection: 'column', marginBottom: 10 }}>\n                                                            <span>{chatmsg?.userContent}</span>\n                                                            <div\n                                                                style={{\n                                                                    maxHeight: '100px',\n                                                                    maxWidth: '400px',\n                                                                    whiteSpace: 'nowrap',\n                                                                    overflow: 'hidden',\n                                                                    textOverflow: 'ellipsis'\n                                                                }}\n                                                            >\n                                                                {chatmsg?.apiContent}\n                                                            </div>\n                                                        </div>\n                                                    }\n                                                    secondary={moment(chatmsg.createdDate).format('MMMM Do YYYY, h:mm:ss a')}\n                                                />\n                                            </ListItem>\n                                        </ListItemButton>\n                                    ))}\n                                </Box>\n                            </div>\n                        )}\n                        {chatlogs && chatlogs.length > 0 && (\n                            <div style={{ flexBasis: '60%', paddingRight: '30px' }}>\n                                {chatMessages && chatMessages.length > 1 && (\n                                    <div style={{ display: 'flex', flexDirection: 'row' }}>\n                                        <div style={{ flex: 1, marginLeft: '20px', marginBottom: '15px', marginTop: '10px' }}>\n                                            {chatMessages[1].sessionId && (\n                                                <div>\n                                                    Session Id:&nbsp;<b>{chatMessages[1].sessionId}</b>\n                                                </div>\n                                            )}\n                                            {chatMessages[1].chatType && (\n                                                <div>\n                                                    Source:&nbsp;<b>{chatMessages[1].chatType === 'INTERNAL' ? 'UI' : 'API/Embed'}</b>\n                                                </div>\n                                            )}\n                                            {chatMessages[1].memoryType && (\n                                                <div>\n                                                    Memory:&nbsp;<b>{chatMessages[1].memoryType}</b>\n                                                </div>\n                                            )}\n                                        </div>\n                                        <div\n                                            style={{\n                                                display: 'flex',\n                                                flexDirection: 'column',\n                                                alignContent: 'center',\n                                                alignItems: 'end'\n                                            }}\n                                        >\n                                            <StyledButton\n                                                sx={{ height: 'max-content', width: 'max-content' }}\n                                                variant='outlined'\n                                                color='error'\n                                                title='Clear Message'\n                                                onClick={() => clearChat(chatMessages[1])}\n                                                startIcon={<IconEraser />}\n                                            >\n                                                Clear\n                                            </StyledButton>\n                                            {chatMessages[1].sessionId && (\n                                                <Tooltip\n                                                    title={\n                                                        'At your left 👈 you will see the Memory node that was used in this conversation. You need to have the matching Memory node with same parameters in the canvas, in order to delete the session conversations stored on the Memory node'\n                                                    }\n                                                    placement='bottom'\n                                                >\n                                                    <h5 style={{ cursor: 'pointer', color: theme.palette.primary.main }}>\n                                                        Why my session is not deleted?\n                                                    </h5>\n                                                </Tooltip>\n                                            )}\n                                        </div>\n                                    </div>\n                                )}\n                                <div\n                                    style={{\n                                        marginLeft: '20px',\n                                        border: '1px solid #e0e0e0',\n                                        borderRadius: `${customization.borderRadius}px`\n                                    }}\n                                    className='cloud-message'\n                                >\n                                    <div style={{ width: '100%', height: '100%' }}>\n                                        {chatMessages &&\n                                            chatMessages.map((message, index) => {\n                                                if (message.type === 'apiMessage' || message.type === 'userMessage') {\n                                                    return (\n                                                        <Box\n                                                            sx={{\n                                                                background:\n                                                                    message.type === 'apiMessage' ? theme.palette.asyncSelect.main : '',\n                                                                pl: 1,\n                                                                pr: 1\n                                                            }}\n                                                            key={index}\n                                                            style={{ display: 'flex', justifyContent: 'center', alignContent: 'center' }}\n                                                        >\n                                                            {/* Display the correct icon depending on the message type */}\n                                                            {message.type === 'apiMessage' ? (\n                                                                <img\n                                                                    style={{ marginLeft: '10px' }}\n                                                                    src={robotPNG}\n                                                                    alt='AI'\n                                                                    width='25'\n                                                                    height='25'\n                                                                    className='boticon'\n                                                                />\n                                                            ) : (\n                                                                <img\n                                                                    style={{ marginLeft: '10px' }}\n                                                                    src={userPNG}\n                                                                    alt='Me'\n                                                                    width='25'\n                                                                    height='25'\n                                                                    className='usericon'\n                                                                />\n                                                            )}\n                                                            <div\n                                                                style={{\n                                                                    display: 'flex',\n                                                                    flexDirection: 'column',\n                                                                    width: '100%'\n                                                                }}\n                                                            >\n                                                                {message.usedTools && (\n                                                                    <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\n                                                                        {message.usedTools.map((tool, index) => {\n                                                                            return (\n                                                                                <Chip\n                                                                                    size='small'\n                                                                                    key={index}\n                                                                                    label={tool.tool}\n                                                                                    component='a'\n                                                                                    sx={{ mr: 1, mt: 1 }}\n                                                                                    variant='outlined'\n                                                                                    clickable\n                                                                                    onClick={() => onSourceDialogClick(tool, 'Used Tools')}\n                                                                                />\n                                                                            )\n                                                                        })}\n                                                                    </div>\n                                                                )}\n                                                                <div className='markdownanswer'>\n                                                                    {/* Messages are being rendered in Markdown format */}\n                                                                    <MemoizedReactMarkdown\n                                                                        remarkPlugins={[remarkGfm, remarkMath]}\n                                                                        rehypePlugins={[rehypeMathjax, rehypeRaw]}\n                                                                        components={{\n                                                                            code({ inline, className, children, ...props }) {\n                                                                                const match = /language-(\\w+)/.exec(className || '')\n                                                                                return !inline ? (\n                                                                                    <CodeBlock\n                                                                                        key={Math.random()}\n                                                                                        chatflowid={dialogProps.chatflow.id}\n                                                                                        isDialog={true}\n                                                                                        language={(match && match[1]) || ''}\n                                                                                        value={String(children).replace(/\\n$/, '')}\n                                                                                        {...props}\n                                                                                    />\n                                                                                ) : (\n                                                                                    <code className={className} {...props}>\n                                                                                        {children}\n                                                                                    </code>\n                                                                                )\n                                                                            }\n                                                                        }}\n                                                                    >\n                                                                        {message.message}\n                                                                    </MemoizedReactMarkdown>\n                                                                </div>\n                                                                {message.fileAnnotations && (\n                                                                    <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\n                                                                        {message.fileAnnotations.map((fileAnnotation, index) => {\n                                                                            return (\n                                                                                <Button\n                                                                                    sx={{\n                                                                                        fontSize: '0.85rem',\n                                                                                        textTransform: 'none',\n                                                                                        mb: 1,\n                                                                                        mr: 1\n                                                                                    }}\n                                                                                    key={index}\n                                                                                    variant='outlined'\n                                                                                    onClick={() => downloadFile(fileAnnotation)}\n                                                                                    endIcon={\n                                                                                        <IconDownload color={theme.palette.primary.main} />\n                                                                                    }\n                                                                                >\n                                                                                    {fileAnnotation.fileName}\n                                                                                </Button>\n                                                                            )\n                                                                        })}\n                                                                    </div>\n                                                                )}\n                                                                {message.sourceDocuments && (\n                                                                    <div style={{ display: 'block', flexDirection: 'row', width: '100%' }}>\n                                                                        {removeDuplicateURL(message).map((source, index) => {\n                                                                            const URL =\n                                                                                source.metadata && source.metadata.source\n                                                                                    ? isValidURL(source.metadata.source)\n                                                                                    : undefined\n                                                                            return (\n                                                                                <Chip\n                                                                                    size='small'\n                                                                                    key={index}\n                                                                                    label={\n                                                                                        URL\n                                                                                            ? URL.pathname.substring(0, 15) === '/'\n                                                                                                ? URL.host\n                                                                                                : `${URL.pathname.substring(0, 15)}...`\n                                                                                            : `${source.pageContent.substring(0, 15)}...`\n                                                                                    }\n                                                                                    component='a'\n                                                                                    sx={{ mr: 1, mb: 1 }}\n                                                                                    variant='outlined'\n                                                                                    clickable\n                                                                                    onClick={() =>\n                                                                                        URL\n                                                                                            ? onURLClick(source.metadata.source)\n                                                                                            : onSourceDialogClick(source)\n                                                                                    }\n                                                                                />\n                                                                            )\n                                                                        })}\n                                                                    </div>\n                                                                )}\n                                                            </div>\n                                                        </Box>\n                                                    )\n                                                } else {\n                                                    return (\n                                                        <Box\n                                                            sx={{\n                                                                background: theme.palette.timeMessage.main,\n                                                                p: 2\n                                                            }}\n                                                            key={index}\n                                                            style={{ display: 'flex', justifyContent: 'center', alignContent: 'center' }}\n                                                        >\n                                                            {moment(message.message).format('MMMM Do YYYY, h:mm:ss a')}\n                                                        </Box>\n                                                    )\n                                                }\n                                            })}\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                    <SourceDocDialog show={sourceDialogOpen} dialogProps={sourceDialogProps} onCancel={() => setSourceDialogOpen(false)} />\n                </>\n            </DialogContent>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nViewMessagesDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func\n}\n\nexport default ViewMessagesDialog\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}