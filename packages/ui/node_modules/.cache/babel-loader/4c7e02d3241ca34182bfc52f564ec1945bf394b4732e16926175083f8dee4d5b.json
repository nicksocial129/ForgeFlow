{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MmlMfenced = void 0;\nvar MmlNode_js_1 = require(\"../MmlNode.js\");\nvar MmlMfenced = function (_super) {\n  __extends(MmlMfenced, _super);\n  function MmlMfenced() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.texclass = MmlNode_js_1.TEXCLASS.INNER;\n    _this.separators = [];\n    _this.open = null;\n    _this.close = null;\n    return _this;\n  }\n  Object.defineProperty(MmlMfenced.prototype, \"kind\", {\n    get: function () {\n      return 'mfenced';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MmlMfenced.prototype.setTeXclass = function (prev) {\n    this.getPrevClass(prev);\n    if (this.open) {\n      prev = this.open.setTeXclass(prev);\n    }\n    if (this.childNodes[0]) {\n      prev = this.childNodes[0].setTeXclass(prev);\n    }\n    for (var i = 1, m = this.childNodes.length; i < m; i++) {\n      if (this.separators[i - 1]) {\n        prev = this.separators[i - 1].setTeXclass(prev);\n      }\n      if (this.childNodes[i]) {\n        prev = this.childNodes[i].setTeXclass(prev);\n      }\n    }\n    if (this.close) {\n      prev = this.close.setTeXclass(prev);\n    }\n    this.updateTeXclass(this.open);\n    return prev;\n  };\n  MmlMfenced.prototype.setChildInheritedAttributes = function (attributes, display, level, prime) {\n    var e_1, _a;\n    this.addFakeNodes();\n    try {\n      for (var _b = __values([this.open, this.close].concat(this.separators)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var child = _c.value;\n        if (child) {\n          child.setInheritedAttributes(attributes, display, level, prime);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    _super.prototype.setChildInheritedAttributes.call(this, attributes, display, level, prime);\n  };\n  MmlMfenced.prototype.addFakeNodes = function () {\n    var e_2, _a;\n    var _b = this.attributes.getList('open', 'close', 'separators'),\n      open = _b.open,\n      close = _b.close,\n      separators = _b.separators;\n    open = open.replace(/[ \\t\\n\\r]/g, '');\n    close = close.replace(/[ \\t\\n\\r]/g, '');\n    separators = separators.replace(/[ \\t\\n\\r]/g, '');\n    if (open) {\n      this.open = this.fakeNode(open, {\n        fence: true,\n        form: 'prefix'\n      }, MmlNode_js_1.TEXCLASS.OPEN);\n    }\n    if (separators) {\n      while (separators.length < this.childNodes.length - 1) {\n        separators += separators.charAt(separators.length - 1);\n      }\n      var i = 0;\n      try {\n        for (var _c = __values(this.childNodes.slice(1)), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var child = _d.value;\n          if (child) {\n            this.separators.push(this.fakeNode(separators.charAt(i++)));\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n    if (close) {\n      this.close = this.fakeNode(close, {\n        fence: true,\n        form: 'postfix'\n      }, MmlNode_js_1.TEXCLASS.CLOSE);\n    }\n  };\n  MmlMfenced.prototype.fakeNode = function (c, properties, texClass) {\n    if (properties === void 0) {\n      properties = {};\n    }\n    if (texClass === void 0) {\n      texClass = null;\n    }\n    var text = this.factory.create('text').setText(c);\n    var node = this.factory.create('mo', properties, [text]);\n    node.texClass = texClass;\n    node.parent = this;\n    return node;\n  };\n  MmlMfenced.defaults = __assign(__assign({}, MmlNode_js_1.AbstractMmlNode.defaults), {\n    open: '(',\n    close: ')',\n    separators: ','\n  });\n  return MmlMfenced;\n}(MmlNode_js_1.AbstractMmlNode);\nexports.MmlMfenced = MmlMfenced;","map":{"version":3,"names":["MmlNode_js_1","require","MmlMfenced","_super","__extends","_this","apply","arguments","texclass","TEXCLASS","INNER","separators","open","close","Object","defineProperty","prototype","get","setTeXclass","prev","getPrevClass","childNodes","i","m","length","updateTeXclass","setChildInheritedAttributes","attributes","display","level","prime","addFakeNodes","_b","__values","concat","_c","next","done","child","value","setInheritedAttributes","call","getList","replace","fakeNode","fence","form","OPEN","charAt","slice","_d","push","CLOSE","c","properties","texClass","text","factory","create","setText","node","parent","defaults","__assign","AbstractMmlNode","exports"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/core/MmlTree/MmlNodes/mfenced.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the MmlMfenced node\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {PropertyList} from '../../Tree/Node.js';\nimport {MmlNode, TextNode, AbstractMmlNode, AttributeList, TEXCLASS} from '../MmlNode.js';\n\n/*****************************************************************/\n/**\n *  Implements the MmlMfenced node class (subclass of AbstractMmlNode)\n */\n\nexport class MmlMfenced extends AbstractMmlNode {\n\n  /**\n   * @overeride\n   */\n  public static defaults: PropertyList = {\n    ...AbstractMmlNode.defaults,\n    open: '(',\n    close: ')',\n    separators: ','\n  };\n\n  /**\n   * TeX class is INNER\n   */\n  protected texclass = TEXCLASS.INNER;\n\n  /**\n   * Storage for \"fake\" nodes for the separators\n   */\n  public separators: MmlNode[] = [];\n  /**\n   * Storage for \"fake\" open node\n   */\n  public open: MmlNode = null;\n  /**\n   * Storage for \"fake\" close node\n   */\n  public close: MmlNode = null;\n\n  /**\n   * @override\n   */\n  public get kind() {\n    return 'mfenced';\n  }\n\n  /**\n   * Include the fake nodes in the process, since they will be used\n   *  to produce the output.\n   *\n   * @override\n   */\n  public setTeXclass(prev: MmlNode) {\n    this.getPrevClass(prev);\n    if (this.open) {\n      prev = this.open.setTeXclass(prev);\n    }\n    if (this.childNodes[0]) {\n      prev = this.childNodes[0].setTeXclass(prev);\n    }\n    for (let i = 1, m = this.childNodes.length; i < m; i++) {\n      if (this.separators[i - 1]) {\n        prev = this.separators[i - 1].setTeXclass(prev);\n      }\n      if (this.childNodes[i]) {\n        prev = this.childNodes[i].setTeXclass(prev);\n      }\n    }\n    if (this.close) {\n      prev = this.close.setTeXclass(prev);\n    }\n    this.updateTeXclass(this.open);\n    return prev;\n  }\n\n  /**\n   * Create the fake nodes and do their inheritance\n   * Then do inheridence of usual children\n   *\n   * @override\n   */\n  protected setChildInheritedAttributes(attributes: AttributeList, display: boolean, level: number, prime: boolean) {\n    this.addFakeNodes();\n    for (const child of [this.open, this.close].concat(this.separators)) {\n      if (child) {\n        child.setInheritedAttributes(attributes, display, level, prime);\n      }\n    }\n    super.setChildInheritedAttributes(attributes, display, level, prime);\n  }\n\n  /**\n   * Create <mo> elements for the open and close delimiters, and for the separators (if any)\n   */\n  protected addFakeNodes() {\n    let {open, close, separators} = this.attributes.getList('open', 'close', 'separators') as\n    {open: string, close: string, separators: string};\n    open = open.replace(/[ \\t\\n\\r]/g, '');\n    close = close.replace(/[ \\t\\n\\r]/g, '');\n    separators = separators.replace(/[ \\t\\n\\r]/g, '');\n    //\n    // Create open node\n    //\n    if (open) {\n      this.open = this.fakeNode(open, {fence: true, form: 'prefix'}, TEXCLASS.OPEN);\n    }\n    //\n    // Create nodes for the separators\n    //\n    if (separators) {\n      while (separators.length < this.childNodes.length - 1) {\n        separators += separators.charAt(separators.length - 1);\n      }\n      let i = 0;\n      for (const child of this.childNodes.slice(1)) {\n        if (child) {\n          this.separators.push(this.fakeNode(separators.charAt(i++)));\n        }\n      }\n    }\n    //\n    //  Create close node\n    //\n    if (close) {\n      this.close = this.fakeNode(close, {fence: true, form: 'postfix'}, TEXCLASS.CLOSE);\n    }\n  }\n\n  /**\n   * @param {string} c                 The character for the text of the node\n   * @param {PropertyList} properties  The attributes for the node\n   * @param {number} texClass          The TeX class for the node\n   * @return {MmlNode}                 The generated <mo> node\n   */\n  protected fakeNode(c: string, properties: PropertyList = {}, texClass: number = null): MmlNode {\n    let text = (this.factory.create('text') as TextNode).setText(c);\n    let node = this.factory.create('mo', properties, [text]);\n    node.texClass = texClass;\n    node.parent = this;\n    return node;\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}