{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CommonMtextMixin = void 0;\nfunction CommonMtextMixin(Base) {\n  var _a;\n  return _a = function (_super) {\n    __extends(class_1, _super);\n    function class_1() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n    class_1.prototype.getVariant = function () {\n      var options = this.jax.options;\n      var data = this.jax.math.outputData;\n      var merror = (!!data.merrorFamily || !!options.merrorFont) && this.node.Parent.isKind('merror');\n      if (!!data.mtextFamily || !!options.mtextFont || merror) {\n        var variant = this.node.attributes.get('mathvariant');\n        var font = this.constructor.INHERITFONTS[variant] || this.jax.font.getCssFont(variant);\n        var family = font[0] || (merror ? data.merrorFamily || options.merrorFont : data.mtextFamily || options.mtextFont);\n        this.variant = this.explicitVariant(family, font[2] ? 'bold' : '', font[1] ? 'italic' : '');\n        return;\n      }\n      _super.prototype.getVariant.call(this);\n    };\n    return class_1;\n  }(Base), _a.INHERITFONTS = {\n    normal: ['', false, false],\n    bold: ['', false, true],\n    italic: ['', true, false],\n    'bold-italic': ['', true, true]\n  }, _a;\n}\nexports.CommonMtextMixin = CommonMtextMixin;","map":{"version":3,"names":["CommonMtextMixin","Base","_a","_super","__extends","class_1","prototype","getVariant","options","jax","data","math","outputData","merror","merrorFamily","merrorFont","node","Parent","isKind","mtextFamily","mtextFont","variant","attributes","get","font","constructor","INHERITFONTS","getCssFont","family","explicitVariant","call","normal","bold","italic","exports"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/output/common/Wrappers/mtext.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2019-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/**\n * @fileoverview  Implements the CommonMtext wrapper mixin for the MmlMtext object\n *\n * @author dpvc@mathjax.org (Davide Cervone)\n */\n\nimport {AnyWrapper, WrapperConstructor, Constructor} from '../Wrapper.js';\n\n/*****************************************************************/\n/**\n * The CommonMtext interface\n */\nexport interface CommonMtext extends AnyWrapper {\n}\n\n/**\n * Shorthand for the CommonMtext constructor\n */\nexport type MtextConstructor = Constructor<CommonMtext>;\n\n/*****************************************************************/\n/**\n *  The CommonMtext wrapper mixin for the MmlMtext object\n *\n * @template T  The Wrapper class constructor type\n */\nexport function CommonMtextMixin<T extends WrapperConstructor>(Base: T): MtextConstructor & T {\n\n  return class extends Base {\n\n    /**\n     * The font-family, weight, and style to use for the variants when mtextInheritFont\n     * is true or mtextFont is specified.  If not in this list, then the font's\n     * getCssFont() is called.  When the font family is not specified (as in these four),\n     * the inherited or specified font is used.\n     */\n    public static INHERITFONTS = {\n      normal: ['', false, false],\n      bold: ['', false, true],\n      italic: ['', true, false],\n      'bold-italic': ['', true, true]\n    };\n\n    /**\n     * @override\n     */\n    protected getVariant() {\n      const options = this.jax.options;\n      const data = this.jax.math.outputData;\n      //\n      //  If the font is to be inherited from the surrounding text, check the mathvariant\n      //  and see if it allows for inheritance. If so, set the variant appropriately,\n      //  otherwise get the usual variant.\n      //\n      const merror = ((!!data.merrorFamily || !!options.merrorFont) && this.node.Parent.isKind('merror'));\n      if (!!data.mtextFamily || !!options.mtextFont || merror) {\n        const variant = this.node.attributes.get('mathvariant') as string;\n        const font = (this.constructor as any).INHERITFONTS[variant] || this.jax.font.getCssFont(variant);\n        const family = font[0] || (merror ? data.merrorFamily || options.merrorFont :\n                                            data.mtextFamily || options.mtextFont);\n        this.variant = this.explicitVariant(family, font[2] ? 'bold' : '', font[1] ? 'italic' : '');\n        return;\n      }\n      super.getVariant();\n    }\n\n  };\n\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,SAAgBA,gBAAgBA,CAA+BC,IAAO;;EAEpE,OAAAC,EAAA,aAAAC,MAAA;IAAqBC,SAAA,CAAAC,OAAA,EAAAF,MAAA;IAAd,SAAAE,QAAA;;IAsCP;IApBYA,OAAA,CAAAC,SAAA,CAAAC,UAAU,GAApB;MACE,IAAMC,OAAO,GAAG,IAAI,CAACC,GAAG,CAACD,OAAO;MAChC,IAAME,IAAI,GAAG,IAAI,CAACD,GAAG,CAACE,IAAI,CAACC,UAAU;MAMrC,IAAMC,MAAM,GAAI,CAAC,CAAC,CAACH,IAAI,CAACI,YAAY,IAAI,CAAC,CAACN,OAAO,CAACO,UAAU,KAAK,IAAI,CAACC,IAAI,CAACC,MAAM,CAACC,MAAM,CAAC,QAAQ,CAAE;MACnG,IAAI,CAAC,CAACR,IAAI,CAACS,WAAW,IAAI,CAAC,CAACX,OAAO,CAACY,SAAS,IAAIP,MAAM,EAAE;QACvD,IAAMQ,OAAO,GAAG,IAAI,CAACL,IAAI,CAACM,UAAU,CAACC,GAAG,CAAC,aAAa,CAAW;QACjE,IAAMC,IAAI,GAAI,IAAI,CAACC,WAAmB,CAACC,YAAY,CAACL,OAAO,CAAC,IAAI,IAAI,CAACZ,GAAG,CAACe,IAAI,CAACG,UAAU,CAACN,OAAO,CAAC;QACjG,IAAMO,MAAM,GAAGJ,IAAI,CAAC,CAAC,CAAC,KAAKX,MAAM,GAAGH,IAAI,CAACI,YAAY,IAAIN,OAAO,CAACO,UAAU,GACvCL,IAAI,CAACS,WAAW,IAAIX,OAAO,CAACY,SAAS,CAAC;QAC1E,IAAI,CAACC,OAAO,GAAG,IAAI,CAACQ,eAAe,CAACD,MAAM,EAAEJ,IAAI,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,EAAE,EAAEA,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,EAAE,CAAC;QAC3F;;MAEFrB,MAAA,CAAAG,SAAA,CAAMC,UAAU,CAAAuB,IAAA,MAAE;IACpB,CAAC;IAEH,OAAAzB,OAAC;EAAD,CAAC,CAtCoBJ,IAAI,GAQTC,EAAA,CAAAwB,YAAY,GAAG;IAC3BK,MAAM,EAAE,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC;IAC1BC,IAAI,EAAE,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC;IACvBC,MAAM,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC;IACzB,aAAa,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI;GAC9B,E;AA2BN;AA1CAC,OAAA,CAAAlC,gBAAA,GAAAA,gBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}