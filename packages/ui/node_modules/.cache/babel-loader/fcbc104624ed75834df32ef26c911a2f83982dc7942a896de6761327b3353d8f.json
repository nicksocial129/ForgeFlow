{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar NodeUtil_js_1 = __importDefault(require(\"./NodeUtil.js\"));\nvar TexConstants_js_1 = require(\"./TexConstants.js\");\nvar ParseUtil_js_1 = __importDefault(require(\"./ParseUtil.js\"));\nvar ParseMethods;\n(function (ParseMethods) {\n  function variable(parser, c) {\n    var def = ParseUtil_js_1.default.getFontDef(parser);\n    var env = parser.stack.env;\n    if (env.multiLetterIdentifiers && env.font !== '') {\n      c = parser.string.substr(parser.i - 1).match(env.multiLetterIdentifiers)[0];\n      parser.i += c.length - 1;\n      if (def.mathvariant === TexConstants_js_1.TexConstant.Variant.NORMAL && env.noAutoOP && c.length > 1) {\n        def.autoOP = false;\n      }\n    }\n    var node = parser.create('token', 'mi', def, c);\n    parser.Push(node);\n  }\n  ParseMethods.variable = variable;\n  function digit(parser, c) {\n    var mml;\n    var pattern = parser.configuration.options['digits'];\n    var n = parser.string.slice(parser.i - 1).match(pattern);\n    var def = ParseUtil_js_1.default.getFontDef(parser);\n    if (n) {\n      mml = parser.create('token', 'mn', def, n[0].replace(/[{}]/g, ''));\n      parser.i += n[0].length - 1;\n    } else {\n      mml = parser.create('token', 'mo', def, c);\n    }\n    parser.Push(mml);\n  }\n  ParseMethods.digit = digit;\n  function controlSequence(parser, _c) {\n    var name = parser.GetCS();\n    parser.parse('macro', [parser, name]);\n  }\n  ParseMethods.controlSequence = controlSequence;\n  function mathchar0mi(parser, mchar) {\n    var def = mchar.attributes || {\n      mathvariant: TexConstants_js_1.TexConstant.Variant.ITALIC\n    };\n    var node = parser.create('token', 'mi', def, mchar.char);\n    parser.Push(node);\n  }\n  ParseMethods.mathchar0mi = mathchar0mi;\n  function mathchar0mo(parser, mchar) {\n    var def = mchar.attributes || {};\n    def['stretchy'] = false;\n    var node = parser.create('token', 'mo', def, mchar.char);\n    NodeUtil_js_1.default.setProperty(node, 'fixStretchy', true);\n    parser.configuration.addNode('fixStretchy', node);\n    parser.Push(node);\n  }\n  ParseMethods.mathchar0mo = mathchar0mo;\n  function mathchar7(parser, mchar) {\n    var def = mchar.attributes || {\n      mathvariant: TexConstants_js_1.TexConstant.Variant.NORMAL\n    };\n    if (parser.stack.env['font']) {\n      def['mathvariant'] = parser.stack.env['font'];\n    }\n    var node = parser.create('token', 'mi', def, mchar.char);\n    parser.Push(node);\n  }\n  ParseMethods.mathchar7 = mathchar7;\n  function delimiter(parser, delim) {\n    var def = delim.attributes || {};\n    def = Object.assign({\n      fence: false,\n      stretchy: false\n    }, def);\n    var node = parser.create('token', 'mo', def, delim.char);\n    parser.Push(node);\n  }\n  ParseMethods.delimiter = delimiter;\n  function environment(parser, env, func, args) {\n    var end = args[0];\n    var mml = parser.itemFactory.create('begin').setProperties({\n      name: env,\n      end: end\n    });\n    mml = func.apply(void 0, __spreadArray([parser, mml], __read(args.slice(1)), false));\n    parser.Push(mml);\n  }\n  ParseMethods.environment = environment;\n})(ParseMethods || (ParseMethods = {}));\nexports.default = ParseMethods;","map":{"version":3,"names":["NodeUtil_js_1","__importDefault","require","TexConstants_js_1","ParseUtil_js_1","ParseMethods","variable","parser","c","def","default","getFontDef","env","stack","multiLetterIdentifiers","font","string","substr","i","match","length","mathvariant","TexConstant","Variant","NORMAL","noAutoOP","autoOP","node","create","Push","digit","mml","pattern","configuration","options","n","slice","replace","controlSequence","_c","name","GetCS","parse","mathchar0mi","mchar","attributes","ITALIC","char","mathchar0mo","setProperty","addNode","mathchar7","delimiter","delim","Object","assign","fence","stretchy","environment","func","args","end","itemFactory","setProperties","apply","__spreadArray","__read","exports"],"sources":["/Users/nickprince/Desktop/Flowise Working Commit/node_modules/mathjax-full/ts/input/tex/ParseMethods.ts"],"sourcesContent":["/*************************************************************\n *\n *  Copyright (c) 2017-2022 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * @fileoverview Base methods for TeX Parsing.\n *\n * @author v.sorge@mathjax.org (Volker Sorge)\n */\n\nimport {Symbol} from './Symbol.js';\nimport TexParser from './TexParser.js';\nimport NodeUtil from './NodeUtil.js';\nimport {TexConstant} from './TexConstants.js';\nimport {MmlNode} from '../../core/MmlTree/MmlNode.js';\nimport ParseUtil from './ParseUtil.js';\n\n\nnamespace ParseMethods {\n\n  /**\n   * Handle a variable (a single letter or multi-letter if allowed).\n   * @param {TexParser} parser The current tex parser.\n   * @param {string} c The letter to transform into an mi.\n   */\n  export function variable(parser: TexParser, c: string) {\n    // @test Identifier Font\n    const def = ParseUtil.getFontDef(parser);\n    const env = parser.stack.env;\n    if (env.multiLetterIdentifiers && env.font !== '') {\n      c = parser.string.substr(parser.i - 1).match(env.multiLetterIdentifiers as any as RegExp)[0];\n      parser.i += c.length - 1;\n      if (def.mathvariant === TexConstant.Variant.NORMAL && env.noAutoOP && c.length > 1) {\n        def.autoOP = false;\n      }\n    }\n    // @test Identifier\n    const node = parser.create('token', 'mi', def, c);\n    parser.Push(node);\n  }\n\n\n  /**\n   * Handle a number (a sequence of digits, with decimal separator, etc.).\n   * @param {TexParser} parser The current tex parser.\n   * @param {string} c The first character of a number than can be parsed with\n   *     the digits pattern.\n   */\n  export function digit(parser: TexParser, c: string) {\n    let mml: MmlNode;\n    const pattern = parser.configuration.options['digits'];\n    const n = parser.string.slice(parser.i - 1).match(pattern);\n    // @test Integer Font\n    const def = ParseUtil.getFontDef(parser);\n    if (n) {\n      // @test Integer, Number, Decimal (European)\n      mml = parser.create('token', 'mn', def, n[0].replace(/[{}]/g, ''));\n      parser.i += n[0].length - 1;\n    } else {\n      // @test Decimal Point, Decimal Point European\n      mml = parser.create('token', 'mo', def, c);\n    }\n    parser.Push(mml);\n  }\n\n  /**\n   * Lookup a control-sequence and process it.\n   * @param {TexParser} parser The current tex parser.\n   * @param {string} c The string '\\'.\n   */\n  export function controlSequence(parser: TexParser, _c: string) {\n    const name = parser.GetCS();\n    parser.parse('macro', [parser, name]);\n  }\n\n\n  /**\n   * Handle normal mathchar (as an mi).\n   * @param {TexParser} parser The current tex parser.\n   * @param {Symbol} mchar The parsed symbol.\n   */\n  export function mathchar0mi(parser: TexParser, mchar: Symbol) {\n    const def = mchar.attributes || {mathvariant: TexConstant.Variant.ITALIC};\n    // @test Greek\n    const node = parser.create('token', 'mi', def, mchar.char);\n    parser.Push(node);\n  }\n\n  /**\n   * Handle normal mathchar (as an mo).\n   * @param {TexParser} parser The current tex parser.\n   * @param {Symbol} mchar The parsed symbol.\n   */\n  export function mathchar0mo(parser: TexParser, mchar: Symbol) {\n    const def = mchar.attributes || {};\n    def['stretchy'] = false;\n    // @test Large Set\n    const node = parser.create('token', 'mo', def, mchar.char);\n    NodeUtil.setProperty(node, 'fixStretchy', true);\n    parser.configuration.addNode('fixStretchy', node);\n    // PROBLEM: Attributes stop working when Char7 are explicitly set.\n    parser.Push(node);\n  }\n\n  /**\n   * Handle mathchar in current family.\n   * @param {TexParser} parser The current tex parser.\n   * @param {Symbol} mchar The parsed symbol.\n   */\n  export function mathchar7(parser: TexParser, mchar: Symbol) {\n    const def = mchar.attributes || {mathvariant: TexConstant.Variant.NORMAL};\n    if (parser.stack.env['font']) {\n      // @test MathChar7 Single Font\n      def['mathvariant'] = parser.stack.env['font'];\n    }\n    // @test MathChar7 Single, MathChar7 Operator, MathChar7 Multi\n    const node = parser.create('token', 'mi', def, mchar.char);\n    parser.Push(node);\n  }\n\n  /**\n   * Handle delimiter.\n   * @param {TexParser} parser The current tex parser.\n   * @param {Symbol} delim The parsed delimiter symbol.\n   */\n  export function delimiter(parser: TexParser, delim: Symbol) {\n    let def = delim.attributes || {};\n    // @test Fenced2, Delimiter (AMS)\n    def = Object.assign({fence: false, stretchy: false}, def);\n    const node = parser.create('token', 'mo', def, delim.char);\n    parser.Push(node);\n  }\n\n\n  /**\n   * Parse an environment.\n   * @param {TexParser} parser The current tex parser.\n   * @param {string} env The name of the environment.\n   * @param {Function} func The parse method for the environment.\n   * @param {any[]} args A list of additional arguments.\n   */\n  export function environment(parser: TexParser, env: string, func: Function, args: any[]) {\n    const end = args[0];\n    let mml = parser.itemFactory.create('begin').setProperties({name: env, end: end});\n    mml = func(parser, mml, ...args.slice(1));\n    parser.Push(mml);\n  }\n\n}\n\nexport default ParseMethods;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}