{"version":3,"file":"static/js/7128.32a50c69.chunk.js","mappings":"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","sources":["api/tools.js","ui-component/dialog/AdditionalParamsDialog.js","ui-component/markdown/CodeBlock.js","ui-component/markdown/MemoizedReactMarkdown.js","ui-component/grid/DataGrid.js","ui-component/dialog/FormatPromptValuesDialog.js","assets/images/prompt_empty.svg","api/prompt.js","ui-component/dialog/PromptLangsmithHubDialog.js","views/canvas/NodeInputHandler.js","views/canvas/NodeOutputHandler.js","ui-component/grid/Grid.js","views/tools/ToolDialog.js"],"sourcesContent":["import client from './client'\n\nconst getAllTools = () => client.get('/tools')\n\nconst getSpecificTool = (id) => client.get(`/tools/${id}`)\n\nconst createNewTool = (body) => client.post(`/tools`, body)\n\nconst updateTool = (id, body) => client.put(`/tools/${id}`, body)\n\nconst deleteTool = (id) => client.delete(`/tools/${id}`)\n\nexport default {\n    getAllTools,\n    getSpecificTool,\n    createNewTool,\n    updateTool,\n    deleteTool\n}\n","import { createPortal } from 'react-dom'\nimport { useDispatch } from 'react-redux'\nimport { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Dialog, DialogContent } from '@mui/material'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport NodeInputHandler from 'views/canvas/NodeInputHandler'\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\n\nconst AdditionalParamsDialog = ({ show, dialogProps, onCancel }) => {\n    const portalElement = document.getElementById('portal')\n    const dispatch = useDispatch()\n\n    const [inputParams, setInputParams] = useState([])\n    const [data, setData] = useState({})\n\n    useEffect(() => {\n        if (dialogProps.inputParams) setInputParams(dialogProps.inputParams)\n        if (dialogProps.data) setData(dialogProps.data)\n\n        return () => {\n            setInputParams([])\n            setData({})\n        }\n    }, [dialogProps])\n\n    useEffect(() => {\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\n    }, [show, dispatch])\n\n    const component = show ? (\n        <Dialog\n            onClose={onCancel}\n            open={show}\n            fullWidth\n            maxWidth='sm'\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogContent>\n                <PerfectScrollbar\n                    style={{\n                        height: '100%',\n                        maxHeight: 'calc(100vh - 220px)',\n                        overflowX: 'hidden'\n                    }}\n                >\n                    {inputParams.map((inputParam, index) => (\n                        <NodeInputHandler\n                            disabled={dialogProps.disabled}\n                            key={index}\n                            inputParam={inputParam}\n                            data={data}\n                            isAdditionalParams={true}\n                        />\n                    ))}\n                </PerfectScrollbar>\n            </DialogContent>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nAdditionalParamsDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onCancel: PropTypes.func\n}\n\nexport default AdditionalParamsDialog\n","import { IconClipboard, IconDownload } from '@tabler/icons'\nimport { memo, useState } from 'react'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism'\nimport PropTypes from 'prop-types'\nimport { Box, IconButton, Popover, Typography } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\n\nconst programmingLanguages = {\n    javascript: '.js',\n    python: '.py',\n    java: '.java',\n    c: '.c',\n    cpp: '.cpp',\n    'c++': '.cpp',\n    'c#': '.cs',\n    ruby: '.rb',\n    php: '.php',\n    swift: '.swift',\n    'objective-c': '.m',\n    kotlin: '.kt',\n    typescript: '.ts',\n    go: '.go',\n    perl: '.pl',\n    rust: '.rs',\n    scala: '.scala',\n    haskell: '.hs',\n    lua: '.lua',\n    shell: '.sh',\n    sql: '.sql',\n    html: '.html',\n    css: '.css'\n}\n\nexport const CodeBlock = memo(({ language, chatflowid, isDialog, value }) => {\n    const theme = useTheme()\n    const [anchorEl, setAnchorEl] = useState(null)\n    const openPopOver = Boolean(anchorEl)\n\n    const handleClosePopOver = () => {\n        setAnchorEl(null)\n    }\n\n    const copyToClipboard = (event) => {\n        if (!navigator.clipboard || !navigator.clipboard.writeText) {\n            return\n        }\n\n        navigator.clipboard.writeText(value)\n        setAnchorEl(event.currentTarget)\n        setTimeout(() => {\n            handleClosePopOver()\n        }, 1500)\n    }\n\n    const downloadAsFile = () => {\n        const fileExtension = programmingLanguages[language] || '.file'\n        const suggestedFileName = `file-${chatflowid}${fileExtension}`\n        const fileName = suggestedFileName\n\n        if (!fileName) {\n            // user pressed cancel on prompt\n            return\n        }\n\n        const blob = new Blob([value], { type: 'text/plain' })\n        const url = URL.createObjectURL(blob)\n        const link = document.createElement('a')\n        link.download = fileName\n        link.href = url\n        link.style.display = 'none'\n        document.body.appendChild(link)\n        link.click()\n        document.body.removeChild(link)\n        URL.revokeObjectURL(url)\n    }\n\n    return (\n        <div style={{ width: isDialog ? '' : 300 }}>\n            <Box sx={{ color: 'white', background: theme.palette?.common.dark, p: 1, borderTopLeftRadius: 10, borderTopRightRadius: 10 }}>\n                <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n                    {language}\n                    <div style={{ flex: 1 }}></div>\n                    <IconButton size='small' title='Copy' color='success' onClick={copyToClipboard}>\n                        <IconClipboard />\n                    </IconButton>\n                    <Popover\n                        open={openPopOver}\n                        anchorEl={anchorEl}\n                        onClose={handleClosePopOver}\n                        anchorOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right'\n                        }}\n                        transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'left'\n                        }}\n                    >\n                        <Typography variant='h6' sx={{ pl: 1, pr: 1, color: 'white', background: theme.palette.success.dark }}>\n                            Copied!\n                        </Typography>\n                    </Popover>\n                    <IconButton size='small' title='Download' color='primary' onClick={downloadAsFile}>\n                        <IconDownload />\n                    </IconButton>\n                </div>\n            </Box>\n\n            <SyntaxHighlighter language={language} style={oneDark} customStyle={{ margin: 0 }}>\n                {value}\n            </SyntaxHighlighter>\n        </div>\n    )\n})\nCodeBlock.displayName = 'CodeBlock'\n\nCodeBlock.propTypes = {\n    language: PropTypes.string,\n    chatflowid: PropTypes.string,\n    isDialog: PropTypes.bool,\n    value: PropTypes.string\n}\n","import { memo } from 'react'\nimport ReactMarkdown from 'react-markdown'\n\nexport const MemoizedReactMarkdown = memo(ReactMarkdown, (prevProps, nextProps) => prevProps.children === nextProps.children)\n","import PropTypes from 'prop-types'\nimport { useState, useCallback } from 'react'\nimport { DataGrid as MUIDataGrid, GridActionsCellItem } from '@mui/x-data-grid'\nimport { IconPlus } from '@tabler/icons'\nimport { Button } from '@mui/material'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport { cloneDeep } from 'lodash'\nimport { formatDataGridRows } from 'utils/genericHelper'\n\nexport const DataGrid = ({ columns, rows, style, disabled = false, hideFooter = false, onChange }) => {\n    const [rowValues, setRowValues] = useState(formatDataGridRows(rows) ?? [])\n\n    const deleteItem = useCallback(\n        (id) => () => {\n            let updatedRows = []\n            setRowValues((prevRows) => {\n                let allRows = [...cloneDeep(prevRows)]\n                allRows = allRows.filter((row) => row.id !== id)\n                updatedRows = allRows\n                return allRows\n            })\n            onChange(JSON.stringify(updatedRows))\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        []\n    )\n\n    const addCols = (columns) => {\n        return [\n            ...columns,\n            {\n                field: 'actions',\n                type: 'actions',\n                width: 80,\n                getActions: (params) => [\n                    <GridActionsCellItem key={'Delete'} icon={<DeleteIcon />} label='Delete' onClick={deleteItem(params.id)} />\n                ]\n            }\n        ]\n    }\n\n    const colValues = addCols(columns)\n\n    const handleProcessRowUpdate = (newRow) => {\n        let updatedRows = []\n        setRowValues((prevRows) => {\n            let allRows = [...cloneDeep(prevRows)]\n            const indexToUpdate = allRows.findIndex((row) => row.id === newRow.id)\n            if (indexToUpdate >= 0) {\n                allRows[indexToUpdate] = { ...newRow }\n            }\n            updatedRows = allRows\n            return allRows\n        })\n        onChange(JSON.stringify(updatedRows))\n        return newRow\n    }\n\n    const getEmptyJsonObj = () => {\n        const obj = {}\n        for (let i = 0; i < colValues.length; i += 1) {\n            obj[colValues[i]?.field] = ''\n        }\n        return obj\n    }\n\n    const addNewRow = () => {\n        setRowValues((prevRows) => {\n            let allRows = [...cloneDeep(prevRows)]\n            const lastRowId = allRows.length ? allRows[allRows.length - 1].id + 1 : 1\n            allRows.push({\n                ...getEmptyJsonObj(),\n                id: lastRowId\n            })\n            return allRows\n        })\n    }\n\n    return (\n        <>\n            {rowValues && colValues && (\n                <div style={{ marginTop: 10, height: 210, width: '100%', ...style }}>\n                    <MUIDataGrid\n                        processRowUpdate={handleProcessRowUpdate}\n                        isCellEditable={() => {\n                            return !disabled\n                        }}\n                        hideFooter={hideFooter}\n                        onProcessRowUpdateError={(error) => console.error(error)}\n                        rows={rowValues}\n                        columns={colValues}\n                    />\n                </div>\n            )}\n            {!disabled && (\n                <Button sx={{ mt: 1 }} variant='outlined' onClick={addNewRow} startIcon={<IconPlus />}>\n                    Add Item\n                </Button>\n            )}\n        </>\n    )\n}\n\nDataGrid.propTypes = {\n    rows: PropTypes.array,\n    columns: PropTypes.array,\n    style: PropTypes.any,\n    disabled: PropTypes.bool,\n    hideFooter: PropTypes.bool,\n    onChange: PropTypes.func\n}\n","import { useEffect } from 'react'\nimport { createPortal } from 'react-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { Dialog, DialogContent, DialogTitle } from '@mui/material'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { JsonEditorInput } from 'ui-component/json/JsonEditor'\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\n\nconst FormatPromptValuesDialog = ({ show, dialogProps, onChange, onCancel }) => {\n    const portalElement = document.getElementById('portal')\n    const customization = useSelector((state) => state.customization)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\n    }, [show, dispatch])\n\n    const component = show ? (\n        <Dialog\n            onClose={onCancel}\n            open={show}\n            fullWidth\n            maxWidth='sm'\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                Format Prompt Values\n            </DialogTitle>\n            <DialogContent>\n                <PerfectScrollbar\n                    style={{\n                        height: '100%',\n                        maxHeight: 'calc(100vh - 220px)',\n                        overflowX: 'hidden'\n                    }}\n                >\n                    <JsonEditorInput\n                        onChange={(newValue) => onChange(newValue)}\n                        value={dialogProps.value}\n                        isDarkMode={customization.isDarkMode}\n                        inputParam={dialogProps.inputParam}\n                        nodes={dialogProps.nodes}\n                        edges={dialogProps.edges}\n                        nodeId={dialogProps.nodeId}\n                    />\n                </PerfectScrollbar>\n            </DialogContent>\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nFormatPromptValuesDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onChange: PropTypes.func,\n    onCancel: PropTypes.func\n}\n\nexport default FormatPromptValuesDialog\n","var _circle, _circle2, _circle3, _circle4, _circle5, _circle6, _circle7, _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _path19, _path20, _path21, _path22, _path23, _path24, _path25, _path26, _path27, _rect, _polygon, _rect2, _path28, _path29, _rect3, _circle8, _circle9, _circle10, _circle11, _rect4, _path30, _path31, _path32, _path33, _path34, _path35, _path36, _path37, _path38, _path39, _path40, _path41;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgPromptEmpty(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"data-name\": \"Layer 1\",\n    width: 855.41839,\n    height: 610.77534,\n    viewBox: \"0 0 855.41839 610.77534\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 39.53587,\n    cy: 110.72662,\n    r: 13.63057,\n    fill: \"#e6e6e6\"\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 80.42757,\n    cy: 110.72662,\n    r: 13.63057,\n    fill: \"#e6e6e6\"\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 121.31927,\n    cy: 110.72662,\n    r: 13.63057,\n    fill: \"#e6e6e6\"\n  })), _circle4 || (_circle4 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 162.21097,\n    cy: 110.72662,\n    r: 13.63057,\n    fill: \"#e6e6e6\"\n  })), _circle5 || (_circle5 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 203.10267,\n    cy: 110.72662,\n    r: 13.63057,\n    fill: \"#e6e6e6\"\n  })), _circle6 || (_circle6 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 243.99437,\n    cy: 110.72662,\n    r: 13.63057,\n    fill: \"#e6e6e6\"\n  })), _circle7 || (_circle7 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 284.88607,\n    cy: 110.72662,\n    r: 13.63057,\n    fill: \"#e6e6e6\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M488.67447,271.93783H180.32909a5.55346,5.55346,0,0,1-5.54693-5.54693V244.28714a5.55345,5.55345,0,0,1,5.54693-5.54693H488.67447a5.55346,5.55346,0,0,1,5.54693,5.54693V266.3909A5.55347,5.55347,0,0,1,488.67447,271.93783ZM180.32909,240.959a3.3318,3.3318,0,0,0-3.32816,3.32816V266.3909a3.3318,3.3318,0,0,0,3.32816,3.32815H488.67447a3.33179,3.33179,0,0,0,3.32815-3.32815V244.28714a3.33179,3.33179,0,0,0-3.32815-3.32816Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#e6e6e6\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M246.31694,147.79938a3.19065,3.19065,0,0,1,3.187,3.187V220.049a3.19065,3.19065,0,0,1-3.187,3.187h-67.652a3.19065,3.19065,0,0,1-3.187-3.187V150.98643a3.19065,3.19065,0,0,1,3.187-3.187h67.652m0-3.18705h-67.652a6.3741,6.3741,0,0,0-6.3741,6.3741V220.049a6.3741,6.3741,0,0,0,6.3741,6.3741h67.652a6.37411,6.37411,0,0,0,6.3741-6.3741V150.98643a6.37411,6.37411,0,0,0-6.3741-6.3741Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#e6e6e6\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M235.76469,165.95293H190.62778a1.59353,1.59353,0,1,1,0-3.187h45.13691a1.59353,1.59353,0,1,1,0,3.187Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M235.76469,177.23755H190.62778a1.59353,1.59353,0,1,1,0-3.187h45.13691a1.59353,1.59353,0,1,1,0,3.187Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M235.76469,188.52139H190.62778a1.59353,1.59353,0,1,1,0-3.187h45.13691a1.59353,1.59353,0,1,1,0,3.187Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M235.76469,199.806H190.62778a1.59353,1.59353,0,1,1,0-3.187h45.13691a1.59353,1.59353,0,1,1,0,3.187Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M235.76469,211.09063H190.62778a1.59353,1.59353,0,1,1,0-3.18706h45.13691a1.59353,1.59353,0,0,1,0,3.18706Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M477.37812,147.79938a3.19065,3.19065,0,0,1,3.187,3.187V220.049a3.19065,3.19065,0,0,1-3.187,3.187h-67.652a3.19065,3.19065,0,0,1-3.187-3.187V150.98643a3.19065,3.19065,0,0,1,3.187-3.187h67.652m0-3.18705h-67.652a6.3741,6.3741,0,0,0-6.3741,6.3741V220.049a6.3741,6.3741,0,0,0,6.3741,6.3741h67.652a6.3741,6.3741,0,0,0,6.3741-6.3741V150.98643a6.3741,6.3741,0,0,0-6.3741-6.3741Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#e6e6e6\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M466.82588,165.95293H421.689a1.59353,1.59353,0,1,1,0-3.187h45.13692a1.59353,1.59353,0,0,1,0,3.187Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M466.82588,177.23755H421.689a1.59353,1.59353,0,1,1,0-3.187h45.13692a1.59353,1.59353,0,0,1,0,3.187Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M466.82588,188.52139H421.689a1.59353,1.59353,0,1,1,0-3.187h45.13692a1.59353,1.59353,0,0,1,0,3.187Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M466.82588,199.806H421.689a1.59353,1.59353,0,1,1,0-3.187h45.13692a1.59353,1.59353,0,0,1,0,3.187Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M466.82588,211.09063H421.689a1.59353,1.59353,0,1,1,0-3.18706h45.13692a1.59353,1.59353,0,0,1,0,3.18706Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M707.317,280.59077a3.19065,3.19065,0,0,1,3.187,3.187v69.06255a3.19066,3.19066,0,0,1-3.187,3.187H639.665a3.19066,3.19066,0,0,1-3.187-3.187V283.77782a3.19065,3.19065,0,0,1,3.187-3.187h67.652m0-3.187H639.665a6.3741,6.3741,0,0,0-6.3741,6.3741v69.06255a6.3741,6.3741,0,0,0,6.3741,6.3741h67.652a6.37411,6.37411,0,0,0,6.3741-6.3741V283.77782a6.3741,6.3741,0,0,0-6.3741-6.3741Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M696.76476,298.74432H651.62784a1.59353,1.59353,0,1,1,0-3.187h45.13692a1.59353,1.59353,0,0,1,0,3.187Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M696.76476,310.02894H651.62784a1.59353,1.59353,0,0,1,0-3.18706h45.13692a1.59353,1.59353,0,0,1,0,3.18706Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M696.76476,321.31278H651.62784a1.59352,1.59352,0,1,1,0-3.187h45.13692a1.59353,1.59353,0,0,1,0,3.187Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M696.76476,332.59739H651.62784a1.59353,1.59353,0,1,1,0-3.187h45.13692a1.59353,1.59353,0,0,1,0,3.187Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M696.76476,343.882H651.62784a1.59353,1.59353,0,1,1,0-3.187h45.13692a1.59353,1.59353,0,0,1,0,3.187Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M362.73282,226.42308H293.30943a7.08972,7.08972,0,0,1-7.08139-7.08138V169.66541a7.08988,7.08988,0,0,1,7.08139-7.08216h69.42339a7.09,7.09,0,0,1,7.08217,7.08216V219.3417A7.08988,7.08988,0,0,1,362.73282,226.42308ZM293.30943,165.7703a3.89917,3.89917,0,0,0-3.89434,3.89511V219.3417a3.89851,3.89851,0,0,0,3.89434,3.89433h69.42339a3.89917,3.89917,0,0,0,3.89511-3.89433V169.66541a3.89983,3.89983,0,0,0-3.89511-3.89511Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#e6e6e6\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M350.59,184.81246H305.45305a1.59353,1.59353,0,0,1,0-3.187H350.59a1.59353,1.59353,0,1,1,0,3.187Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M350.59,196.09708H305.45305a1.59353,1.59353,0,0,1,0-3.187H350.59a1.59353,1.59353,0,1,1,0,3.187Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M350.59,207.38092H305.45305a1.59353,1.59353,0,0,1,0-3.187H350.59a1.59353,1.59353,0,1,1,0,3.187Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path24 || (_path24 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M593.09111,253.95025,526.41486,234.6141a7.08971,7.08971,0,0,1-4.82882-8.77351l13.83608-47.71054a7.08988,7.08988,0,0,1,8.77372-4.82958l66.67625,19.33615a7.09,7.09,0,0,1,4.82935,8.77447l-13.83608,47.71055A7.08988,7.08988,0,0,1,593.09111,253.95025Zm-49.78294-77.58884a3.89916,3.89916,0,0,0-4.82511,2.65631L524.647,226.72827a3.89851,3.89851,0,0,0,2.65557,4.8249l66.67624,19.33614a3.89918,3.89918,0,0,0,4.82565-2.65535l13.83608-47.71054a3.89985,3.89985,0,0,0-2.65609-4.82587Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#e6e6e6\"\n  })), _path25 || (_path25 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M593.01835,210.60411l-43.3508-12.57175a1.59353,1.59353,0,0,1,.88767-3.06094L593.906,207.54318a1.59352,1.59352,0,1,1-.88768,3.06093Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path26 || (_path26 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M589.87531,221.44219,546.5245,208.87043a1.59352,1.59352,0,1,1,.88767-3.06093L590.763,218.38125a1.59353,1.59353,0,0,1-.88767,3.06094Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path27 || (_path27 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M586.73248,232.27951l-43.35081-12.57175a1.59353,1.59353,0,0,1,.88767-3.06094l43.35081,12.57176a1.59352,1.59352,0,0,1-.88767,3.06093Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 156.10589,\n    y: 607.77534,\n    width: 699.3125,\n    height: 3,\n    fill: \"#e6e6e6\"\n  })), _polygon || (_polygon = /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"562.14 603.085 448.421 603.085 452.276 552.973 558.285 552.973 562.14 603.085\",\n    fill: \"#e6e6e6\"\n  })), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 442.63878,\n    y: 597.3034,\n    width: 127.21043,\n    height: 11.5646,\n    fill: \"#e6e6e6\"\n  })), _path28 || (_path28 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M895.37073,374.74021H460.73514a11.56458,11.56458,0,0,0-11.56458,11.56458h0V651.3265H906.93533V386.30479a11.56457,11.56457,0,0,0-11.56456-11.56458Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#3f3d56\"\n  })), _path29 || (_path29 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M449.17056,651.3265v43.36719a11.56457,11.56457,0,0,0,11.56458,11.56457H895.37073a11.56459,11.56459,0,0,0,11.5646-11.56457h0V651.3265Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#e6e6e6\"\n  })), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 300.00891,\n    y: 254.22076,\n    width: 412.47016,\n    height: 231.29169,\n    fill: \"#e6e6e6\"\n  })), _circle8 || (_circle8 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 506.244,\n    cy: 533.69821,\n    r: 11.56459,\n    fill: \"#3f3d56\"\n  })), _circle9 || (_circle9 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 312.86987,\n    cy: 261.79534,\n    r: 2.19466,\n    fill: \"#fff\"\n  })), _circle10 || (_circle10 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 321.20026,\n    cy: 261.79534,\n    r: 2.19466,\n    fill: \"#fff\"\n  })), _circle11 || (_circle11 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 329.53064,\n    cy: 261.79534,\n    r: 2.19466,\n    fill: \"#fff\"\n  })), _rect4 || (_rect4 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 310.6752,\n    y: 269.25275,\n    width: 389.91608,\n    height: 194.24707,\n    fill: \"#fff\"\n  })), _path30 || (_path30 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M508.885,443.41111a1.37973,1.37973,0,0,0-1.37842,1.37842v69.67578a1.37973,1.37973,0,0,0,1.37842,1.37841H589.3493a1.37973,1.37973,0,0,0,1.37842-1.37841V444.78953a1.37973,1.37973,0,0,0-1.37842-1.37842Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#e6e6e6\"\n  })), _path31 || (_path31 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M638.08075,443.63523a1.37984,1.37984,0,0,0-1.37891,1.37842v69.45166a1.37984,1.37984,0,0,0,1.37891,1.37841h80.208a1.37963,1.37963,0,0,0,1.37793-1.37841V445.01365a1.37963,1.37963,0,0,0-1.37793-1.37842Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#e6e6e6\"\n  })), _path32 || (_path32 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M765.92157,442.9072a1.37963,1.37963,0,0,0-1.37793,1.37842v70.17969a1.37962,1.37962,0,0,0,1.37793,1.37841h81.042a1.37962,1.37962,0,0,0,1.37793-1.37841V444.28562a1.37963,1.37963,0,0,0-1.37793-1.37842Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#e6e6e6\"\n  })), _path33 || (_path33 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M510.35614,550.333a2.84986,2.84986,0,0,0,0,5.69971h75.65234a2.84986,2.84986,0,0,0,0-5.69971Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#e6e6e6\"\n  })), _path34 || (_path34 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M510.35614,563.88865a2.8501,2.8501,0,0,0,0,5.70019h34.062a2.8501,2.8501,0,0,0,0-5.70019Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path35 || (_path35 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M640.94012,550.333a2.84986,2.84986,0,0,0,0,5.69971h75.65235a2.84986,2.84986,0,0,0,0-5.69971Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#e6e6e6\"\n  })), _path36 || (_path36 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M640.94012,563.88865a2.8501,2.8501,0,0,0,0,5.70019h34.0625a2.8501,2.8501,0,0,0,0-5.70019Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })), _path37 || (_path37 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M768.26044,550.333a2.84986,2.84986,0,0,0,0,5.69971h75.65234a2.84986,2.84986,0,0,0,0-5.69971Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#e6e6e6\"\n  })), _path38 || (_path38 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M510.35614,536.333a2.84986,2.84986,0,0,0,0,5.69971h75.65234a2.84986,2.84986,0,0,0,0-5.69971Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#e6e6e6\"\n  })), _path39 || (_path39 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M640.94012,536.333a2.84986,2.84986,0,0,0,0,5.69971h75.65235a2.84986,2.84986,0,0,0,0-5.69971Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#e6e6e6\"\n  })), _path40 || (_path40 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M768.26044,536.333a2.84986,2.84986,0,0,0,0,5.69971h75.65234a2.84986,2.84986,0,0,0,0-5.69971Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#e6e6e6\"\n  })), _path41 || (_path41 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M768.26044,563.88865a2.8501,2.8501,0,0,0,0,5.70019H802.322a2.8501,2.8501,0,0,0,0-5.70019Z\",\n    transform: \"translate(-172.29081 -144.61233)\",\n    fill: \"#673ab7\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPromptEmpty);\nexport default __webpack_public_path__ + \"static/media/prompt_empty.a1ca2ca513d897311b06ef76ffa5b87a.svg\";\nexport { ForwardRef as ReactComponent };","import client from './client'\n\nconst getAvailablePrompts = (body) => client.post(`/prompts-list`, body)\nconst getPrompt = (body) => client.post(`/load-prompt`, body)\n\nexport default {\n    getAvailablePrompts,\n    getPrompt\n}\n","import { createPortal } from 'react-dom'\nimport { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport rehypeMathjax from 'rehype-mathjax'\nimport rehypeRaw from 'rehype-raw'\nimport remarkGfm from 'remark-gfm'\nimport remarkMath from 'remark-math'\n\n// MUI\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Chip,\n    Grid,\n    InputLabel,\n    List,\n    ListItemButton,\n    ListItemText,\n    OutlinedInput,\n    Select,\n    Typography,\n    Stack,\n    IconButton,\n    FormControl,\n    Checkbox,\n    MenuItem\n} from '@mui/material'\nimport MuiAccordion from '@mui/material/Accordion'\nimport MuiAccordionSummary from '@mui/material/AccordionSummary'\nimport MuiAccordionDetails from '@mui/material/AccordionDetails'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport ArrowForwardIosSharpIcon from '@mui/icons-material/ArrowForwardIosSharp'\nimport ClearIcon from '@mui/icons-material/Clear'\nimport { styled } from '@mui/material/styles'\n\n//Project Import\nimport { StyledButton } from 'ui-component/button/StyledButton'\nimport { MemoizedReactMarkdown } from 'ui-component/markdown/MemoizedReactMarkdown'\nimport { CodeBlock } from 'ui-component/markdown/CodeBlock'\nimport promptEmptySVG from 'assets/images/prompt_empty.svg'\n\nimport useApi from 'hooks/useApi'\nimport promptApi from 'api/prompt'\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\n\nconst NewLineToBr = ({ children = '' }) => {\n    return children.split('\\n').reduce(function (arr, line) {\n        return arr.concat(line, <br />)\n    }, [])\n}\n\nconst Accordion = styled((props) => <MuiAccordion disableGutters elevation={0} square {...props} />)(({ theme }) => ({\n    border: `1px solid ${theme.palette.divider}`,\n    '&:not(:last-child)': {\n        borderBottom: 0\n    },\n    '&:before': {\n        display: 'none'\n    }\n}))\n\nconst AccordionSummary = styled((props) => (\n    <MuiAccordionSummary expandIcon={<ArrowForwardIosSharpIcon sx={{ fontSize: '0.9rem' }} />} {...props} />\n))(({ theme }) => ({\n    backgroundColor: theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, .05)' : 'rgba(0, 0, 0, .03)',\n    flexDirection: 'row-reverse',\n    '& .MuiAccordionSummary-expandIconWrapper.Mui-expanded': {\n        transform: 'rotate(180deg)'\n    },\n    '& .MuiAccordionSummary-content': {\n        marginLeft: theme.spacing(1)\n    }\n}))\n\nconst AccordionDetails = styled(MuiAccordionDetails)(({ theme }) => ({\n    padding: theme.spacing(2),\n    borderTop: '1px solid rgba(0, 0, 0, .125)'\n}))\n\nconst PromptLangsmithHubDialog = ({ promptType, show, onCancel, onSubmit }) => {\n    const portalElement = document.getElementById('portal')\n    const dispatch = useDispatch()\n    const customization = useSelector((state) => state.customization)\n    const getAvailablePromptsApi = useApi(promptApi.getAvailablePrompts)\n\n    useEffect(() => {\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [show, dispatch])\n\n    useEffect(() => {\n        if (promptType) {\n            getAvailablePromptsApi.request({ tags: promptType === 'template' ? 'StringPromptTemplate&' : 'ChatPromptTemplate&' })\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [promptType])\n\n    useEffect(() => {\n        if (getAvailablePromptsApi.data && getAvailablePromptsApi.data.repos) {\n            setAvailablePrompNameList(getAvailablePromptsApi.data.repos)\n            if (getAvailablePromptsApi.data.repos?.length) handleListItemClick(0, getAvailablePromptsApi.data.repos)\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [getAvailablePromptsApi.data])\n\n    const ITEM_HEIGHT = 48\n    const ITEM_PADDING_TOP = 8\n    const MenuProps = {\n        PaperProps: {\n            style: {\n                maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n                width: 250\n            }\n        }\n    }\n\n    const models = [\n        { id: 101, name: 'anthropic:claude-instant-1' },\n        { id: 102, name: 'anthropic:claude-instant-1.2' },\n        { id: 103, name: 'anthropic:claude-2' },\n        { id: 104, name: 'google:palm-2-chat-bison' },\n        { id: 105, name: 'google:palm-2-codechat-bison' },\n        { id: 106, name: 'google:palm-2-text-bison' },\n        { id: 107, name: 'meta:llama-2-13b-chat' },\n        { id: 108, name: 'meta:llama-2-70b-chat' },\n        { id: 109, name: 'openai:gpt-3.5-turbo' },\n        { id: 110, name: 'openai:gpt-4' },\n        { id: 111, name: 'openai:text-davinci-003' }\n    ]\n    const [modelName, setModelName] = useState([])\n\n    const usecases = [\n        { id: 201, name: 'Agents' },\n        { id: 202, name: 'Agent Stimulation' },\n        { id: 203, name: 'Autonomous agents' },\n        { id: 204, name: 'Classification' },\n        { id: 205, name: 'Chatbots' },\n        { id: 206, name: 'Code understanding' },\n        { id: 207, name: 'Code writing' },\n        { id: 208, name: 'Evaluation' },\n        { id: 209, name: 'Extraction' },\n        { id: 210, name: 'Interacting with APIs' },\n        { id: 211, name: 'Multi-modal' },\n        { id: 212, name: 'QA over documents' },\n        { id: 213, name: 'Self-checking' },\n        { id: 214, name: 'SQL' },\n        { id: 215, name: 'Summarization' },\n        { id: 216, name: 'Tagging' }\n    ]\n    const [usecase, setUsecase] = useState([])\n\n    const languages = [\n        { id: 301, name: 'Chinese' },\n        { id: 302, name: 'English' },\n        { id: 303, name: 'French' },\n        { id: 304, name: 'German' },\n        { id: 305, name: 'Russian' },\n        { id: 306, name: 'Spanish' }\n    ]\n    const [language, setLanguage] = useState([])\n    const [availablePrompNameList, setAvailablePrompNameList] = useState([])\n    const [selectedPrompt, setSelectedPrompt] = useState({})\n\n    const [accordionExpanded, setAccordionExpanded] = useState(['prompt'])\n\n    const handleAccordionChange = (accordionName) => (event, isExpanded) => {\n        const accordians = [...accordionExpanded]\n        if (!isExpanded) setAccordionExpanded(accordians.filter((accr) => accr !== accordionName))\n        else {\n            accordians.push(accordionName)\n            setAccordionExpanded(accordians)\n        }\n    }\n\n    const handleListItemClick = async (index, overridePromptNameList = []) => {\n        const prompt = overridePromptNameList.length ? overridePromptNameList[index] : availablePrompNameList[index]\n\n        if (!prompt.detailed) {\n            const createResp = await promptApi.getPrompt({\n                promptName: prompt.full_name\n            })\n            if (createResp.data) {\n                prompt.detailed = createResp.data.templates\n            }\n        }\n        setSelectedPrompt(prompt)\n    }\n\n    const fetchPrompts = async () => {\n        let tags = promptType === 'template' ? 'StringPromptTemplate&' : 'ChatPromptTemplate&'\n        modelName.forEach((item) => {\n            tags += `tags=${item.name}&`\n        })\n        usecase.forEach((item) => {\n            tags += `tags=${item.name}&`\n        })\n        language.forEach((item) => {\n            tags += `tags=${item.name}&`\n        })\n        getAvailablePromptsApi.request({ tags: tags })\n    }\n\n    const removeDuplicates = (value) => {\n        let duplicateRemoved = []\n\n        value.forEach((item) => {\n            if (value.filter((o) => o.id === item.id).length === 1) {\n                duplicateRemoved.push(item)\n            }\n        })\n        return duplicateRemoved\n    }\n\n    const handleModelChange = (event) => {\n        const {\n            target: { value }\n        } = event\n\n        setModelName(removeDuplicates(value))\n    }\n\n    const handleUsecaseChange = (event) => {\n        const {\n            target: { value }\n        } = event\n\n        setUsecase(removeDuplicates(value))\n    }\n    const handleLanguageChange = (event) => {\n        const {\n            target: { value }\n        } = event\n\n        setLanguage(removeDuplicates(value))\n    }\n\n    const component = show ? (\n        <Dialog\n            onClose={onCancel}\n            open={show}\n            fullWidth\n            maxWidth={'lg'}\n            aria-labelledby='prompt-dialog-title'\n            aria-describedby='prompt-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='prompt-dialog-title'>\n                Langchain Hub ({promptType === 'template' ? 'PromptTemplate' : 'ChatPromptTemplate'})\n            </DialogTitle>\n            <DialogContent dividers sx={{ p: 1 }}>\n                <Box sx={{ display: 'flex', flexDirection: 'row', p: 2, pt: 1, alignItems: 'center' }}>\n                    <FormControl sx={{ mr: 1, width: '30%' }}>\n                        <InputLabel size='small' id='model-checkbox-label'>\n                            Model\n                        </InputLabel>\n                        <Select\n                            id='model-checkbox'\n                            labelId='model-checkbox-label'\n                            multiple\n                            size='small'\n                            value={modelName}\n                            onChange={handleModelChange}\n                            input={<OutlinedInput label='Model' />}\n                            renderValue={(selected) => selected.map((x) => x.name).join(', ')}\n                            endAdornment={\n                                modelName.length ? (\n                                    <IconButton sx={{ mr: 2 }} onClick={() => setModelName([])}>\n                                        <ClearIcon style={{ width: 20, height: 20 }} />\n                                    </IconButton>\n                                ) : (\n                                    false\n                                )\n                            }\n                            sx={{\n                                '.MuiSvgIcon-root ': {\n                                    fill: customization.isDarkMode ? 'white !important' : ''\n                                }\n                            }}\n                            MenuProps={MenuProps}\n                        >\n                            {models.map((variant) => (\n                                <MenuItem key={variant.id} value={variant}>\n                                    <Checkbox id={variant.id} checked={modelName.findIndex((item) => item.id === variant.id) >= 0} />\n                                    <ListItemText primary={variant.name} />\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                    <FormControl sx={{ mr: 1, width: '30%' }}>\n                        <InputLabel size='small' id='usecase-checkbox-label'>\n                            Usecase\n                        </InputLabel>\n                        <Select\n                            autoWidth={false}\n                            labelId='usecase-checkbox-label'\n                            id='usecase-checkbox'\n                            multiple\n                            size='small'\n                            value={usecase}\n                            onChange={handleUsecaseChange}\n                            input={<OutlinedInput label='Usecase' />}\n                            renderValue={(selected) => selected.map((x) => x.name).join(', ')}\n                            endAdornment={\n                                usecase.length ? (\n                                    <IconButton sx={{ mr: 2 }} onClick={() => setUsecase([])}>\n                                        <ClearIcon style={{ width: 20, height: 20 }} />\n                                    </IconButton>\n                                ) : (\n                                    false\n                                )\n                            }\n                            sx={{\n                                '.MuiSvgIcon-root ': {\n                                    fill: customization.isDarkMode ? 'white !important' : ''\n                                }\n                            }}\n                            MenuProps={MenuProps}\n                        >\n                            {usecases.map((variant) => (\n                                <MenuItem key={variant.id} value={variant}>\n                                    <Checkbox id={variant.id} checked={usecase.findIndex((item) => item.id === variant.id) >= 0} />\n                                    <ListItemText primary={variant.name} />\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                    <FormControl sx={{ mr: 1, width: '30%' }}>\n                        <InputLabel size='small' id='language-checkbox-label'>\n                            Language\n                        </InputLabel>\n                        <Select\n                            labelId='language-checkbox-label'\n                            id='language-checkbox'\n                            multiple\n                            size='small'\n                            value={language}\n                            onChange={handleLanguageChange}\n                            input={<OutlinedInput label='language' />}\n                            renderValue={(selected) => selected.map((x) => x.name).join(', ')}\n                            endAdornment={\n                                language.length ? (\n                                    <IconButton sx={{ mr: 2 }} onClick={() => setLanguage([])}>\n                                        <ClearIcon style={{ width: 20, height: 20 }} />\n                                    </IconButton>\n                                ) : (\n                                    false\n                                )\n                            }\n                            sx={{\n                                '.MuiSvgIcon-root ': {\n                                    fill: customization.isDarkMode ? 'white !important' : ''\n                                }\n                            }}\n                            MenuProps={MenuProps}\n                        >\n                            {languages.map((variant) => (\n                                <MenuItem key={variant.id} value={variant}>\n                                    <Checkbox id={variant.id} checked={language.findIndex((item) => item.id === variant.id) >= 0} />\n                                    <ListItemText primary={variant.name} />\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                    <FormControl sx={{ width: '10%' }}>\n                        <Button disableElevation variant='outlined' onClick={fetchPrompts}>\n                            Search\n                        </Button>\n                    </FormControl>\n                </Box>\n\n                {availablePrompNameList && availablePrompNameList.length == 0 && (\n                    <Stack sx={{ alignItems: 'center', justifyContent: 'center', width: '100%', pb: 3 }} flexDirection='column'>\n                        <Box sx={{ p: 5, height: 'auto' }}>\n                            <img style={{ objectFit: 'cover', height: '20vh', width: 'auto' }} src={promptEmptySVG} alt='promptEmptySVG' />\n                        </Box>\n                        <div>No Available Prompts</div>\n                    </Stack>\n                )}\n                {availablePrompNameList && availablePrompNameList.length > 0 && (\n                    <Stack sx={{ alignItems: 'center', justifyContent: 'center', width: '100%' }} flexDirection='column'>\n                        <Box sx={{ width: '100%', p: 2 }}>\n                            <Grid xs={12} container spacing={1} justifyContent='center' alignItems='center'>\n                                <Grid xs={4} item sx={{ textAlign: 'left' }}>\n                                    <Box sx={{ width: '100%', maxWidth: 360 }}>\n                                        <Card variant='outlined' sx={{ height: 470, overflow: 'auto', borderRadius: 0 }}>\n                                            <CardContent sx={{ p: 1 }}>\n                                                <Typography sx={{ fontSize: 10 }} color='text.secondary' gutterBottom>\n                                                    Available Prompts\n                                                </Typography>\n                                                <List component='nav' aria-label='secondary mailbox folder'>\n                                                    {availablePrompNameList.map((item, index) => (\n                                                        <ListItemButton\n                                                            key={item.id}\n                                                            selected={item.id === selectedPrompt?.id}\n                                                            onClick={() => handleListItemClick(index)}\n                                                        >\n                                                            <div style={{ display: 'flex', flexDirection: 'column' }}>\n                                                                <Typography sx={{ fontSize: 16, p: 1, fontWeight: 500 }}>\n                                                                    {item.full_name}\n                                                                </Typography>\n                                                                <div\n                                                                    style={{\n                                                                        display: 'flex',\n                                                                        flexDirection: 'row',\n                                                                        flexWrap: 'wrap',\n                                                                        marginTop: 5\n                                                                    }}\n                                                                >\n                                                                    {item.tags.map((tag, index) => (\n                                                                        <Chip\n                                                                            key={index}\n                                                                            label={tag}\n                                                                            style={{ marginRight: 5, marginBottom: 5 }}\n                                                                        />\n                                                                    ))}\n                                                                </div>\n                                                            </div>\n                                                        </ListItemButton>\n                                                    ))}\n                                                </List>\n                                            </CardContent>\n                                        </Card>\n                                    </Box>\n                                </Grid>\n                                <Grid xs={8} item sx={{ textAlign: 'left' }}>\n                                    <Box sx={{ display: 'flex', flexDirection: 'column' }}>\n                                        <Card sx={{ height: 470, overflow: 'auto' }}>\n                                            <CardContent sx={{ p: 0.5 }}>\n                                                <Accordion\n                                                    expanded={accordionExpanded.includes('prompt')}\n                                                    onChange={handleAccordionChange('prompt')}\n                                                >\n                                                    <AccordionSummary\n                                                        aria-controls='panel2d-content'\n                                                        expandIcon={<ExpandMoreIcon />}\n                                                        id='panel2d-header'\n                                                    >\n                                                        <Typography>Prompt</Typography>\n                                                    </AccordionSummary>\n                                                    <AccordionDetails>\n                                                        <Typography sx={{ wordWrap: 'true' }} color='text.primary'>\n                                                            {selectedPrompt?.detailed?.map((item) => (\n                                                                <>\n                                                                    <Typography sx={{ fontSize: 12 }} color='text.secondary' gutterBottom>\n                                                                        {item.typeDisplay.toUpperCase()}\n                                                                    </Typography>\n                                                                    <Typography>\n                                                                        <p\n                                                                            style={{\n                                                                                whiteSpace: 'pre-wrap -moz-pre-wrap -pre-wrap -o-pre-wrap',\n                                                                                wordWrap: 'break-word',\n                                                                                fontFamily: 'inherit',\n                                                                                wordSpacing: '0.1rem',\n                                                                                lineHeight: '1.5rem'\n                                                                            }}\n                                                                        >\n                                                                            <NewLineToBr>{item.template}</NewLineToBr>\n                                                                        </p>\n                                                                    </Typography>\n                                                                </>\n                                                            ))}\n                                                        </Typography>\n                                                    </AccordionDetails>\n                                                </Accordion>\n                                                <Accordion\n                                                    expanded={accordionExpanded.includes('description')}\n                                                    onChange={handleAccordionChange('description')}\n                                                >\n                                                    <AccordionSummary\n                                                        aria-controls='panel1d-content'\n                                                        expandIcon={<ExpandMoreIcon />}\n                                                        id='panel1d-header'\n                                                    >\n                                                        <Typography>Description</Typography>\n                                                    </AccordionSummary>\n                                                    <AccordionDetails>\n                                                        <Typography\n                                                            sx={{ wordWrap: 'true', wordSpacing: '0.1rem', lineHeight: '1.5rem' }}\n                                                            color='text.primary'\n                                                        >\n                                                            {selectedPrompt?.description}\n                                                        </Typography>\n                                                    </AccordionDetails>\n                                                </Accordion>\n                                                <Accordion\n                                                    expanded={accordionExpanded.includes('readme')}\n                                                    onChange={handleAccordionChange('readme')}\n                                                >\n                                                    <AccordionSummary\n                                                        expandIcon={<ExpandMoreIcon />}\n                                                        aria-controls='panel3d-content'\n                                                        id='panel3d-header'\n                                                    >\n                                                        <Typography>Readme</Typography>\n                                                    </AccordionSummary>\n                                                    <AccordionDetails>\n                                                        <div\n                                                            style={{\n                                                                lineHeight: 1.75,\n                                                                '& a': {\n                                                                    display: 'block',\n                                                                    marginRight: '2.5rem',\n                                                                    wordWrap: 'break-word',\n                                                                    color: '#16bed7',\n                                                                    fontWeight: 500\n                                                                },\n                                                                '& a:hover': { opacity: 0.8 },\n                                                                '& code': {\n                                                                    color: '#0ab126',\n                                                                    fontWeight: 500,\n                                                                    whiteSpace: 'pre-wrap !important'\n                                                                }\n                                                            }}\n                                                        >\n                                                            <MemoizedReactMarkdown\n                                                                remarkPlugins={[remarkGfm, remarkMath]}\n                                                                rehypePlugins={[rehypeMathjax, rehypeRaw]}\n                                                                components={{\n                                                                    code({ inline, className, children, ...props }) {\n                                                                        const match = /language-(\\w+)/.exec(className || '')\n                                                                        return !inline ? (\n                                                                            <CodeBlock\n                                                                                key={Math.random()}\n                                                                                isDialog={true}\n                                                                                language={(match && match[1]) || ''}\n                                                                                value={String(children).replace(/\\n$/, '')}\n                                                                                {...props}\n                                                                            />\n                                                                        ) : (\n                                                                            <code className={className} {...props}>\n                                                                                {children}\n                                                                            </code>\n                                                                        )\n                                                                    }\n                                                                }}\n                                                            >\n                                                                {selectedPrompt?.readme}\n                                                            </MemoizedReactMarkdown>\n                                                        </div>\n                                                    </AccordionDetails>\n                                                </Accordion>\n                                            </CardContent>\n                                        </Card>\n                                    </Box>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Stack>\n                )}\n            </DialogContent>\n            {availablePrompNameList && availablePrompNameList.length > 0 && (\n                <DialogActions>\n                    <Button onClick={onCancel}>Cancel</Button>\n                    <StyledButton\n                        disabled={!selectedPrompt?.detailed}\n                        onClick={() => onSubmit(selectedPrompt.detailed)}\n                        variant='contained'\n                    >\n                        Load\n                    </StyledButton>\n                </DialogActions>\n            )}\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nPromptLangsmithHubDialog.propTypes = {\n    promptType: PropTypes.string,\n    show: PropTypes.bool,\n    onCancel: PropTypes.func,\n    onSubmit: PropTypes.func\n}\n\nexport default PromptLangsmithHubDialog\n","import PropTypes from 'prop-types'\nimport { Handle, Position, useUpdateNodeInternals } from 'reactflow'\nimport { useEffect, useRef, useState, useContext } from 'react'\nimport { useSelector } from 'react-redux'\n\n// material-ui\nimport { useTheme, styled } from '@mui/material/styles'\nimport { Box, Typography, Tooltip, IconButton, Button } from '@mui/material'\nimport IconAutoFixHigh from '@mui/icons-material/AutoFixHigh'\nimport { tooltipClasses } from '@mui/material/Tooltip'\nimport { IconArrowsMaximize, IconEdit, IconAlertTriangle } from '@tabler/icons'\n\n// project import\nimport { Dropdown } from 'ui-component/dropdown/Dropdown'\nimport { MultiDropdown } from 'ui-component/dropdown/MultiDropdown'\nimport { AsyncDropdown } from 'ui-component/dropdown/AsyncDropdown'\nimport { Input } from 'ui-component/input/Input'\nimport { DataGrid } from 'ui-component/grid/DataGrid'\nimport { File } from 'ui-component/file/File'\nimport { SwitchInput } from 'ui-component/switch/Switch'\nimport { flowContext } from 'store/context/ReactFlowContext'\nimport { isValidConnection } from 'utils/genericHelper'\nimport { JsonEditorInput } from 'ui-component/json/JsonEditor'\nimport { TooltipWithParser } from 'ui-component/tooltip/TooltipWithParser'\nimport ToolDialog from 'views/tools/ToolDialog'\nimport AssistantDialog from 'views/assistants/AssistantDialog'\nimport FormatPromptValuesDialog from 'ui-component/dialog/FormatPromptValuesDialog'\nimport CredentialInputHandler from './CredentialInputHandler'\n\n// utils\nimport { getInputVariables } from 'utils/genericHelper'\n\n// const\nimport { FLOWISE_CREDENTIAL_ID } from 'store/constant'\nimport PromptLangsmithHubDialog from '../../ui-component/dialog/PromptLangsmithHubDialog'\n\nconst EDITABLE_OPTIONS = ['selectedTool', 'selectedAssistant']\n\nconst CustomWidthTooltip = styled(({ className, ...props }) => <Tooltip {...props} classes={{ popper: className }} />)({\n    [`& .${tooltipClasses.tooltip}`]: {\n        maxWidth: 500\n    }\n})\n\n// ===========================|| NodeInputHandler ||=========================== //\n\nconst NodeInputHandler = ({ inputAnchor, inputParam, data, disabled = false, isAdditionalParams = false }) => {\n    const theme = useTheme()\n    const customization = useSelector((state) => state.customization)\n    const ref = useRef(null)\n    const { reactFlowInstance } = useContext(flowContext)\n    const updateNodeInternals = useUpdateNodeInternals()\n    const [position, setPosition] = useState(0)\n    const [showExpandDialog, setShowExpandDialog] = useState(false)\n    const [expandDialogProps, setExpandDialogProps] = useState({})\n    const [showAsyncOptionDialog, setAsyncOptionEditDialog] = useState('')\n    const [asyncOptionEditDialogProps, setAsyncOptionEditDialogProps] = useState({})\n    const [reloadTimestamp, setReloadTimestamp] = useState(Date.now().toString())\n    const [showFormatPromptValuesDialog, setShowFormatPromptValuesDialog] = useState(false)\n    const [formatPromptValuesDialogProps, setFormatPromptValuesDialogProps] = useState({})\n    const [showPromptHubDialog, setShowPromptHubDialog] = useState(false)\n\n    const onExpandDialogClicked = (value, inputParam) => {\n        const dialogProp = {\n            value,\n            inputParam,\n            disabled,\n            confirmButtonName: 'Save',\n            cancelButtonName: 'Cancel'\n        }\n        setExpandDialogProps(dialogProp)\n        setShowExpandDialog(true)\n    }\n\n    const onShowPromptHubButtonClicked = () => {\n        setShowPromptHubDialog(true)\n    }\n    const onShowPromptHubButtonSubmit = (templates) => {\n        setShowPromptHubDialog(false)\n        for (const t of templates) {\n            if (Object.prototype.hasOwnProperty.call(data.inputs, t.type)) {\n                data.inputs[t.type] = t.template\n            }\n        }\n    }\n    const onFormatPromptValuesClicked = (value, inputParam) => {\n        // Preset values if the field is format prompt values\n        let inputValue = value\n        if (inputParam.name === 'promptValues' && !value) {\n            const obj = {}\n            const templateValue =\n                (data.inputs['template'] ?? '') + (data.inputs['systemMessagePrompt'] ?? '') + (data.inputs['humanMessagePrompt'] ?? '')\n            const inputVariables = getInputVariables(templateValue)\n            for (const inputVariable of inputVariables) {\n                obj[inputVariable] = ''\n            }\n            if (Object.keys(obj).length) inputValue = JSON.stringify(obj)\n        }\n        const dialogProp = {\n            value: inputValue,\n            inputParam,\n            nodes: reactFlowInstance.getNodes(),\n            edges: reactFlowInstance.getEdges(),\n            nodeId: data.id\n        }\n        setFormatPromptValuesDialogProps(dialogProp)\n        setShowFormatPromptValuesDialog(true)\n    }\n\n    const onExpandDialogSave = (newValue, inputParamName) => {\n        setShowExpandDialog(false)\n        data.inputs[inputParamName] = newValue\n    }\n\n    const editAsyncOption = (inputParamName, inputValue) => {\n        if (inputParamName === 'selectedTool') {\n            setAsyncOptionEditDialogProps({\n                title: 'Edit Tool',\n                type: 'EDIT',\n                cancelButtonName: 'Cancel',\n                confirmButtonName: 'Save',\n                toolId: inputValue\n            })\n        } else if (inputParamName === 'selectedAssistant') {\n            setAsyncOptionEditDialogProps({\n                title: 'Edit Assistant',\n                type: 'EDIT',\n                cancelButtonName: 'Cancel',\n                confirmButtonName: 'Save',\n                assistantId: inputValue\n            })\n        }\n        setAsyncOptionEditDialog(inputParamName)\n    }\n\n    const addAsyncOption = (inputParamName) => {\n        if (inputParamName === 'selectedTool') {\n            setAsyncOptionEditDialogProps({\n                title: 'Add New Tool',\n                type: 'ADD',\n                cancelButtonName: 'Cancel',\n                confirmButtonName: 'Add'\n            })\n        } else if (inputParamName === 'selectedAssistant') {\n            setAsyncOptionEditDialogProps({\n                title: 'Add New Assistant',\n                type: 'ADD',\n                cancelButtonName: 'Cancel',\n                confirmButtonName: 'Add'\n            })\n        }\n        setAsyncOptionEditDialog(inputParamName)\n    }\n\n    const onConfirmAsyncOption = (selectedOptionId = '') => {\n        if (!selectedOptionId) {\n            data.inputs[showAsyncOptionDialog] = ''\n        } else {\n            data.inputs[showAsyncOptionDialog] = selectedOptionId\n            setReloadTimestamp(Date.now().toString())\n        }\n        setAsyncOptionEditDialogProps({})\n        setAsyncOptionEditDialog('')\n    }\n\n    useEffect(() => {\n        if (ref.current && ref.current.offsetTop && ref.current.clientHeight) {\n            setPosition(ref.current.offsetTop + ref.current.clientHeight / 2)\n            updateNodeInternals(data.id)\n        }\n    }, [data.id, ref, updateNodeInternals])\n\n    useEffect(() => {\n        updateNodeInternals(data.id)\n    }, [data.id, position, updateNodeInternals])\n\n    return (\n        <div ref={ref}>\n            {inputAnchor && (\n                <>\n                    <CustomWidthTooltip placement='left' title={inputAnchor.type}>\n                        <Handle\n                            type='target'\n                            position={Position.Left}\n                            key={inputAnchor.id}\n                            id={inputAnchor.id}\n                            isValidConnection={(connection) => isValidConnection(connection, reactFlowInstance)}\n                            style={{\n                                height: 10,\n                                width: 10,\n                                backgroundColor: data.selected ? theme.palette.primary.main : theme.palette.text.secondary,\n                                top: position\n                            }}\n                        />\n                    </CustomWidthTooltip>\n                    <Box sx={{ p: 2 }}>\n                        <Typography>\n                            {inputAnchor.label}\n                            {!inputAnchor.optional && <span style={{ color: 'red' }}>&nbsp;*</span>}\n                            {inputAnchor.description && <TooltipWithParser style={{ marginLeft: 10 }} title={inputAnchor.description} />}\n                        </Typography>\n                    </Box>\n                </>\n            )}\n\n            {((inputParam && !inputParam.additionalParams) || isAdditionalParams) && (\n                <>\n                    {inputParam.acceptVariable && (\n                        <CustomWidthTooltip placement='left' title={inputParam.type}>\n                            <Handle\n                                type='target'\n                                position={Position.Left}\n                                key={inputParam.id}\n                                id={inputParam.id}\n                                isValidConnection={(connection) => isValidConnection(connection, reactFlowInstance)}\n                                style={{\n                                    height: 10,\n                                    width: 10,\n                                    backgroundColor: data.selected ? theme.palette.primary.main : theme.palette.text.secondary,\n                                    top: position\n                                }}\n                            />\n                        </CustomWidthTooltip>\n                    )}\n                    <Box sx={{ p: 2 }}>\n                        {(data.name === 'promptTemplate' || data.name === 'chatPromptTemplate') &&\n                            (inputParam.name === 'template' || inputParam.name === 'systemMessagePrompt') && (\n                                <>\n                                    <Button\n                                        style={{\n                                            display: 'flex',\n                                            flexDirection: 'row',\n                                            width: '100%'\n                                        }}\n                                        disabled={disabled}\n                                        sx={{ borderRadius: 25, width: '100%', mb: 2, mt: 0 }}\n                                        variant='outlined'\n                                        onClick={() => onShowPromptHubButtonClicked()}\n                                        endIcon={<IconAutoFixHigh />}\n                                    >\n                                        Langchain Hub\n                                    </Button>\n                                    <PromptLangsmithHubDialog\n                                        promptType={inputParam.name}\n                                        show={showPromptHubDialog}\n                                        onCancel={() => setShowPromptHubDialog(false)}\n                                        onSubmit={onShowPromptHubButtonSubmit}\n                                    ></PromptLangsmithHubDialog>\n                                </>\n                            )}\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\n                            <Typography>\n                                {inputParam.label}\n                                {!inputParam.optional && <span style={{ color: 'red' }}>&nbsp;*</span>}\n                                {inputParam.description && <TooltipWithParser style={{ marginLeft: 10 }} title={inputParam.description} />}\n                            </Typography>\n                            <div style={{ flexGrow: 1 }}></div>\n                            {inputParam.type === 'string' && inputParam.rows && (\n                                <IconButton\n                                    size='small'\n                                    sx={{\n                                        height: 25,\n                                        width: 25\n                                    }}\n                                    title='Expand'\n                                    color='primary'\n                                    onClick={() =>\n                                        onExpandDialogClicked(data.inputs[inputParam.name] ?? inputParam.default ?? '', inputParam)\n                                    }\n                                >\n                                    <IconArrowsMaximize />\n                                </IconButton>\n                            )}\n                        </div>\n                        {inputParam.warning && (\n                            <div\n                                style={{\n                                    display: 'flex',\n                                    flexDirection: 'row',\n                                    borderRadius: 10,\n                                    background: 'rgb(254,252,191)',\n                                    padding: 10,\n                                    marginTop: 10,\n                                    marginBottom: 10\n                                }}\n                            >\n                                <IconAlertTriangle size={36} color='orange' />\n                                <span style={{ color: 'rgb(116,66,16)', marginLeft: 10 }}>{inputParam.warning}</span>\n                            </div>\n                        )}\n                        {inputParam.type === 'credential' && (\n                            <CredentialInputHandler\n                                disabled={disabled}\n                                data={data}\n                                inputParam={inputParam}\n                                onSelect={(newValue) => {\n                                    data.credential = newValue\n                                    data.inputs[FLOWISE_CREDENTIAL_ID] = newValue // in case data.credential is not updated\n                                }}\n                            />\n                        )}\n\n                        {inputParam.type === 'file' && (\n                            <File\n                                disabled={disabled}\n                                fileType={inputParam.fileType || '*'}\n                                onChange={(newValue) => (data.inputs[inputParam.name] = newValue)}\n                                value={data.inputs[inputParam.name] ?? inputParam.default ?? 'Choose a file to upload'}\n                            />\n                        )}\n                        {inputParam.type === 'boolean' && (\n                            <SwitchInput\n                                disabled={disabled}\n                                onChange={(newValue) => (data.inputs[inputParam.name] = newValue)}\n                                value={data.inputs[inputParam.name] ?? inputParam.default ?? false}\n                            />\n                        )}\n                        {inputParam.type === 'datagrid' && (\n                            <DataGrid\n                                disabled={disabled}\n                                columns={inputParam.datagrid}\n                                hideFooter={true}\n                                rows={data.inputs[inputParam.name] ?? JSON.stringify(inputParam.default) ?? []}\n                                onChange={(newValue) => (data.inputs[inputParam.name] = newValue)}\n                            />\n                        )}\n                        {(inputParam.type === 'string' || inputParam.type === 'password' || inputParam.type === 'number') && (\n                            <Input\n                                key={data.inputs[inputParam.name]}\n                                disabled={disabled}\n                                inputParam={inputParam}\n                                onChange={(newValue) => (data.inputs[inputParam.name] = newValue)}\n                                value={data.inputs[inputParam.name] ?? inputParam.default ?? ''}\n                                nodes={inputParam?.acceptVariable && reactFlowInstance ? reactFlowInstance.getNodes() : []}\n                                edges={inputParam?.acceptVariable && reactFlowInstance ? reactFlowInstance.getEdges() : []}\n                                nodeId={data.id}\n                                showDialog={showExpandDialog}\n                                dialogProps={expandDialogProps}\n                                onDialogCancel={() => setShowExpandDialog(false)}\n                                onDialogConfirm={(newValue, inputParamName) => onExpandDialogSave(newValue, inputParamName)}\n                            />\n                        )}\n                        {inputParam.type === 'json' && (\n                            <>\n                                {!inputParam?.acceptVariable && (\n                                    <JsonEditorInput\n                                        disabled={disabled}\n                                        onChange={(newValue) => (data.inputs[inputParam.name] = newValue)}\n                                        value={data.inputs[inputParam.name] ?? inputParam.default ?? ''}\n                                        isDarkMode={customization.isDarkMode}\n                                    />\n                                )}\n                                {inputParam?.acceptVariable && (\n                                    <>\n                                        <Button\n                                            sx={{ borderRadius: 25, width: '100%', mb: 2, mt: 2 }}\n                                            variant='outlined'\n                                            onClick={() => onFormatPromptValuesClicked(data.inputs[inputParam.name] ?? '', inputParam)}\n                                        >\n                                            Format Prompt Values\n                                        </Button>\n                                        <FormatPromptValuesDialog\n                                            show={showFormatPromptValuesDialog}\n                                            dialogProps={formatPromptValuesDialogProps}\n                                            onCancel={() => setShowFormatPromptValuesDialog(false)}\n                                            onChange={(newValue) => (data.inputs[inputParam.name] = newValue)}\n                                        ></FormatPromptValuesDialog>\n                                    </>\n                                )}\n                            </>\n                        )}\n                        {inputParam.type === 'options' && (\n                            <Dropdown\n                                disabled={disabled}\n                                name={inputParam.name}\n                                options={inputParam.options}\n                                onSelect={(newValue) => (data.inputs[inputParam.name] = newValue)}\n                                value={data.inputs[inputParam.name] ?? inputParam.default ?? 'choose an option'}\n                            />\n                        )}\n                        {inputParam.type === 'multiOptions' && (\n                            <MultiDropdown\n                                disabled={disabled}\n                                name={inputParam.name}\n                                options={inputParam.options}\n                                onSelect={(newValue) => (data.inputs[inputParam.name] = newValue)}\n                                value={data.inputs[inputParam.name] ?? inputParam.default ?? 'choose an option'}\n                            />\n                        )}\n                        {inputParam.type === 'asyncOptions' && (\n                            <>\n                                {data.inputParams.length === 1 && <div style={{ marginTop: 10 }} />}\n                                <div key={reloadTimestamp} style={{ display: 'flex', flexDirection: 'row' }}>\n                                    <AsyncDropdown\n                                        disabled={disabled}\n                                        name={inputParam.name}\n                                        nodeData={data}\n                                        value={data.inputs[inputParam.name] ?? inputParam.default ?? 'choose an option'}\n                                        isCreateNewOption={EDITABLE_OPTIONS.includes(inputParam.name)}\n                                        onSelect={(newValue) => (data.inputs[inputParam.name] = newValue)}\n                                        onCreateNew={() => addAsyncOption(inputParam.name)}\n                                    />\n                                    {EDITABLE_OPTIONS.includes(inputParam.name) && data.inputs[inputParam.name] && (\n                                        <IconButton\n                                            title='Edit'\n                                            color='primary'\n                                            size='small'\n                                            onClick={() => editAsyncOption(inputParam.name, data.inputs[inputParam.name])}\n                                        >\n                                            <IconEdit />\n                                        </IconButton>\n                                    )}\n                                </div>\n                            </>\n                        )}\n                    </Box>\n                </>\n            )}\n            <ToolDialog\n                show={showAsyncOptionDialog === 'selectedTool'}\n                dialogProps={asyncOptionEditDialogProps}\n                onCancel={() => setAsyncOptionEditDialog('')}\n                onConfirm={onConfirmAsyncOption}\n            ></ToolDialog>\n            <AssistantDialog\n                show={showAsyncOptionDialog === 'selectedAssistant'}\n                dialogProps={asyncOptionEditDialogProps}\n                onCancel={() => setAsyncOptionEditDialog('')}\n                onConfirm={onConfirmAsyncOption}\n            ></AssistantDialog>\n        </div>\n    )\n}\n\nNodeInputHandler.propTypes = {\n    inputAnchor: PropTypes.object,\n    inputParam: PropTypes.object,\n    data: PropTypes.object,\n    disabled: PropTypes.bool,\n    isAdditionalParams: PropTypes.bool\n}\n\nexport default NodeInputHandler\n","import PropTypes from 'prop-types'\nimport { Handle, Position, useUpdateNodeInternals } from 'reactflow'\nimport { useEffect, useRef, useState, useContext } from 'react'\n\n// material-ui\nimport { useTheme, styled } from '@mui/material/styles'\nimport { Box, Typography, Tooltip } from '@mui/material'\nimport { tooltipClasses } from '@mui/material/Tooltip'\nimport { flowContext } from 'store/context/ReactFlowContext'\nimport { isValidConnection } from 'utils/genericHelper'\nimport { Dropdown } from 'ui-component/dropdown/Dropdown'\n\nconst CustomWidthTooltip = styled(({ className, ...props }) => <Tooltip {...props} classes={{ popper: className }} />)({\n    [`& .${tooltipClasses.tooltip}`]: {\n        maxWidth: 500\n    }\n})\n\n// ===========================|| NodeOutputHandler ||=========================== //\n\nconst NodeOutputHandler = ({ outputAnchor, data, disabled = false }) => {\n    const theme = useTheme()\n    const ref = useRef(null)\n    const updateNodeInternals = useUpdateNodeInternals()\n    const [position, setPosition] = useState(0)\n    const [dropdownValue, setDropdownValue] = useState(null)\n    const { reactFlowInstance } = useContext(flowContext)\n\n    useEffect(() => {\n        if (ref.current && ref.current?.offsetTop && ref.current?.clientHeight) {\n            setTimeout(() => {\n                setPosition(ref.current?.offsetTop + ref.current?.clientHeight / 2)\n                updateNodeInternals(data.id)\n            }, 0)\n        }\n    }, [data.id, ref, updateNodeInternals])\n\n    useEffect(() => {\n        setTimeout(() => {\n            updateNodeInternals(data.id)\n        }, 0)\n    }, [data.id, position, updateNodeInternals])\n\n    useEffect(() => {\n        if (dropdownValue) {\n            setTimeout(() => {\n                updateNodeInternals(data.id)\n            }, 0)\n        }\n    }, [data.id, dropdownValue, updateNodeInternals])\n\n    return (\n        <div ref={ref}>\n            {outputAnchor.type !== 'options' && !outputAnchor.options && (\n                <>\n                    <CustomWidthTooltip placement='right' title={outputAnchor.type}>\n                        <Handle\n                            type='source'\n                            position={Position.Right}\n                            key={outputAnchor.id}\n                            id={outputAnchor.id}\n                            isValidConnection={(connection) => isValidConnection(connection, reactFlowInstance)}\n                            style={{\n                                height: 10,\n                                width: 10,\n                                backgroundColor: data.selected ? theme.palette.primary.main : theme.palette.text.secondary,\n                                top: position\n                            }}\n                        />\n                    </CustomWidthTooltip>\n                    <Box sx={{ p: 2, textAlign: 'end' }}>\n                        <Typography>{outputAnchor.label}</Typography>\n                    </Box>\n                </>\n            )}\n            {outputAnchor.type === 'options' && outputAnchor.options && outputAnchor.options.length > 0 && (\n                <>\n                    <CustomWidthTooltip\n                        placement='right'\n                        title={\n                            outputAnchor.options.find((opt) => opt.name === data.outputs?.[outputAnchor.name])?.type ?? outputAnchor.type\n                        }\n                    >\n                        <Handle\n                            type='source'\n                            position={Position.Right}\n                            id={outputAnchor.options.find((opt) => opt.name === data.outputs?.[outputAnchor.name])?.id ?? ''}\n                            isValidConnection={(connection) => isValidConnection(connection, reactFlowInstance)}\n                            style={{\n                                height: 10,\n                                width: 10,\n                                backgroundColor: data.selected ? theme.palette.primary.main : theme.palette.text.secondary,\n                                top: position\n                            }}\n                        />\n                    </CustomWidthTooltip>\n                    <Box sx={{ p: 2, textAlign: 'end' }}>\n                        <Dropdown\n                            disabled={disabled}\n                            disableClearable={true}\n                            name={outputAnchor.name}\n                            options={outputAnchor.options}\n                            onSelect={(newValue) => {\n                                setDropdownValue(newValue)\n                                data.outputs[outputAnchor.name] = newValue\n                            }}\n                            value={data.outputs[outputAnchor.name] ?? outputAnchor.default ?? 'choose an option'}\n                        />\n                    </Box>\n                </>\n            )}\n        </div>\n    )\n}\n\nNodeOutputHandler.propTypes = {\n    outputAnchor: PropTypes.object,\n    data: PropTypes.object,\n    disabled: PropTypes.bool\n}\n\nexport default NodeOutputHandler\n","import PropTypes from 'prop-types'\nimport { DataGrid } from '@mui/x-data-grid'\nimport { IconPlus } from '@tabler/icons'\nimport { Button } from '@mui/material'\n\nexport const Grid = ({ columns, rows, style, disabled = false, onRowUpdate, addNewRow }) => {\n    const handleProcessRowUpdate = (newRow) => {\n        onRowUpdate(newRow)\n        return newRow\n    }\n\n    return (\n        <>\n            {!disabled && (\n                <Button variant='outlined' onClick={addNewRow} startIcon={<IconPlus />}>\n                    Add Item\n                </Button>\n            )}\n            {rows && columns && (\n                <div style={{ marginTop: 10, height: 300, width: '100%', ...style }}>\n                    <DataGrid\n                        processRowUpdate={handleProcessRowUpdate}\n                        isCellEditable={() => {\n                            return !disabled\n                        }}\n                        onProcessRowUpdateError={(error) => console.error(error)}\n                        rows={rows}\n                        columns={columns}\n                    />\n                </div>\n            )}\n        </>\n    )\n}\n\nGrid.propTypes = {\n    rows: PropTypes.array,\n    columns: PropTypes.array,\n    style: PropTypes.any,\n    disabled: PropTypes.bool,\n    addNewRow: PropTypes.func,\n    onRowUpdate: PropTypes.func\n}\n","import { createPortal } from 'react-dom'\nimport PropTypes from 'prop-types'\nimport { useState, useEffect, useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\nimport { cloneDeep } from 'lodash'\n\nimport { Box, Typography, Button, Dialog, DialogActions, DialogContent, DialogTitle, Stack, OutlinedInput } from '@mui/material'\nimport { StyledButton } from 'ui-component/button/StyledButton'\nimport { Grid } from 'ui-component/grid/Grid'\nimport { TooltipWithParser } from 'ui-component/tooltip/TooltipWithParser'\nimport { GridActionsCellItem } from '@mui/x-data-grid'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport ConfirmDialog from 'ui-component/dialog/ConfirmDialog'\nimport { DarkCodeEditor } from 'ui-component/editor/DarkCodeEditor'\nimport { LightCodeEditor } from 'ui-component/editor/LightCodeEditor'\nimport { useTheme } from '@mui/material/styles'\n\n// Icons\nimport { IconX, IconFileExport } from '@tabler/icons'\n\n// API\nimport toolsApi from 'api/tools'\n\n// Hooks\nimport useConfirm from 'hooks/useConfirm'\nimport useApi from 'hooks/useApi'\n\n// utils\nimport useNotifier from 'utils/useNotifier'\nimport { generateRandomGradient, formatDataGridRows } from 'utils/genericHelper'\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\n\nconst exampleAPIFunc = `/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Output Schema as variables. Ex: Property = userid, Variable = $userid\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}`\n\nconst ToolDialog = ({ show, dialogProps, onUseTemplate, onCancel, onConfirm }) => {\n    const portalElement = document.getElementById('portal')\n    const theme = useTheme()\n\n    const customization = useSelector((state) => state.customization)\n    const dispatch = useDispatch()\n\n    // ==============================|| Snackbar ||============================== //\n\n    useNotifier()\n    const { confirm } = useConfirm()\n\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const getSpecificToolApi = useApi(toolsApi.getSpecificTool)\n\n    const [toolId, setToolId] = useState('')\n    const [toolName, setToolName] = useState('')\n    const [toolDesc, setToolDesc] = useState('')\n    const [toolIcon, setToolIcon] = useState('')\n    const [toolSchema, setToolSchema] = useState([])\n    const [toolFunc, setToolFunc] = useState('')\n\n    const deleteItem = useCallback(\n        (id) => () => {\n            setTimeout(() => {\n                setToolSchema((prevRows) => prevRows.filter((row) => row.id !== id))\n            })\n        },\n        []\n    )\n\n    const addNewRow = () => {\n        setTimeout(() => {\n            setToolSchema((prevRows) => {\n                let allRows = [...cloneDeep(prevRows)]\n                const lastRowId = allRows.length ? allRows[allRows.length - 1].id + 1 : 1\n                allRows.push({\n                    id: lastRowId,\n                    property: '',\n                    description: '',\n                    type: '',\n                    required: false\n                })\n                return allRows\n            })\n        })\n    }\n\n    const onRowUpdate = (newRow) => {\n        setTimeout(() => {\n            setToolSchema((prevRows) => {\n                let allRows = [...cloneDeep(prevRows)]\n                const indexToUpdate = allRows.findIndex((row) => row.id === newRow.id)\n                if (indexToUpdate >= 0) {\n                    allRows[indexToUpdate] = { ...newRow }\n                }\n                return allRows\n            })\n        })\n    }\n\n    const columns = useMemo(\n        () => [\n            { field: 'property', headerName: 'Property', editable: true, flex: 1 },\n            {\n                field: 'type',\n                headerName: 'Type',\n                type: 'singleSelect',\n                valueOptions: ['string', 'number', 'boolean', 'date'],\n                editable: true,\n                width: 120\n            },\n            { field: 'description', headerName: 'Description', editable: true, flex: 1 },\n            { field: 'required', headerName: 'Required', type: 'boolean', editable: true, width: 80 },\n            {\n                field: 'actions',\n                type: 'actions',\n                width: 80,\n                getActions: (params) => [\n                    <GridActionsCellItem key={'Delete'} icon={<DeleteIcon />} label='Delete' onClick={deleteItem(params.id)} />\n                ]\n            }\n        ],\n        [deleteItem]\n    )\n\n    useEffect(() => {\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\n    }, [show, dispatch])\n\n    useEffect(() => {\n        if (getSpecificToolApi.data) {\n            setToolId(getSpecificToolApi.data.id)\n            setToolName(getSpecificToolApi.data.name)\n            setToolDesc(getSpecificToolApi.data.description)\n            setToolSchema(formatDataGridRows(getSpecificToolApi.data.schema))\n            if (getSpecificToolApi.data.func) setToolFunc(getSpecificToolApi.data.func)\n            else setToolFunc('')\n        }\n    }, [getSpecificToolApi.data])\n\n    useEffect(() => {\n        if (dialogProps.type === 'EDIT' && dialogProps.data) {\n            // When tool dialog is opened from Tools dashboard\n            setToolId(dialogProps.data.id)\n            setToolName(dialogProps.data.name)\n            setToolDesc(dialogProps.data.description)\n            setToolIcon(dialogProps.data.iconSrc)\n            setToolSchema(formatDataGridRows(dialogProps.data.schema))\n            if (dialogProps.data.func) setToolFunc(dialogProps.data.func)\n            else setToolFunc('')\n        } else if (dialogProps.type === 'EDIT' && dialogProps.toolId) {\n            // When tool dialog is opened from CustomTool node in canvas\n            getSpecificToolApi.request(dialogProps.toolId)\n        } else if (dialogProps.type === 'IMPORT' && dialogProps.data) {\n            // When tool dialog is to import existing tool\n            setToolName(dialogProps.data.name)\n            setToolDesc(dialogProps.data.description)\n            setToolIcon(dialogProps.data.iconSrc)\n            setToolSchema(formatDataGridRows(dialogProps.data.schema))\n            if (dialogProps.data.func) setToolFunc(dialogProps.data.func)\n            else setToolFunc('')\n        } else if (dialogProps.type === 'TEMPLATE' && dialogProps.data) {\n            // When tool dialog is a template\n            setToolName(dialogProps.data.name)\n            setToolDesc(dialogProps.data.description)\n            setToolIcon(dialogProps.data.iconSrc)\n            setToolSchema(formatDataGridRows(dialogProps.data.schema))\n            if (dialogProps.data.func) setToolFunc(dialogProps.data.func)\n            else setToolFunc('')\n        } else if (dialogProps.type === 'ADD') {\n            // When tool dialog is to add a new tool\n            setToolId('')\n            setToolName('')\n            setToolDesc('')\n            setToolIcon('')\n            setToolSchema([])\n            setToolFunc('')\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dialogProps])\n\n    const useToolTemplate = () => {\n        onUseTemplate(dialogProps.data)\n    }\n\n    const exportTool = async () => {\n        try {\n            const toolResp = await toolsApi.getSpecificTool(toolId)\n            if (toolResp.data) {\n                const toolData = toolResp.data\n                delete toolData.id\n                delete toolData.createdDate\n                delete toolData.updatedDate\n                let dataStr = JSON.stringify(toolData, null, 2)\n                let dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr)\n\n                let exportFileDefaultName = `${toolName}-CustomTool.json`\n\n                let linkElement = document.createElement('a')\n                linkElement.setAttribute('href', dataUri)\n                linkElement.setAttribute('download', exportFileDefaultName)\n                linkElement.click()\n            }\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to export Tool: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n            onCancel()\n        }\n    }\n\n    const addNewTool = async () => {\n        try {\n            const obj = {\n                name: toolName,\n                description: toolDesc,\n                color: generateRandomGradient(),\n                schema: JSON.stringify(toolSchema),\n                func: toolFunc,\n                iconSrc: toolIcon\n            }\n            const createResp = await toolsApi.createNewTool(obj)\n            if (createResp.data) {\n                enqueueSnackbar({\n                    message: 'New Tool added',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                onConfirm(createResp.data.id)\n            }\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to add new Tool: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n            onCancel()\n        }\n    }\n\n    const saveTool = async () => {\n        try {\n            const saveResp = await toolsApi.updateTool(toolId, {\n                name: toolName,\n                description: toolDesc,\n                schema: JSON.stringify(toolSchema),\n                func: toolFunc,\n                iconSrc: toolIcon\n            })\n            if (saveResp.data) {\n                enqueueSnackbar({\n                    message: 'Tool saved',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                onConfirm(saveResp.data.id)\n            }\n        } catch (error) {\n            console.error(error)\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to save Tool: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n            onCancel()\n        }\n    }\n\n    const deleteTool = async () => {\n        const confirmPayload = {\n            title: `Delete Tool`,\n            description: `Delete tool ${toolName}?`,\n            confirmButtonName: 'Delete',\n            cancelButtonName: 'Cancel'\n        }\n        const isConfirmed = await confirm(confirmPayload)\n\n        if (isConfirmed) {\n            try {\n                const delResp = await toolsApi.deleteTool(toolId)\n                if (delResp.data) {\n                    enqueueSnackbar({\n                        message: 'Tool deleted',\n                        options: {\n                            key: new Date().getTime() + Math.random(),\n                            variant: 'success',\n                            action: (key) => (\n                                <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                    <IconX />\n                                </Button>\n                            )\n                        }\n                    })\n                    onConfirm()\n                }\n            } catch (error) {\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n                enqueueSnackbar({\n                    message: `Failed to delete Tool: ${errorData}`,\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'error',\n                        persist: true,\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                onCancel()\n            }\n        }\n    }\n\n    const component = show ? (\n        <Dialog\n            fullWidth\n            maxWidth='md'\n            open={show}\n            onClose={onCancel}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    {dialogProps.title}\n                    <div style={{ flex: 1 }} />\n                    {dialogProps.type === 'EDIT' && (\n                        <Button variant='outlined' onClick={() => exportTool()} startIcon={<IconFileExport />}>\n                            Export\n                        </Button>\n                    )}\n                </div>\n            </DialogTitle>\n            <DialogContent>\n                <Box sx={{ p: 2 }}>\n                    <Stack sx={{ position: 'relative' }} direction='row'>\n                        <Typography variant='overline'>\n                            Tool Name\n                            <span style={{ color: 'red' }}>&nbsp;*</span>\n                            <TooltipWithParser\n                                style={{ marginLeft: 10 }}\n                                title={'Tool name must be small capital letter with underscore. Ex: my_tool'}\n                            />\n                        </Typography>\n                    </Stack>\n                    <OutlinedInput\n                        id='toolName'\n                        type='string'\n                        fullWidth\n                        disabled={dialogProps.type === 'TEMPLATE'}\n                        placeholder='My New Tool'\n                        value={toolName}\n                        name='toolName'\n                        onChange={(e) => setToolName(e.target.value)}\n                    />\n                </Box>\n                <Box sx={{ p: 2 }}>\n                    <Stack sx={{ position: 'relative' }} direction='row'>\n                        <Typography variant='overline'>\n                            Tool description\n                            <span style={{ color: 'red' }}>&nbsp;*</span>\n                            <TooltipWithParser\n                                style={{ marginLeft: 10 }}\n                                title={'Description of what the tool does. This is for ChatGPT to determine when to use this tool.'}\n                            />\n                        </Typography>\n                    </Stack>\n                    <OutlinedInput\n                        id='toolDesc'\n                        type='string'\n                        fullWidth\n                        disabled={dialogProps.type === 'TEMPLATE'}\n                        placeholder='Description of what the tool does. This is for ChatGPT to determine when to use this tool.'\n                        multiline={true}\n                        rows={3}\n                        value={toolDesc}\n                        name='toolDesc'\n                        onChange={(e) => setToolDesc(e.target.value)}\n                    />\n                </Box>\n                <Box sx={{ p: 2 }}>\n                    <Stack sx={{ position: 'relative' }} direction='row'>\n                        <Typography variant='overline'>Tool Icon Src</Typography>\n                    </Stack>\n                    <OutlinedInput\n                        id='toolIcon'\n                        type='string'\n                        fullWidth\n                        disabled={dialogProps.type === 'TEMPLATE'}\n                        placeholder='https://raw.githubusercontent.com/gilbarbara/logos/main/logos/airtable.svg'\n                        value={toolIcon}\n                        name='toolIcon'\n                        onChange={(e) => setToolIcon(e.target.value)}\n                    />\n                </Box>\n                <Box sx={{ p: 2 }}>\n                    <Stack sx={{ position: 'relative' }} direction='row'>\n                        <Typography variant='overline'>\n                            Output Schema\n                            <TooltipWithParser style={{ marginLeft: 10 }} title={'What should be the output response in JSON format?'} />\n                        </Typography>\n                    </Stack>\n                    <Grid\n                        columns={columns}\n                        rows={toolSchema}\n                        disabled={dialogProps.type === 'TEMPLATE'}\n                        addNewRow={addNewRow}\n                        onRowUpdate={onRowUpdate}\n                    />\n                </Box>\n                <Box sx={{ p: 2 }}>\n                    <Stack sx={{ position: 'relative' }} direction='row'>\n                        <Typography variant='overline'>\n                            Javascript Function\n                            <TooltipWithParser\n                                style={{ marginLeft: 10 }}\n                                title='Function to execute when tool is being used. You can use properties specified in Output Schema as variables. For example, if the property is <code>userid</code>, you can use as <code>$userid</code>. Return value must be a string. You can also override the code from API by following this <a target=\"_blank\" href=\"https://docs.flowiseai.com/tools/custom-tool#override-function-from-api\">guide</a>'\n                            />\n                        </Typography>\n                    </Stack>\n                    {dialogProps.type !== 'TEMPLATE' && (\n                        <Button style={{ marginBottom: 10 }} variant='outlined' onClick={() => setToolFunc(exampleAPIFunc)}>\n                            See Example\n                        </Button>\n                    )}\n                    {customization.isDarkMode ? (\n                        <DarkCodeEditor\n                            value={toolFunc}\n                            disabled={dialogProps.type === 'TEMPLATE'}\n                            onValueChange={(code) => setToolFunc(code)}\n                            style={{\n                                fontSize: '0.875rem',\n                                minHeight: 'calc(100vh - 220px)',\n                                width: '100%',\n                                borderRadius: 5\n                            }}\n                        />\n                    ) : (\n                        <LightCodeEditor\n                            value={toolFunc}\n                            disabled={dialogProps.type === 'TEMPLATE'}\n                            onValueChange={(code) => setToolFunc(code)}\n                            style={{\n                                fontSize: '0.875rem',\n                                minHeight: 'calc(100vh - 220px)',\n                                width: '100%',\n                                border: `1px solid ${theme.palette.grey[300]}`,\n                                borderRadius: 5\n                            }}\n                        />\n                    )}\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                {dialogProps.type === 'EDIT' && (\n                    <StyledButton color='error' variant='contained' onClick={() => deleteTool()}>\n                        Delete\n                    </StyledButton>\n                )}\n                {dialogProps.type === 'TEMPLATE' && (\n                    <StyledButton color='secondary' variant='contained' onClick={useToolTemplate}>\n                        Use Template\n                    </StyledButton>\n                )}\n                {dialogProps.type !== 'TEMPLATE' && (\n                    <StyledButton\n                        disabled={!(toolName && toolDesc)}\n                        variant='contained'\n                        onClick={() => (dialogProps.type === 'ADD' || dialogProps.type === 'IMPORT' ? addNewTool() : saveTool())}\n                    >\n                        {dialogProps.confirmButtonName}\n                    </StyledButton>\n                )}\n            </DialogActions>\n            <ConfirmDialog />\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nToolDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onUseTemplate: PropTypes.func,\n    onCancel: PropTypes.func,\n    onConfirm: PropTypes.func\n}\n\nexport default ToolDialog\n"],"names":["getAllTools","client","get","getSpecificTool","id","concat","createNewTool","body","post","updateTool","put","deleteTool","delete","_ref","show","dialogProps","onCancel","portalElement","document","getElementById","dispatch","useDispatch","inputParams","setInputParams","useState","data","setData","useEffect","type","SHOW_CANVAS_DIALOG","HIDE_CANVAS_DIALOG","component","_jsx","Dialog","onClose","open","fullWidth","maxWidth","children","DialogContent","PerfectScrollbar","style","height","maxHeight","overflowX","map","inputParam","index","NodeInputHandler","disabled","isAdditionalParams","createPortal","programmingLanguages","javascript","python","java","c","cpp","ruby","php","swift","kotlin","typescript","go","perl","rust","scala","haskell","lua","shell","sql","html","css","CodeBlock","memo","_theme$palette","language","chatflowid","isDialog","value","theme","useTheme","anchorEl","setAnchorEl","openPopOver","Boolean","handleClosePopOver","_jsxs","width","Box","sx","color","background","palette","common","dark","p","borderTopLeftRadius","borderTopRightRadius","display","flexDirection","alignItems","flex","IconButton","size","title","onClick","event","navigator","clipboard","writeText","currentTarget","setTimeout","IconClipboard","Popover","anchorOrigin","vertical","horizontal","transformOrigin","Typography","variant","pl","pr","success","downloadAsFile","fileExtension","fileName","blob","Blob","url","URL","createObjectURL","link","createElement","download","href","appendChild","click","removeChild","revokeObjectURL","IconDownload","SyntaxHighlighter","oneDark","customStyle","margin","displayName","MemoizedReactMarkdown","ReactMarkdown","prevProps","nextProps","DataGrid","_formatDataGridRows","columns","rows","hideFooter","onChange","rowValues","setRowValues","formatDataGridRows","deleteItem","useCallback","updatedRows","prevRows","allRows","cloneDeep","filter","row","JSON","stringify","colValues","field","getActions","params","GridActionsCellItem","icon","DeleteIcon","label","addCols","getEmptyJsonObj","obj","i","length","_colValues$i","_Fragment","marginTop","MUIDataGrid","processRowUpdate","newRow","indexToUpdate","findIndex","isCellEditable","onProcessRowUpdateError","error","console","Button","mt","addNewRow","lastRowId","push","startIcon","IconPlus","customization","useSelector","state","DialogTitle","fontSize","JsonEditorInput","newValue","isDarkMode","nodes","edges","nodeId","NewLineToBr","split","reduce","arr","line","Accordion","styled","props","MuiAccordion","disableGutters","elevation","square","_ref2","border","divider","borderBottom","AccordionSummary","MuiAccordionSummary","expandIcon","ArrowForwardIosSharpIcon","_ref3","backgroundColor","mode","transform","marginLeft","spacing","AccordionDetails","MuiAccordionDetails","_ref4","padding","borderTop","_ref5","_selectedPrompt$detai","promptType","onSubmit","getAvailablePromptsApi","useApi","promptApi","request","tags","_getAvailablePromptsA","repos","setAvailablePrompNameList","handleListItemClick","MenuProps","PaperProps","ITEM_HEIGHT","modelName","setModelName","usecase","setUsecase","setLanguage","availablePrompNameList","selectedPrompt","setSelectedPrompt","accordionExpanded","setAccordionExpanded","handleAccordionChange","accordionName","isExpanded","accordians","accr","async","overridePromptNameList","arguments","undefined","prompt","detailed","createResp","promptName","full_name","templates","removeDuplicates","duplicateRemoved","forEach","item","o","dividers","pt","FormControl","mr","InputLabel","Select","labelId","multiple","target","input","OutlinedInput","renderValue","selected","x","name","join","endAdornment","ClearIcon","fill","MenuItem","Checkbox","checked","ListItemText","primary","autoWidth","disableElevation","Stack","justifyContent","pb","objectFit","src","promptEmptySVG","alt","Grid","xs","container","textAlign","Card","overflow","borderRadius","CardContent","gutterBottom","List","ListItemButton","fontWeight","flexWrap","tag","Chip","marginRight","marginBottom","expanded","includes","ExpandMoreIcon","wordWrap","typeDisplay","toUpperCase","whiteSpace","fontFamily","wordSpacing","lineHeight","template","description","opacity","remarkPlugins","remarkGfm","remarkMath","rehypePlugins","rehypeMathjax","rehypeRaw","components","code","_ref6","inline","className","match","exec","String","replace","Math","random","readme","DialogActions","StyledButton","EDITABLE_OPTIONS","CustomWidthTooltip","Tooltip","classes","popper","tooltipClasses","tooltip","_data$inputs$inputPar2","_data$inputs$inputPar3","_data$inputs$inputPar4","_ref7","_data$inputs$inputPar5","_ref8","_data$inputs$inputPar6","_ref9","_data$inputs$inputPar8","_ref10","_data$inputs$inputPar9","_ref11","_data$inputs$inputPar10","inputAnchor","ref","useRef","reactFlowInstance","useContext","flowContext","updateNodeInternals","useUpdateNodeInternals","position","setPosition","showExpandDialog","setShowExpandDialog","expandDialogProps","setExpandDialogProps","showAsyncOptionDialog","setAsyncOptionEditDialog","asyncOptionEditDialogProps","setAsyncOptionEditDialogProps","reloadTimestamp","setReloadTimestamp","Date","now","toString","showFormatPromptValuesDialog","setShowFormatPromptValuesDialog","formatPromptValuesDialogProps","setFormatPromptValuesDialogProps","showPromptHubDialog","setShowPromptHubDialog","onConfirmAsyncOption","selectedOptionId","inputs","current","offsetTop","clientHeight","placement","Handle","Position","Left","isValidConnection","connection","main","text","secondary","top","optional","TooltipWithParser","additionalParams","acceptVariable","mb","endIcon","IconAutoFixHigh","PromptLangsmithHubDialog","t","Object","prototype","hasOwnProperty","call","flexGrow","_data$inputs$inputPar","onExpandDialogClicked","confirmButtonName","cancelButtonName","default","IconArrowsMaximize","warning","IconAlertTriangle","CredentialInputHandler","onSelect","credential","FLOWISE_CREDENTIAL_ID","File","fileType","SwitchInput","datagrid","Input","getNodes","getEdges","showDialog","onDialogCancel","onDialogConfirm","inputParamName","onExpandDialogSave","_data$inputs$inputPar7","onFormatPromptValuesClicked","inputValue","_data$inputs$template","_data$inputs$systemMe","_data$inputs$humanMes","templateValue","inputVariables","getInputVariables","inputVariable","keys","dialogProp","FormatPromptValuesDialog","Dropdown","options","MultiDropdown","AsyncDropdown","nodeData","isCreateNewOption","onCreateNew","addAsyncOption","editAsyncOption","toolId","assistantId","IconEdit","ToolDialog","onConfirm","AssistantDialog","_outputAnchor$options","_outputAnchor$options2","_outputAnchor$options3","_outputAnchor$options4","_data$outputs$outputA","outputAnchor","dropdownValue","setDropdownValue","_ref$current","_ref$current2","_ref$current3","_ref$current4","Right","find","opt","_data$outputs","outputs","_data$outputs2","disableClearable","onRowUpdate","onUseTemplate","useNotifier","confirm","useConfirm","enqueueSnackbar","enqueueSnackbarAction","closeSnackbar","closeSnackbarAction","getSpecificToolApi","toolsApi","setToolId","toolName","setToolName","toolDesc","setToolDesc","toolIcon","setToolIcon","toolSchema","setToolSchema","toolFunc","setToolFunc","useMemo","headerName","editable","valueOptions","schema","func","iconSrc","toolResp","toolData","createdDate","updatedDate","dataStr","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","setAttribute","errorData","response","status","statusText","message","key","getTime","persist","action","IconX","exportTool","IconFileExport","direction","placeholder","e","multiline","property","required","DarkCodeEditor","onValueChange","minHeight","LightCodeEditor","grey","confirmPayload","useToolTemplate","generateRandomGradient","addNewTool","saveResp","saveTool","ConfirmDialog"],"sourceRoot":""}