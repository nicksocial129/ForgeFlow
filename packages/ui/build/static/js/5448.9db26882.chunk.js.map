{"version":3,"file":"static/js/5448.9db26882.chunk.js","mappings":"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","sources":["api/tools.js","ui-component/tooltip/TooltipWithParser.js","api/marketplaces.js","views/marketplaces/index.js","ui-component/grid/Grid.js","views/tools/ToolDialog.js"],"sourcesContent":["import client from './client'\n\nconst getAllTools = () => client.get('/tools')\n\nconst getSpecificTool = (id) => client.get(`/tools/${id}`)\n\nconst createNewTool = (body) => client.post(`/tools`, body)\n\nconst updateTool = (id, body) => client.put(`/tools/${id}`, body)\n\nconst deleteTool = (id) => client.delete(`/tools/${id}`)\n\nexport default {\n    getAllTools,\n    getSpecificTool,\n    createNewTool,\n    updateTool,\n    deleteTool\n}\n","import { Info } from '@mui/icons-material'\nimport { IconButton, Tooltip } from '@mui/material'\nimport parser from 'html-react-parser'\nimport PropTypes from 'prop-types'\nimport { useSelector } from 'react-redux'\n\nexport const TooltipWithParser = ({ title, style }) => {\n    const customization = useSelector((state) => state.customization)\n\n    return (\n        <Tooltip title={parser(title)} placement='right'>\n            <IconButton sx={{ height: 15, width: 15 }}>\n                <Info\n                    style={{\n                        ...style,\n                        background: 'transparent',\n                        color: customization.isDarkMode ? 'white' : 'inherit',\n                        height: 15,\n                        width: 15\n                    }}\n                />\n            </IconButton>\n        </Tooltip>\n    )\n}\n\nTooltipWithParser.propTypes = {\n    title: PropTypes.node,\n    style: PropTypes.any\n}\n","import client from './client'\n\nconst getAllChatflowsMarketplaces = () => client.get('/marketplaces/chatflows')\nconst getAllToolsMarketplaces = () => client.get('/marketplaces/tools')\n\nexport default {\n    getAllChatflowsMarketplaces,\n    getAllToolsMarketplaces\n}\n","import { useEffect, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\nimport PropTypes from 'prop-types'\n\n// material-ui\nimport { Grid, Box, Stack, Tabs, Tab, Badge } from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport { IconHierarchy, IconTool } from '@tabler/icons'\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard'\nimport ItemCard from 'ui-component/cards/ItemCard'\nimport { gridSpacing } from 'store/constant'\nimport WorkflowEmptySVG from 'assets/images/workflow_empty.svg'\nimport ToolDialog from 'views/tools/ToolDialog'\n\n// API\nimport marketplacesApi from 'api/marketplaces'\n\n// Hooks\nimport useApi from 'hooks/useApi'\n\n// const\nimport { baseURL } from 'store/constant'\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`attachment-tabpanel-${index}`}\n            aria-labelledby={`attachment-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box sx={{ p: 1 }}>{children}</Box>}\n        </div>\n    )\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired\n}\n\n// ==============================|| Marketplace ||============================== //\n\nconst Marketplace = () => {\n    const navigate = useNavigate()\n\n    const theme = useTheme()\n    const customization = useSelector((state) => state.customization)\n\n    const [isChatflowsLoading, setChatflowsLoading] = useState(true)\n    const [isToolsLoading, setToolsLoading] = useState(true)\n    const [images, setImages] = useState({})\n    const tabItems = ['Chatflows', 'Tools']\n    const [value, setValue] = useState(0)\n    const [showToolDialog, setShowToolDialog] = useState(false)\n    const [toolDialogProps, setToolDialogProps] = useState({})\n\n    const getAllChatflowsMarketplacesApi = useApi(marketplacesApi.getAllChatflowsMarketplaces)\n    const getAllToolsMarketplacesApi = useApi(marketplacesApi.getAllToolsMarketplaces)\n\n    const onUseTemplate = (selectedTool) => {\n        const dialogProp = {\n            title: 'Add New Tool',\n            type: 'IMPORT',\n            cancelButtonName: 'Cancel',\n            confirmButtonName: 'Add',\n            data: selectedTool\n        }\n        setToolDialogProps(dialogProp)\n        setShowToolDialog(true)\n    }\n\n    const goToTool = (selectedTool) => {\n        const dialogProp = {\n            title: selectedTool.templateName,\n            type: 'TEMPLATE',\n            data: selectedTool\n        }\n        setToolDialogProps(dialogProp)\n        setShowToolDialog(true)\n    }\n\n    const goToCanvas = (selectedChatflow) => {\n        navigate(`/marketplace/${selectedChatflow.id}`, { state: selectedChatflow })\n    }\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue)\n    }\n\n    useEffect(() => {\n        getAllChatflowsMarketplacesApi.request()\n        getAllToolsMarketplacesApi.request()\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect(() => {\n        setChatflowsLoading(getAllChatflowsMarketplacesApi.loading)\n    }, [getAllChatflowsMarketplacesApi.loading])\n\n    useEffect(() => {\n        setToolsLoading(getAllToolsMarketplacesApi.loading)\n    }, [getAllToolsMarketplacesApi.loading])\n\n    useEffect(() => {\n        if (getAllChatflowsMarketplacesApi.data) {\n            try {\n                const chatflows = getAllChatflowsMarketplacesApi.data\n                const images = {}\n                for (let i = 0; i < chatflows.length; i += 1) {\n                    const flowDataStr = chatflows[i].flowData\n                    const flowData = JSON.parse(flowDataStr)\n                    const nodes = flowData.nodes || []\n                    images[chatflows[i].id] = []\n                    for (let j = 0; j < nodes.length; j += 1) {\n                        const imageSrc = `${baseURL}/api/v1/node-icon/${nodes[j].data.name}`\n                        if (!images[chatflows[i].id].includes(imageSrc)) {\n                            images[chatflows[i].id].push(imageSrc)\n                        }\n                    }\n                }\n                setImages(images)\n            } catch (e) {\n                console.error(e)\n            }\n        }\n    }, [getAllChatflowsMarketplacesApi.data])\n\n    return (\n        <>\n            <MainCard sx={{ background: customization.isDarkMode ? theme.palette.common.black : '' }}>\n                <Stack flexDirection='row'>\n                    <h1>Marketplace</h1>\n                </Stack>\n                <Tabs sx={{ mb: 2 }} variant='fullWidth' value={value} onChange={handleChange} aria-label='tabs'>\n                    {tabItems.map((item, index) => (\n                        <Tab\n                            key={index}\n                            icon={index === 0 ? <IconHierarchy /> : <IconTool />}\n                            iconPosition='start'\n                            label={<span style={{ fontSize: '1.1rem' }}>{item}</span>}\n                        />\n                    ))}\n                </Tabs>\n                {tabItems.map((item, index) => (\n                    <TabPanel key={index} value={value} index={index}>\n                        {item === 'Chatflows' && (\n                            <Grid container spacing={gridSpacing}>\n                                {!isChatflowsLoading &&\n                                    getAllChatflowsMarketplacesApi.data &&\n                                    getAllChatflowsMarketplacesApi.data.map((data, index) => (\n                                        <Grid key={index} item lg={3} md={4} sm={6} xs={12}>\n                                            {data.badge && (\n                                                <Badge\n                                                    sx={{\n                                                        '& .MuiBadge-badge': {\n                                                            right: 20\n                                                        }\n                                                    }}\n                                                    badgeContent={data.badge}\n                                                    color={data.badge === 'POPULAR' ? 'primary' : 'error'}\n                                                >\n                                                    <ItemCard onClick={() => goToCanvas(data)} data={data} images={images[data.id]} />\n                                                </Badge>\n                                            )}\n                                            {!data.badge && (\n                                                <ItemCard onClick={() => goToCanvas(data)} data={data} images={images[data.id]} />\n                                            )}\n                                        </Grid>\n                                    ))}\n                            </Grid>\n                        )}\n                        {item === 'Tools' && (\n                            <Grid container spacing={gridSpacing}>\n                                {!isToolsLoading &&\n                                    getAllToolsMarketplacesApi.data &&\n                                    getAllToolsMarketplacesApi.data.map((data, index) => (\n                                        <Grid key={index} item lg={3} md={4} sm={6} xs={12}>\n                                            {data.badge && (\n                                                <Badge\n                                                    sx={{\n                                                        '& .MuiBadge-badge': {\n                                                            right: 20\n                                                        }\n                                                    }}\n                                                    badgeContent={data.badge}\n                                                    color={data.badge === 'POPULAR' ? 'primary' : 'error'}\n                                                >\n                                                    <ItemCard data={data} onClick={() => goToTool(data)} />\n                                                </Badge>\n                                            )}\n                                            {!data.badge && <ItemCard data={data} onClick={() => goToTool(data)} />}\n                                        </Grid>\n                                    ))}\n                            </Grid>\n                        )}\n                    </TabPanel>\n                ))}\n                {((!isChatflowsLoading && (!getAllChatflowsMarketplacesApi.data || getAllChatflowsMarketplacesApi.data.length === 0)) ||\n                    (!isToolsLoading && (!getAllToolsMarketplacesApi.data || getAllToolsMarketplacesApi.data.length === 0))) && (\n                    <Stack sx={{ alignItems: 'center', justifyContent: 'center' }} flexDirection='column'>\n                        <Box sx={{ p: 2, height: 'auto' }}>\n                            <img\n                                style={{ objectFit: 'cover', height: '30vh', width: 'auto' }}\n                                src={WorkflowEmptySVG}\n                                alt='WorkflowEmptySVG'\n                            />\n                        </Box>\n                        <div>No Marketplace Yet</div>\n                    </Stack>\n                )}\n            </MainCard>\n            <ToolDialog\n                show={showToolDialog}\n                dialogProps={toolDialogProps}\n                onCancel={() => setShowToolDialog(false)}\n                onConfirm={() => setShowToolDialog(false)}\n                onUseTemplate={(tool) => onUseTemplate(tool)}\n            ></ToolDialog>\n        </>\n    )\n}\n\nexport default Marketplace\n","import PropTypes from 'prop-types'\nimport { DataGrid } from '@mui/x-data-grid'\nimport { IconPlus } from '@tabler/icons'\nimport { Button } from '@mui/material'\n\nexport const Grid = ({ columns, rows, style, disabled = false, onRowUpdate, addNewRow }) => {\n    const handleProcessRowUpdate = (newRow) => {\n        onRowUpdate(newRow)\n        return newRow\n    }\n\n    return (\n        <>\n            {!disabled && (\n                <Button variant='outlined' onClick={addNewRow} startIcon={<IconPlus />}>\n                    Add Item\n                </Button>\n            )}\n            {rows && columns && (\n                <div style={{ marginTop: 10, height: 300, width: '100%', ...style }}>\n                    <DataGrid\n                        processRowUpdate={handleProcessRowUpdate}\n                        isCellEditable={() => {\n                            return !disabled\n                        }}\n                        onProcessRowUpdateError={(error) => console.error(error)}\n                        rows={rows}\n                        columns={columns}\n                    />\n                </div>\n            )}\n        </>\n    )\n}\n\nGrid.propTypes = {\n    rows: PropTypes.array,\n    columns: PropTypes.array,\n    style: PropTypes.any,\n    disabled: PropTypes.bool,\n    addNewRow: PropTypes.func,\n    onRowUpdate: PropTypes.func\n}\n","import { createPortal } from 'react-dom'\nimport PropTypes from 'prop-types'\nimport { useState, useEffect, useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { enqueueSnackbar as enqueueSnackbarAction, closeSnackbar as closeSnackbarAction } from 'store/actions'\nimport { cloneDeep } from 'lodash'\n\nimport { Box, Typography, Button, Dialog, DialogActions, DialogContent, DialogTitle, Stack, OutlinedInput } from '@mui/material'\nimport { StyledButton } from 'ui-component/button/StyledButton'\nimport { Grid } from 'ui-component/grid/Grid'\nimport { TooltipWithParser } from 'ui-component/tooltip/TooltipWithParser'\nimport { GridActionsCellItem } from '@mui/x-data-grid'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport ConfirmDialog from 'ui-component/dialog/ConfirmDialog'\nimport { DarkCodeEditor } from 'ui-component/editor/DarkCodeEditor'\nimport { LightCodeEditor } from 'ui-component/editor/LightCodeEditor'\nimport { useTheme } from '@mui/material/styles'\n\n// Icons\nimport { IconX, IconFileExport } from '@tabler/icons'\n\n// API\nimport toolsApi from 'api/tools'\n\n// Hooks\nimport useConfirm from 'hooks/useConfirm'\nimport useApi from 'hooks/useApi'\n\n// utils\nimport useNotifier from 'utils/useNotifier'\nimport { generateRandomGradient, formatDataGridRows } from 'utils/genericHelper'\nimport { HIDE_CANVAS_DIALOG, SHOW_CANVAS_DIALOG } from 'store/actions'\n\nconst exampleAPIFunc = `/*\n* You can use any libraries imported in Flowise\n* You can use properties specified in Output Schema as variables. Ex: Property = userid, Variable = $userid\n* Must return a string value at the end of function\n*/\n\nconst fetch = require('node-fetch');\nconst url = 'https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current_weather=true';\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}`\n\nconst ToolDialog = ({ show, dialogProps, onUseTemplate, onCancel, onConfirm }) => {\n    const portalElement = document.getElementById('portal')\n    const theme = useTheme()\n\n    const customization = useSelector((state) => state.customization)\n    const dispatch = useDispatch()\n\n    // ==============================|| Snackbar ||============================== //\n\n    useNotifier()\n    const { confirm } = useConfirm()\n\n    const enqueueSnackbar = (...args) => dispatch(enqueueSnackbarAction(...args))\n    const closeSnackbar = (...args) => dispatch(closeSnackbarAction(...args))\n\n    const getSpecificToolApi = useApi(toolsApi.getSpecificTool)\n\n    const [toolId, setToolId] = useState('')\n    const [toolName, setToolName] = useState('')\n    const [toolDesc, setToolDesc] = useState('')\n    const [toolIcon, setToolIcon] = useState('')\n    const [toolSchema, setToolSchema] = useState([])\n    const [toolFunc, setToolFunc] = useState('')\n\n    const deleteItem = useCallback(\n        (id) => () => {\n            setTimeout(() => {\n                setToolSchema((prevRows) => prevRows.filter((row) => row.id !== id))\n            })\n        },\n        []\n    )\n\n    const addNewRow = () => {\n        setTimeout(() => {\n            setToolSchema((prevRows) => {\n                let allRows = [...cloneDeep(prevRows)]\n                const lastRowId = allRows.length ? allRows[allRows.length - 1].id + 1 : 1\n                allRows.push({\n                    id: lastRowId,\n                    property: '',\n                    description: '',\n                    type: '',\n                    required: false\n                })\n                return allRows\n            })\n        })\n    }\n\n    const onRowUpdate = (newRow) => {\n        setTimeout(() => {\n            setToolSchema((prevRows) => {\n                let allRows = [...cloneDeep(prevRows)]\n                const indexToUpdate = allRows.findIndex((row) => row.id === newRow.id)\n                if (indexToUpdate >= 0) {\n                    allRows[indexToUpdate] = { ...newRow }\n                }\n                return allRows\n            })\n        })\n    }\n\n    const columns = useMemo(\n        () => [\n            { field: 'property', headerName: 'Property', editable: true, flex: 1 },\n            {\n                field: 'type',\n                headerName: 'Type',\n                type: 'singleSelect',\n                valueOptions: ['string', 'number', 'boolean', 'date'],\n                editable: true,\n                width: 120\n            },\n            { field: 'description', headerName: 'Description', editable: true, flex: 1 },\n            { field: 'required', headerName: 'Required', type: 'boolean', editable: true, width: 80 },\n            {\n                field: 'actions',\n                type: 'actions',\n                width: 80,\n                getActions: (params) => [\n                    <GridActionsCellItem key={'Delete'} icon={<DeleteIcon />} label='Delete' onClick={deleteItem(params.id)} />\n                ]\n            }\n        ],\n        [deleteItem]\n    )\n\n    useEffect(() => {\n        if (show) dispatch({ type: SHOW_CANVAS_DIALOG })\n        else dispatch({ type: HIDE_CANVAS_DIALOG })\n        return () => dispatch({ type: HIDE_CANVAS_DIALOG })\n    }, [show, dispatch])\n\n    useEffect(() => {\n        if (getSpecificToolApi.data) {\n            setToolId(getSpecificToolApi.data.id)\n            setToolName(getSpecificToolApi.data.name)\n            setToolDesc(getSpecificToolApi.data.description)\n            setToolSchema(formatDataGridRows(getSpecificToolApi.data.schema))\n            if (getSpecificToolApi.data.func) setToolFunc(getSpecificToolApi.data.func)\n            else setToolFunc('')\n        }\n    }, [getSpecificToolApi.data])\n\n    useEffect(() => {\n        if (dialogProps.type === 'EDIT' && dialogProps.data) {\n            // When tool dialog is opened from Tools dashboard\n            setToolId(dialogProps.data.id)\n            setToolName(dialogProps.data.name)\n            setToolDesc(dialogProps.data.description)\n            setToolIcon(dialogProps.data.iconSrc)\n            setToolSchema(formatDataGridRows(dialogProps.data.schema))\n            if (dialogProps.data.func) setToolFunc(dialogProps.data.func)\n            else setToolFunc('')\n        } else if (dialogProps.type === 'EDIT' && dialogProps.toolId) {\n            // When tool dialog is opened from CustomTool node in canvas\n            getSpecificToolApi.request(dialogProps.toolId)\n        } else if (dialogProps.type === 'IMPORT' && dialogProps.data) {\n            // When tool dialog is to import existing tool\n            setToolName(dialogProps.data.name)\n            setToolDesc(dialogProps.data.description)\n            setToolIcon(dialogProps.data.iconSrc)\n            setToolSchema(formatDataGridRows(dialogProps.data.schema))\n            if (dialogProps.data.func) setToolFunc(dialogProps.data.func)\n            else setToolFunc('')\n        } else if (dialogProps.type === 'TEMPLATE' && dialogProps.data) {\n            // When tool dialog is a template\n            setToolName(dialogProps.data.name)\n            setToolDesc(dialogProps.data.description)\n            setToolIcon(dialogProps.data.iconSrc)\n            setToolSchema(formatDataGridRows(dialogProps.data.schema))\n            if (dialogProps.data.func) setToolFunc(dialogProps.data.func)\n            else setToolFunc('')\n        } else if (dialogProps.type === 'ADD') {\n            // When tool dialog is to add a new tool\n            setToolId('')\n            setToolName('')\n            setToolDesc('')\n            setToolIcon('')\n            setToolSchema([])\n            setToolFunc('')\n        }\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [dialogProps])\n\n    const useToolTemplate = () => {\n        onUseTemplate(dialogProps.data)\n    }\n\n    const exportTool = async () => {\n        try {\n            const toolResp = await toolsApi.getSpecificTool(toolId)\n            if (toolResp.data) {\n                const toolData = toolResp.data\n                delete toolData.id\n                delete toolData.createdDate\n                delete toolData.updatedDate\n                let dataStr = JSON.stringify(toolData, null, 2)\n                let dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr)\n\n                let exportFileDefaultName = `${toolName}-CustomTool.json`\n\n                let linkElement = document.createElement('a')\n                linkElement.setAttribute('href', dataUri)\n                linkElement.setAttribute('download', exportFileDefaultName)\n                linkElement.click()\n            }\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to export Tool: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n            onCancel()\n        }\n    }\n\n    const addNewTool = async () => {\n        try {\n            const obj = {\n                name: toolName,\n                description: toolDesc,\n                color: generateRandomGradient(),\n                schema: JSON.stringify(toolSchema),\n                func: toolFunc,\n                iconSrc: toolIcon\n            }\n            const createResp = await toolsApi.createNewTool(obj)\n            if (createResp.data) {\n                enqueueSnackbar({\n                    message: 'New Tool added',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                onConfirm(createResp.data.id)\n            }\n        } catch (error) {\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to add new Tool: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n            onCancel()\n        }\n    }\n\n    const saveTool = async () => {\n        try {\n            const saveResp = await toolsApi.updateTool(toolId, {\n                name: toolName,\n                description: toolDesc,\n                schema: JSON.stringify(toolSchema),\n                func: toolFunc,\n                iconSrc: toolIcon\n            })\n            if (saveResp.data) {\n                enqueueSnackbar({\n                    message: 'Tool saved',\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'success',\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                onConfirm(saveResp.data.id)\n            }\n        } catch (error) {\n            console.error(error)\n            const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n            enqueueSnackbar({\n                message: `Failed to save Tool: ${errorData}`,\n                options: {\n                    key: new Date().getTime() + Math.random(),\n                    variant: 'error',\n                    persist: true,\n                    action: (key) => (\n                        <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                            <IconX />\n                        </Button>\n                    )\n                }\n            })\n            onCancel()\n        }\n    }\n\n    const deleteTool = async () => {\n        const confirmPayload = {\n            title: `Delete Tool`,\n            description: `Delete tool ${toolName}?`,\n            confirmButtonName: 'Delete',\n            cancelButtonName: 'Cancel'\n        }\n        const isConfirmed = await confirm(confirmPayload)\n\n        if (isConfirmed) {\n            try {\n                const delResp = await toolsApi.deleteTool(toolId)\n                if (delResp.data) {\n                    enqueueSnackbar({\n                        message: 'Tool deleted',\n                        options: {\n                            key: new Date().getTime() + Math.random(),\n                            variant: 'success',\n                            action: (key) => (\n                                <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                    <IconX />\n                                </Button>\n                            )\n                        }\n                    })\n                    onConfirm()\n                }\n            } catch (error) {\n                const errorData = error.response.data || `${error.response.status}: ${error.response.statusText}`\n                enqueueSnackbar({\n                    message: `Failed to delete Tool: ${errorData}`,\n                    options: {\n                        key: new Date().getTime() + Math.random(),\n                        variant: 'error',\n                        persist: true,\n                        action: (key) => (\n                            <Button style={{ color: 'white' }} onClick={() => closeSnackbar(key)}>\n                                <IconX />\n                            </Button>\n                        )\n                    }\n                })\n                onCancel()\n            }\n        }\n    }\n\n    const component = show ? (\n        <Dialog\n            fullWidth\n            maxWidth='md'\n            open={show}\n            onClose={onCancel}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle sx={{ fontSize: '1rem' }} id='alert-dialog-title'>\n                <div style={{ display: 'flex', flexDirection: 'row' }}>\n                    {dialogProps.title}\n                    <div style={{ flex: 1 }} />\n                    {dialogProps.type === 'EDIT' && (\n                        <Button variant='outlined' onClick={() => exportTool()} startIcon={<IconFileExport />}>\n                            Export\n                        </Button>\n                    )}\n                </div>\n            </DialogTitle>\n            <DialogContent>\n                <Box sx={{ p: 2 }}>\n                    <Stack sx={{ position: 'relative' }} direction='row'>\n                        <Typography variant='overline'>\n                            Tool Name\n                            <span style={{ color: 'red' }}>&nbsp;*</span>\n                            <TooltipWithParser\n                                style={{ marginLeft: 10 }}\n                                title={'Tool name must be small capital letter with underscore. Ex: my_tool'}\n                            />\n                        </Typography>\n                    </Stack>\n                    <OutlinedInput\n                        id='toolName'\n                        type='string'\n                        fullWidth\n                        disabled={dialogProps.type === 'TEMPLATE'}\n                        placeholder='My New Tool'\n                        value={toolName}\n                        name='toolName'\n                        onChange={(e) => setToolName(e.target.value)}\n                    />\n                </Box>\n                <Box sx={{ p: 2 }}>\n                    <Stack sx={{ position: 'relative' }} direction='row'>\n                        <Typography variant='overline'>\n                            Tool description\n                            <span style={{ color: 'red' }}>&nbsp;*</span>\n                            <TooltipWithParser\n                                style={{ marginLeft: 10 }}\n                                title={'Description of what the tool does. This is for ChatGPT to determine when to use this tool.'}\n                            />\n                        </Typography>\n                    </Stack>\n                    <OutlinedInput\n                        id='toolDesc'\n                        type='string'\n                        fullWidth\n                        disabled={dialogProps.type === 'TEMPLATE'}\n                        placeholder='Description of what the tool does. This is for ChatGPT to determine when to use this tool.'\n                        multiline={true}\n                        rows={3}\n                        value={toolDesc}\n                        name='toolDesc'\n                        onChange={(e) => setToolDesc(e.target.value)}\n                    />\n                </Box>\n                <Box sx={{ p: 2 }}>\n                    <Stack sx={{ position: 'relative' }} direction='row'>\n                        <Typography variant='overline'>Tool Icon Src</Typography>\n                    </Stack>\n                    <OutlinedInput\n                        id='toolIcon'\n                        type='string'\n                        fullWidth\n                        disabled={dialogProps.type === 'TEMPLATE'}\n                        placeholder='https://raw.githubusercontent.com/gilbarbara/logos/main/logos/airtable.svg'\n                        value={toolIcon}\n                        name='toolIcon'\n                        onChange={(e) => setToolIcon(e.target.value)}\n                    />\n                </Box>\n                <Box sx={{ p: 2 }}>\n                    <Stack sx={{ position: 'relative' }} direction='row'>\n                        <Typography variant='overline'>\n                            Output Schema\n                            <TooltipWithParser style={{ marginLeft: 10 }} title={'What should be the output response in JSON format?'} />\n                        </Typography>\n                    </Stack>\n                    <Grid\n                        columns={columns}\n                        rows={toolSchema}\n                        disabled={dialogProps.type === 'TEMPLATE'}\n                        addNewRow={addNewRow}\n                        onRowUpdate={onRowUpdate}\n                    />\n                </Box>\n                <Box sx={{ p: 2 }}>\n                    <Stack sx={{ position: 'relative' }} direction='row'>\n                        <Typography variant='overline'>\n                            Javascript Function\n                            <TooltipWithParser\n                                style={{ marginLeft: 10 }}\n                                title='Function to execute when tool is being used. You can use properties specified in Output Schema as variables. For example, if the property is <code>userid</code>, you can use as <code>$userid</code>. Return value must be a string. You can also override the code from API by following this <a target=\"_blank\" href=\"https://docs.flowiseai.com/tools/custom-tool#override-function-from-api\">guide</a>'\n                            />\n                        </Typography>\n                    </Stack>\n                    {dialogProps.type !== 'TEMPLATE' && (\n                        <Button style={{ marginBottom: 10 }} variant='outlined' onClick={() => setToolFunc(exampleAPIFunc)}>\n                            See Example\n                        </Button>\n                    )}\n                    {customization.isDarkMode ? (\n                        <DarkCodeEditor\n                            value={toolFunc}\n                            disabled={dialogProps.type === 'TEMPLATE'}\n                            onValueChange={(code) => setToolFunc(code)}\n                            style={{\n                                fontSize: '0.875rem',\n                                minHeight: 'calc(100vh - 220px)',\n                                width: '100%',\n                                borderRadius: 5\n                            }}\n                        />\n                    ) : (\n                        <LightCodeEditor\n                            value={toolFunc}\n                            disabled={dialogProps.type === 'TEMPLATE'}\n                            onValueChange={(code) => setToolFunc(code)}\n                            style={{\n                                fontSize: '0.875rem',\n                                minHeight: 'calc(100vh - 220px)',\n                                width: '100%',\n                                border: `1px solid ${theme.palette.grey[300]}`,\n                                borderRadius: 5\n                            }}\n                        />\n                    )}\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                {dialogProps.type === 'EDIT' && (\n                    <StyledButton color='error' variant='contained' onClick={() => deleteTool()}>\n                        Delete\n                    </StyledButton>\n                )}\n                {dialogProps.type === 'TEMPLATE' && (\n                    <StyledButton color='secondary' variant='contained' onClick={useToolTemplate}>\n                        Use Template\n                    </StyledButton>\n                )}\n                {dialogProps.type !== 'TEMPLATE' && (\n                    <StyledButton\n                        disabled={!(toolName && toolDesc)}\n                        variant='contained'\n                        onClick={() => (dialogProps.type === 'ADD' || dialogProps.type === 'IMPORT' ? addNewTool() : saveTool())}\n                    >\n                        {dialogProps.confirmButtonName}\n                    </StyledButton>\n                )}\n            </DialogActions>\n            <ConfirmDialog />\n        </Dialog>\n    ) : null\n\n    return createPortal(component, portalElement)\n}\n\nToolDialog.propTypes = {\n    show: PropTypes.bool,\n    dialogProps: PropTypes.object,\n    onUseTemplate: PropTypes.func,\n    onCancel: PropTypes.func,\n    onConfirm: PropTypes.func\n}\n\nexport default ToolDialog\n"],"names":["getAllTools","client","get","getSpecificTool","id","concat","createNewTool","body","post","updateTool","put","deleteTool","delete","TooltipWithParser","_ref","title","style","customization","useSelector","state","_jsx","Tooltip","parser","placement","children","IconButton","sx","height","width","Info","background","color","isDarkMode","getAllChatflowsMarketplaces","getAllToolsMarketplaces","TabPanel","props","value","index","other","role","hidden","Box","p","Marketplace","navigate","useNavigate","theme","useTheme","isChatflowsLoading","setChatflowsLoading","useState","isToolsLoading","setToolsLoading","images","setImages","tabItems","setValue","showToolDialog","setShowToolDialog","toolDialogProps","setToolDialogProps","getAllChatflowsMarketplacesApi","useApi","marketplacesApi","getAllToolsMarketplacesApi","goToTool","selectedTool","dialogProp","templateName","type","data","goToCanvas","selectedChatflow","useEffect","request","loading","chatflows","i","length","flowDataStr","flowData","nodes","JSON","parse","j","imageSrc","baseURL","name","includes","push","e","console","error","_jsxs","_Fragment","MainCard","palette","common","black","Stack","flexDirection","Tabs","mb","variant","onChange","handleChange","event","newValue","map","item","Tab","icon","IconHierarchy","IconTool","iconPosition","label","fontSize","Grid","container","spacing","gridSpacing","lg","md","sm","xs","badge","Badge","right","badgeContent","ItemCard","onClick","alignItems","justifyContent","objectFit","src","WorkflowEmptySVG","alt","ToolDialog","show","dialogProps","onCancel","onConfirm","onUseTemplate","tool","cancelButtonName","confirmButtonName","columns","rows","disabled","onRowUpdate","addNewRow","Button","startIcon","IconPlus","marginTop","DataGrid","processRowUpdate","newRow","isCellEditable","onProcessRowUpdateError","portalElement","document","getElementById","dispatch","useDispatch","useNotifier","confirm","useConfirm","enqueueSnackbar","enqueueSnackbarAction","arguments","closeSnackbar","closeSnackbarAction","getSpecificToolApi","toolsApi","toolId","setToolId","toolName","setToolName","toolDesc","setToolDesc","toolIcon","setToolIcon","toolSchema","setToolSchema","toolFunc","setToolFunc","deleteItem","useCallback","setTimeout","prevRows","filter","row","useMemo","field","headerName","editable","flex","valueOptions","getActions","params","GridActionsCellItem","DeleteIcon","SHOW_CANVAS_DIALOG","HIDE_CANVAS_DIALOG","description","formatDataGridRows","schema","func","iconSrc","component","Dialog","fullWidth","maxWidth","open","onClose","DialogTitle","display","async","toolResp","toolData","createdDate","updatedDate","dataStr","stringify","dataUri","encodeURIComponent","exportFileDefaultName","linkElement","createElement","setAttribute","click","errorData","response","status","statusText","message","options","key","Date","getTime","Math","random","persist","action","IconX","exportTool","IconFileExport","DialogContent","position","direction","Typography","marginLeft","OutlinedInput","placeholder","target","multiline","allRows","cloneDeep","lastRowId","property","required","indexToUpdate","findIndex","marginBottom","DarkCodeEditor","onValueChange","code","minHeight","borderRadius","LightCodeEditor","border","grey","DialogActions","StyledButton","confirmPayload","useToolTemplate","obj","generateRandomGradient","createResp","addNewTool","saveResp","saveTool","ConfirmDialog","createPortal"],"sourceRoot":""}