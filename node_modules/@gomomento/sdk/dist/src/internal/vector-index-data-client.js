"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VectorIndexDataClient = void 0;
const package_json_1 = require("../../package.json");
const sdk_core_1 = require("@gomomento/sdk-core");
const grpc_js_1 = require("@grpc/grpc-js");
const vectorindex_1 = require("@gomomento/generated-types/dist/vectorindex");
const headers_interceptor_1 = require("./grpc/headers-interceptor");
const client_timeout_interceptor_1 = require("./grpc/client-timeout-interceptor");
const cache_service_error_mapper_1 = require("../errors/cache-service-error-mapper");
const utils_1 = require("@gomomento/sdk-core/dist/src/internal/utils");
const errors_1 = require("@gomomento/sdk-core/dist/src/errors");
class VectorIndexDataClient {
    constructor(props) {
        this.configuration = props.configuration;
        this.credentialProvider = props.credentialProvider;
        this.logger = this.configuration.getLoggerFactory().getLogger(this);
        this.cacheServiceErrorMapper = new cache_service_error_mapper_1.CacheServiceErrorMapper(this.configuration.getThrowOnErrors());
        const grpcConfig = this.configuration
            .getTransportStrategy()
            .getGrpcConfig();
        this.requestTimeoutMs = grpcConfig.getDeadlineMillis();
        this.validateRequestTimeout(this.requestTimeoutMs);
        this.logger.debug(`Creating vector index client using endpoint: '${this.credentialProvider.getVectorEndpoint()}'`);
        this.client = new vectorindex_1.vectorindex.VectorIndexClient(this.credentialProvider.getVectorEndpoint(), grpc_js_1.ChannelCredentials.createSsl(), {
            // default value for max session memory is 10mb.  Under high load, it is easy to exceed this,
            // after which point all requests will fail with a client-side RESOURCE_EXHAUSTED exception.
            'grpc-node.max_session_memory': grpcConfig.getMaxSessionMemoryMb(),
            // This flag controls whether channels use a shared global pool of subchannels, or whether
            // each channel gets its own subchannel pool.  The default value is 0, meaning a single global
            // pool.  Setting it to 1 provides significant performance improvements when we instantiate more
            // than one grpc client.
            'grpc.use_local_subchannel_pool': 1,
            // The following settings are based on https://github.com/grpc/grpc/blob/e35db43c07f27cc13ec061520da1ed185f36abd4/doc/keepalive.md ,
            // and guidance provided on various github issues for grpc-node. They will enable keepalive pings when a
            // client connection is idle.
            'grpc.keepalive_permit_without_calls': 1,
            'grpc.keepalive_timeout_ms': 1000,
            'grpc.keepalive_time_ms': 5000,
        });
        this.interceptors = this.initializeInterceptors(this.configuration.getLoggerFactory());
    }
    async countItems(indexName) {
        try {
            (0, utils_1.validateIndexName)(indexName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.VectorCountItems.Error(err));
        }
        return await this.sendCountItems(indexName);
    }
    async sendCountItems(indexName) {
        const request = new vectorindex_1.vectorindex._CountItemsRequest({
            index_name: indexName,
            all: new vectorindex_1.vectorindex._CountItemsRequest.All(),
        });
        return await new Promise((resolve, reject) => {
            this.client.CountItems(request, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.VectorCountItems.Success(resp.item_count));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.VectorCountItems.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async upsertItemBatch(indexName, items) {
        let request;
        try {
            (0, utils_1.validateIndexName)(indexName);
            // Create the request here to catch any metadata validation errors.
            request = VectorIndexDataClient.buildUpsertItemBatchRequest(indexName, items);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.VectorUpsertItemBatch.Error(err));
        }
        return await this.sendUpsertItemBatch(indexName, request);
    }
    static buildUpsertItemBatchRequest(indexName, items) {
        return new vectorindex_1.vectorindex._UpsertItemBatchRequest({
            index_name: indexName,
            items: items.map(item => {
                return new vectorindex_1.vectorindex._Item({
                    id: item.id,
                    vector: new vectorindex_1.vectorindex._Vector({ elements: item.vector }),
                    metadata: VectorIndexDataClient.convertItemMetadataToProtobufMetadata(item),
                });
            }),
        });
    }
    static convertItemMetadataToProtobufMetadata(item) {
        if (item.metadata === undefined) {
            return [];
        }
        return Object.entries(item.metadata).map(([key, value]) => {
            if (typeof value === 'string') {
                return new vectorindex_1.vectorindex._Metadata({
                    field: key,
                    string_value: value,
                });
            }
            else if (typeof value === 'number') {
                if (Number.isInteger(value)) {
                    return new vectorindex_1.vectorindex._Metadata({
                        field: key,
                        integer_value: value,
                    });
                }
                else {
                    return new vectorindex_1.vectorindex._Metadata({
                        field: key,
                        double_value: value,
                    });
                }
            }
            else if (typeof value === 'boolean') {
                return new vectorindex_1.vectorindex._Metadata({
                    field: key,
                    boolean_value: value,
                });
            }
            else if (Array.isArray(value) &&
                value.every(item => typeof item === 'string')) {
                return new vectorindex_1.vectorindex._Metadata({
                    field: key,
                    list_of_strings_value: new vectorindex_1.vectorindex._Metadata._ListOfStrings({
                        values: value,
                    }),
                });
            }
            else {
                throw new sdk_core_1.InvalidArgumentError(`Metadata value for field '${key}' is not a valid type. Value is of type '${typeof value} and is not a string, number, boolean, or array of strings.'`);
            }
        });
    }
    async sendUpsertItemBatch(indexName, request) {
        return await new Promise((resolve, reject) => {
            this.client.UpsertItemBatch(request, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.VectorUpsertItemBatch.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.VectorUpsertItemBatch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async deleteItemBatch(indexName, ids) {
        try {
            (0, utils_1.validateIndexName)(indexName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.VectorDeleteItemBatch.Error(err));
        }
        return await this.sendDeleteItemBatch(indexName, ids);
    }
    async sendDeleteItemBatch(indexName, ids) {
        const request = new vectorindex_1.vectorindex._DeleteItemBatchRequest({
            index_name: indexName,
            ids: ids,
        });
        return await new Promise((resolve, reject) => {
            this.client.DeleteItemBatch(request, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.VectorDeleteItemBatch.Success());
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.VectorDeleteItemBatch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async search(indexName, queryVector, options) {
        try {
            (0, utils_1.validateIndexName)(indexName);
            if ((options === null || options === void 0 ? void 0 : options.topK) !== undefined) {
                (0, utils_1.validateTopK)(options.topK);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.VectorSearch.Error(err));
        }
        return await this.sendSearch(indexName, queryVector, options);
    }
    static buildMetadataRequest(options) {
        const metadataRequest = new vectorindex_1.vectorindex._MetadataRequest();
        if ((options === null || options === void 0 ? void 0 : options.metadataFields) === sdk_core_1.ALL_VECTOR_METADATA) {
            metadataRequest.all = new vectorindex_1.vectorindex._MetadataRequest.All();
        }
        else {
            metadataRequest.some = new vectorindex_1.vectorindex._MetadataRequest.Some({
                fields: (options === null || options === void 0 ? void 0 : options.metadataFields) === undefined ? [] : options.metadataFields,
            });
        }
        return metadataRequest;
    }
    static applyScoreThreshold(request, options) {
        if ((options === null || options === void 0 ? void 0 : options.scoreThreshold) !== undefined) {
            request.score_threshold = options.scoreThreshold;
        }
        else {
            request.no_score_threshold = new vectorindex_1.vectorindex._NoScoreThreshold();
        }
    }
    static buildFilterExpression(filterExpression) {
        if (filterExpression === undefined) {
            return undefined;
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterAndExpression) {
            return new vectorindex_1.vectorindex._FilterExpression({
                and_expression: new vectorindex_1.vectorindex._AndExpression({
                    first_expression: VectorIndexDataClient.buildFilterExpression(filterExpression.FirstExpression),
                    second_expression: VectorIndexDataClient.buildFilterExpression(filterExpression.SecondExpression),
                }),
            });
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterOrExpression) {
            return new vectorindex_1.vectorindex._FilterExpression({
                or_expression: new vectorindex_1.vectorindex._OrExpression({
                    first_expression: VectorIndexDataClient.buildFilterExpression(filterExpression.FirstExpression),
                    second_expression: VectorIndexDataClient.buildFilterExpression(filterExpression.SecondExpression),
                }),
            });
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterNotExpression) {
            return new vectorindex_1.vectorindex._FilterExpression({
                not_expression: new vectorindex_1.vectorindex._NotExpression({
                    expression_to_negate: VectorIndexDataClient.buildFilterExpression(filterExpression.Expression),
                }),
            });
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterEqualsExpression) {
            if (typeof filterExpression.Value === 'string') {
                return new vectorindex_1.vectorindex._FilterExpression({
                    equals_expression: new vectorindex_1.vectorindex._EqualsExpression({
                        field: filterExpression.Field,
                        string_value: filterExpression.Value,
                    }),
                });
            }
            else if (typeof filterExpression.Value === 'number') {
                if (Number.isInteger(filterExpression.Value)) {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        equals_expression: new vectorindex_1.vectorindex._EqualsExpression({
                            field: filterExpression.Field,
                            integer_value: filterExpression.Value,
                        }),
                    });
                }
                else {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        equals_expression: new vectorindex_1.vectorindex._EqualsExpression({
                            field: filterExpression.Field,
                            float_value: filterExpression.Value,
                        }),
                    });
                }
            }
            else if (typeof filterExpression.Value === 'boolean') {
                return new vectorindex_1.vectorindex._FilterExpression({
                    equals_expression: new vectorindex_1.vectorindex._EqualsExpression({
                        field: filterExpression.Field,
                        boolean_value: filterExpression.Value,
                    }),
                });
            }
            else {
                throw new sdk_core_1.InvalidArgumentError(`Filter value for field '${filterExpression.Field}' is not a valid type. Value is of type '${typeof filterExpression.Value} and is not a string, number, or boolean.'`);
            }
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterGreaterThanExpression) {
            if (typeof filterExpression.Value === 'number') {
                if (Number.isInteger(filterExpression.Value)) {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        greater_than_expression: new vectorindex_1.vectorindex._GreaterThanExpression({
                            field: filterExpression.Field,
                            integer_value: filterExpression.Value,
                        }),
                    });
                }
                else {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        greater_than_expression: new vectorindex_1.vectorindex._GreaterThanExpression({
                            field: filterExpression.Field,
                            float_value: filterExpression.Value,
                        }),
                    });
                }
            }
            else {
                throw new sdk_core_1.InvalidArgumentError(`Filter value for field '${filterExpression.Field}' is not a valid type. Value is of type '${typeof filterExpression.Value} and is not a number.'`);
            }
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterGreaterThanOrEqualExpression) {
            if (typeof filterExpression.Value === 'number') {
                if (Number.isInteger(filterExpression.Value)) {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        greater_than_or_equal_expression: new vectorindex_1.vectorindex._GreaterThanOrEqualExpression({
                            field: filterExpression.Field,
                            integer_value: filterExpression.Value,
                        }),
                    });
                }
                else {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        greater_than_or_equal_expression: new vectorindex_1.vectorindex._GreaterThanOrEqualExpression({
                            field: filterExpression.Field,
                            float_value: filterExpression.Value,
                        }),
                    });
                }
            }
            else {
                throw new sdk_core_1.InvalidArgumentError(`Filter value for field '${filterExpression.Field}' is not a valid type. Value is of type '${typeof filterExpression.Value} and is not a number.'`);
            }
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterLessThanExpression) {
            if (typeof filterExpression.Value === 'number') {
                if (Number.isInteger(filterExpression.Value)) {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        less_than_expression: new vectorindex_1.vectorindex._LessThanExpression({
                            field: filterExpression.Field,
                            integer_value: filterExpression.Value,
                        }),
                    });
                }
                else {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        less_than_expression: new vectorindex_1.vectorindex._LessThanExpression({
                            field: filterExpression.Field,
                            float_value: filterExpression.Value,
                        }),
                    });
                }
            }
            else {
                throw new sdk_core_1.InvalidArgumentError(`Filter value for field '${filterExpression.Field}' is not a valid type. Value is of type '${typeof filterExpression.Value} and is not a number.'`);
            }
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterLessThanOrEqualExpression) {
            if (typeof filterExpression.Value === 'number') {
                if (Number.isInteger(filterExpression.Value)) {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        less_than_or_equal_expression: new vectorindex_1.vectorindex._LessThanOrEqualExpression({
                            field: filterExpression.Field,
                            integer_value: filterExpression.Value,
                        }),
                    });
                }
                else {
                    return new vectorindex_1.vectorindex._FilterExpression({
                        less_than_or_equal_expression: new vectorindex_1.vectorindex._LessThanOrEqualExpression({
                            field: filterExpression.Field,
                            float_value: filterExpression.Value,
                        }),
                    });
                }
            }
            else {
                throw new sdk_core_1.InvalidArgumentError(`Filter value for field '${filterExpression.Field}' is not a valid type. Value is of type '${typeof filterExpression.Value} and is not a number.'`);
            }
        }
        else if (filterExpression instanceof sdk_core_1.vectorFilters.VectorFilterListContainsExpression) {
            if (typeof filterExpression.Value === 'string') {
                return new vectorindex_1.vectorindex._FilterExpression({
                    list_contains_expression: new vectorindex_1.vectorindex._ListContainsExpression({
                        field: filterExpression.Field,
                        string_value: filterExpression.Value,
                    }),
                });
            }
            else {
                throw new sdk_core_1.InvalidArgumentError(`Filter value for field '${filterExpression.Field}' is not a valid type. Value is of type '${typeof filterExpression.Value} and is not a string.'`);
            }
        }
        throw new sdk_core_1.InvalidArgumentError('Filter expression is not a valid type.');
    }
    static deserializeMetadata(metadata, errorCallback) {
        return metadata.reduce((acc, metadata) => {
            const field = metadata.field;
            switch (metadata.value) {
                case 'string_value':
                    acc[field] = metadata.string_value;
                    break;
                case 'integer_value':
                    acc[field] = metadata.integer_value;
                    break;
                case 'double_value':
                    acc[field] = metadata.double_value;
                    break;
                case 'boolean_value':
                    acc[field] = metadata.boolean_value;
                    break;
                case 'list_of_strings_value':
                    acc[field] = metadata.list_of_strings_value.values;
                    break;
                default:
                    errorCallback();
                    break;
            }
            return acc;
        }, {});
    }
    async sendSearch(indexName, queryVector, options) {
        var _a;
        const request = new vectorindex_1.vectorindex._SearchRequest({
            index_name: indexName,
            query_vector: new vectorindex_1.vectorindex._Vector({ elements: queryVector }),
            top_k: (_a = options === null || options === void 0 ? void 0 : options.topK) !== null && _a !== void 0 ? _a : sdk_core_1.VECTOR_DEFAULT_TOPK,
            metadata_fields: VectorIndexDataClient.buildMetadataRequest(options),
            filter_expression: VectorIndexDataClient.buildFilterExpression(options === null || options === void 0 ? void 0 : options.filterExpression),
        });
        VectorIndexDataClient.applyScoreThreshold(request, options);
        return await new Promise((resolve, reject) => {
            this.client.Search(request, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.VectorSearch.Success(resp.hits.map(hit => ({
                        id: hit.id,
                        score: hit.score,
                        metadata: VectorIndexDataClient.deserializeMetadata(hit.metadata, () => resolve(new sdk_core_1.VectorSearch.Error(new errors_1.UnknownError('Search responded with an unknown result')))),
                    }))));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.VectorSearch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async searchAndFetchVectors(indexName, queryVector, options) {
        try {
            (0, utils_1.validateIndexName)(indexName);
            if ((options === null || options === void 0 ? void 0 : options.topK) !== undefined) {
                (0, utils_1.validateTopK)(options.topK);
            }
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.VectorSearchAndFetchVectors.Error(err));
        }
        return await this.sendSearchAndFetchVectors(indexName, queryVector, options);
    }
    async sendSearchAndFetchVectors(indexName, queryVector, options) {
        var _a;
        const request = new vectorindex_1.vectorindex._SearchAndFetchVectorsRequest({
            index_name: indexName,
            query_vector: new vectorindex_1.vectorindex._Vector({ elements: queryVector }),
            top_k: (_a = options === null || options === void 0 ? void 0 : options.topK) !== null && _a !== void 0 ? _a : sdk_core_1.VECTOR_DEFAULT_TOPK,
            metadata_fields: VectorIndexDataClient.buildMetadataRequest(options),
            filter_expression: VectorIndexDataClient.buildFilterExpression(options === null || options === void 0 ? void 0 : options.filterExpression),
        });
        VectorIndexDataClient.applyScoreThreshold(request, options);
        return await new Promise((resolve, reject) => {
            this.client.SearchAndFetchVectors(request, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.VectorSearchAndFetchVectors.Success(resp.hits.map(hit => ({
                        id: hit.id,
                        score: hit.score,
                        vector: hit.vector.elements,
                        metadata: VectorIndexDataClient.deserializeMetadata(hit.metadata, () => resolve(new sdk_core_1.VectorSearchAndFetchVectors.Error(new errors_1.UnknownError('SearchAndFetchVectors responded with an unknown result')))),
                    }))));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.VectorSearchAndFetchVectors.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async getItemBatch(indexName, ids) {
        try {
            (0, utils_1.validateIndexName)(indexName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.VectorGetItemBatch.Error(err));
        }
        return await this.sendGetItemBatch(indexName, ids);
    }
    async sendGetItemBatch(indexName, ids) {
        const request = new vectorindex_1.vectorindex._GetItemBatchRequest({
            index_name: indexName,
            ids: ids,
            metadata_fields: VectorIndexDataClient.buildMetadataRequest({
                metadataFields: sdk_core_1.ALL_VECTOR_METADATA,
            }),
        });
        return await new Promise((resolve, reject) => {
            this.client.GetItemBatch(request, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.VectorGetItemBatch.Success(resp.item_response.reduce((acc, itemResponse) => {
                        switch (itemResponse.response) {
                            case 'hit':
                                acc[itemResponse.hit.id] = {
                                    id: itemResponse.hit.id,
                                    vector: itemResponse.hit.vector.elements,
                                    metadata: VectorIndexDataClient.deserializeMetadata(itemResponse.hit.metadata, () => resolve(new sdk_core_1.VectorGetItemBatch.Error(new errors_1.UnknownError('GetItemBatch responded with an unknown result')))),
                                };
                                break;
                            case 'miss':
                                break;
                            default:
                                resolve(new sdk_core_1.VectorGetItemBatch.Error(new errors_1.UnknownError('GetItemBatch responded with an unknown result')));
                                break;
                        }
                        return acc;
                    }, {})));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.VectorGetItemBatch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    async getItemMetadataBatch(indexName, ids) {
        try {
            (0, utils_1.validateIndexName)(indexName);
        }
        catch (err) {
            return this.cacheServiceErrorMapper.returnOrThrowError(err, err => new sdk_core_1.VectorGetItemMetadataBatch.Error(err));
        }
        return await this.sendGetItemMetadataBatch(indexName, ids);
    }
    async sendGetItemMetadataBatch(indexName, ids) {
        const request = new vectorindex_1.vectorindex._GetItemMetadataBatchRequest({
            index_name: indexName,
            ids: ids,
            metadata_fields: VectorIndexDataClient.buildMetadataRequest({
                metadataFields: sdk_core_1.ALL_VECTOR_METADATA,
            }),
        });
        return await new Promise((resolve, reject) => {
            this.client.GetItemMetadataBatch(request, { interceptors: this.interceptors }, (err, resp) => {
                if (resp) {
                    resolve(new sdk_core_1.VectorGetItemMetadataBatch.Success(resp.item_metadata_response.reduce((acc, itemResponse) => {
                        switch (itemResponse.response) {
                            case 'hit':
                                acc[itemResponse.hit.id] =
                                    VectorIndexDataClient.deserializeMetadata(itemResponse.hit.metadata, () => resolve(new sdk_core_1.VectorGetItemMetadataBatch.Error(new errors_1.UnknownError('GetItemMetadataBatch responded with an unknown result'))));
                                break;
                            case 'miss':
                                break;
                            default:
                                resolve(new sdk_core_1.VectorGetItemMetadataBatch.Error(new errors_1.UnknownError('GetItemMetadataBatch responded with an unknown result')));
                                break;
                        }
                        return acc;
                    }, {})));
                }
                else {
                    this.cacheServiceErrorMapper.resolveOrRejectError({
                        err: err,
                        errorResponseFactoryFn: e => new sdk_core_1.VectorGetItemMetadataBatch.Error(e),
                        resolveFn: resolve,
                        rejectFn: reject,
                    });
                }
            });
        });
    }
    validateRequestTimeout(timeout) {
        this.logger.debug(`Request timeout ms: ${String(timeout)}`);
        if (timeout !== undefined && timeout <= 0) {
            throw new sdk_core_1.InvalidArgumentError('request timeout must be greater than zero.');
        }
    }
    initializeInterceptors(_loggerFactory) {
        const headers = [
            new headers_interceptor_1.Header('Authorization', this.credentialProvider.getAuthToken()),
            new headers_interceptor_1.Header('Agent', `nodejs:${package_json_1.version}`),
        ];
        return [
            new headers_interceptor_1.HeaderInterceptorProvider(headers).createHeadersInterceptor(),
            (0, client_timeout_interceptor_1.ClientTimeoutInterceptor)(this.requestTimeoutMs),
        ];
    }
}
exports.VectorIndexDataClient = VectorIndexDataClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVjdG9yLWluZGV4LWRhdGEtY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2ludGVybmFsL3ZlY3Rvci1pbmRleC1kYXRhLWNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxREFBMkM7QUFFM0Msa0RBbUI2QjtBQUU3QiwyQ0FBOEQ7QUFDOUQsNkVBQXdFO0FBQ3hFLG9FQUE2RTtBQUM3RSxrRkFBMkU7QUFDM0UscUZBQTZFO0FBQzdFLHVFQUdxRDtBQUNyRCxnRUFBaUU7QUFHakUsTUFBYSxxQkFBcUI7SUFTaEMsWUFBWSxLQUF1QztRQUNqRCxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7UUFDekMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztRQUNuRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksb0RBQXVCLENBQ3hELElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLEVBQUUsQ0FDdEMsQ0FBQztRQUNGLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhO2FBQ2xDLG9CQUFvQixFQUFFO2FBQ3RCLGFBQWEsRUFBRSxDQUFDO1FBRW5CLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN2RCxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ2YsaURBQWlELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLENBQ2hHLENBQUM7UUFFRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUkseUJBQVcsQ0FBQyxp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QUFDO0lBQ0osQ0FBQztDQUNGO0FBeDBCRCxzREF3MEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt2ZXJzaW9ufSBmcm9tICcuLi8uLi9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHtJVmVjdG9ySW5kZXhEYXRhQ2xpZW50fSBmcm9tICdAZ29tb21lbnRvL3Nkay1jb3JlL2Rpc3Qvc3JjL2ludGVybmFsL2NsaWVudHMvdmVjdG9yL0lWZWN0b3JJbmRleERhdGFDbGllbnQnO1xuaW1wb3J0IHtcbiAgQUxMX1ZFQ1RPUl9NRVRBREFUQSxcbiAgQ3JlZGVudGlhbFByb3ZpZGVyLFxuICBJbnZhbGlkQXJndW1lbnRFcnJvcixcbiAgTW9tZW50b0xvZ2dlcixcbiAgTW9tZW50b0xvZ2dlckZhY3RvcnksXG4gIFNlYXJjaE9wdGlvbnMsXG4gIFZFQ1RPUl9ERUZBVUxUX1RPUEssXG4gIFZlY3RvckNvdW50SXRlbXMsXG4gIFZlY3RvckRlbGV0ZUl0ZW1CYXRjaCxcbiAgdmVjdG9yRmlsdGVycyBhcyBGLFxuICBWZWN0b3JHZXRJdGVtQmF0Y2gsXG4gIFZlY3RvckdldEl0ZW1NZXRhZGF0YUJhdGNoLFxuICBWZWN0b3JJbmRleEl0ZW0sXG4gIFZlY3RvckluZGV4TWV0YWRhdGEsXG4gIFZlY3RvckluZGV4U3RvcmVkSXRlbSxcbiAgVmVjdG9yU2VhcmNoLFxuICBWZWN0b3JTZWFyY2hBbmRGZXRjaFZlY3RvcnMsXG4gIFZlY3RvclVwc2VydEl0ZW1CYXRjaCxcbn0gZnJvbSAnQGdvbW9tZW50by9zZGstY29yZSc7XG5pbXBvcnQge1ZlY3RvckluZGV4Q29uZmlndXJhdGlvbn0gZnJvbSAnLi4vY29uZmlnL3ZlY3Rvci1pbmRleC1jb25maWd1cmF0aW9uJztcbmltcG9ydCB7Q2hhbm5lbENyZWRlbnRpYWxzLCBJbnRlcmNlcHRvcn0gZnJvbSAnQGdycGMvZ3JwYy1qcyc7XG5pbXBvcnQge3ZlY3RvcmluZGV4fSBmcm9tICdAZ29tb21lbnRvL2dlbmVyYXRlZC10eXBlcy9kaXN0L3ZlY3RvcmluZGV4JztcbmltcG9ydCB7SGVhZGVyLCBIZWFkZXJJbnRlcmNlcHRvclByb3ZpZGVyfSBmcm9tICcuL2dycGMvaGVhZGVycy1pbnRlcmNlcHRvcic7XG5pbXBvcnQge0NsaWVudFRpbWVvdXRJbnRlcmNlcHRvcn0gZnJvbSAnLi9ncnBjL2NsaWVudC10aW1lb3V0LWludGVyY2VwdG9yJztcbmltcG9ydCB7Q2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXJ9IGZyb20gJy4uL2Vycm9ycy9jYWNoZS1zZXJ2aWNlLWVycm9yLW1hcHBlcic7XG5pbXBvcnQge1xuICB2YWxpZGF0ZUluZGV4TmFtZSxcbiAgdmFsaWRhdGVUb3BLLFxufSBmcm9tICdAZ29tb21lbnRvL3Nkay1jb3JlL2Rpc3Qvc3JjL2ludGVybmFsL3V0aWxzJztcbmltcG9ydCB7VW5rbm93bkVycm9yfSBmcm9tICdAZ29tb21lbnRvL3Nkay1jb3JlL2Rpc3Qvc3JjL2Vycm9ycyc7XG5pbXBvcnQge1ZlY3RvckluZGV4Q2xpZW50UHJvcHNXaXRoQ29uZmlnfSBmcm9tICcuL3ZlY3Rvci1pbmRleC1jbGllbnQtcHJvcHMtd2l0aC1jb25maWcnO1xuXG5leHBvcnQgY2xhc3MgVmVjdG9ySW5kZXhEYXRhQ2xpZW50IGltcGxlbWVudHMgSVZlY3RvckluZGV4RGF0YUNsaWVudCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29uZmlndXJhdGlvbjogVmVjdG9ySW5kZXhDb25maWd1cmF0aW9uO1xuICBwcml2YXRlIHJlYWRvbmx5IGNyZWRlbnRpYWxQcm92aWRlcjogQ3JlZGVudGlhbFByb3ZpZGVyO1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogTW9tZW50b0xvZ2dlcjtcbiAgcHJpdmF0ZSByZWFkb25seSBjYWNoZVNlcnZpY2VFcnJvck1hcHBlcjogQ2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgcmVxdWVzdFRpbWVvdXRNczogbnVtYmVyO1xuICBwcml2YXRlIHJlYWRvbmx5IGNsaWVudDogdmVjdG9yaW5kZXguVmVjdG9ySW5kZXhDbGllbnQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgaW50ZXJjZXB0b3JzOiBJbnRlcmNlcHRvcltdO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBWZWN0b3JJbmRleENsaWVudFByb3BzV2l0aENvbmZpZykge1xuICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IHByb3BzLmNvbmZpZ3VyYXRpb247XG4gICAgdGhpcy5jcmVkZW50aWFsUHJvdmlkZXIgPSBwcm9wcy5jcmVkZW50aWFsUHJvdmlkZXI7XG4gICAgdGhpcy5sb2dnZXIgPSB0aGlzLmNvbmZpZ3VyYXRpb24uZ2V0TG9nZ2VyRmFjdG9yeSgpLmdldExvZ2dlcih0aGlzKTtcbiAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyID0gbmV3IENhY2hlU2VydmljZUVycm9yTWFwcGVyKFxuICAgICAgdGhpcy5jb25maWd1cmF0aW9uLmdldFRocm93T25FcnJvcnMoKVxuICAgICk7XG4gICAgY29uc3QgZ3JwY0NvbmZpZyA9IHRoaXMuY29uZmlndXJhdGlvblxuICAgICAgLmdldFRyYW5zcG9ydFN0cmF0ZWd5KClcbiAgICAgIC5nZXRHcnBjQ29uZmlnKCk7XG5cbiAgICB0aGlzLnJlcXVlc3RUaW1lb3V0TXMgPSBncnBjQ29uZmlnLmdldERlYWRsaW5lTWlsbGlzKCk7XG4gICAgdGhpcy52YWxpZGF0ZVJlcXVlc3RUaW1lb3V0KHRoaXMucmVxdWVzdFRpbWVvdXRNcyk7XG4gICAgdGhpcy5sb2dnZXIuZGVidWcoXG4gICAgICBgQ3JlYXRpbmcgdmVjdG9yIGluZGV4IGNsaWVudCB1c2luZyBlbmRwb2ludDogJyR7dGhpcy5jcmVkZW50aWFsUHJvdmlkZXIuZ2V0VmVjdG9yRW5kcG9pbnQoKX0nYFxuICAgICk7XG5cbiAgICB0aGlzLmNsaWVudCA9IG5ldyB2ZWN0b3JpbmRleC5WZWN0b3JJbmRleENsaWVudChcbiAgICAgIHRoaXMuY3JlZGVudGlhbFByb3ZpZGVyLmdldFZlY3RvckVuZHBvaW50KCksXG4gICAgICBDaGFubmVsQ3JlZGVudGlhbHMuY3JlYXRlU3NsKCksXG4gICAgICB7XG4gICAgICAgIC8vIGRlZmF1bHQgdmFsdWUgZm9yIG1heCBzZXNzaW9uIG1lbW9yeSBpcyAxMG1iLiAgVW5kZXIgaGlnaCBsb2FkLCBpdCBpcyBlYXN5IHRvIGV4Y2VlZCB0aGlzLFxuICAgICAgICAvLyBhZnRlciB3aGljaCBwb2ludCBhbGwgcmVxdWVzdHMgd2lsbCBmYWlsIHdpdGggYSBjbGllbnQtc2lkZSBSRVNPVVJDRV9FWEhBVVNURUQgZXhjZXB0aW9uLlxuICAgICAgICAnZ3JwYy1ub2RlLm1heF9zZXNzaW9uX21lbW9yeSc6IGdycGNDb25maWcuZ2V0TWF4U2Vzc2lvbk1lbW9yeU1iKCksXG4gICAgICAgIC8vIFRoaXMgZmxhZyBjb250cm9scyB3aGV0aGVyIGNoYW5uZWxzIHVzZSBhIHNoYXJlZCBnbG9iYWwgcG9vbCBvZiBzdWJjaGFubmVscywgb3Igd2hldGhlclxuICAgICAgICAvLyBlYWNoIGNoYW5uZWwgZ2V0cyBpdHMgb3duIHN1YmNoYW5uZWwgcG9vbC4gIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDAsIG1lYW5pbmcgYSBzaW5nbGUgZ2xvYmFsXG4gICAgICAgIC8vIHBvb2wuICBTZXR0aW5nIGl0IHRvIDEgcHJvdmlkZXMgc2lnbmlmaWNhbnQgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRzIHdoZW4gd2UgaW5zdGFudGlhdGUgbW9yZVxuICAgICAgICAvLyB0aGFuIG9uZSBncnBjIGNsaWVudC5cbiAgICAgICAgJ2dycGMudXNlX2xvY2FsX3N1YmNoYW5uZWxfcG9vbCc6IDEsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgc2V0dGluZ3MgYXJlIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9ncnBjL2dycGMvYmxvYi9lMzVkYjQzYzA3ZjI3Y2MxM2VjMDYxNTIwZGExZWQxODVmMzZhYmQ0L2RvYy9rZWVwYWxpdmUubWQgLFxuICAgICAgICAvLyBhbmQgZ3VpZGFuY2UgcHJvdmlkZWQgb24gdmFyaW91cyBnaXRodWIgaXNzdWVzIGZvciBncnBjLW5vZGUuIFRoZXkgd2lsbCBlbmFibGUga2VlcGFsaXZlIHBpbmdzIHdoZW4gYVxuICAgICAgICAvLyBjbGllbnQgY29ubmVjdGlvbiBpcyBpZGxlLlxuICAgICAgICAnZ3JwYy5rZWVwYWxpdmVfcGVybWl0X3dpdGhvdXRfY2FsbHMnOiAxLFxuICAgICAgICAnZ3JwYy5rZWVwYWxpdmVfdGltZW91dF9tcyc6IDEwMDAsXG4gICAgICAgICdncnBjLmtlZXBhbGl2ZV90aW1lX21zJzogNTAwMCxcbiAgICAgIH1cbiAgICApO1xuXG4gICAgdGhpcy5pbnRlcmNlcHRvcnMgPSB0aGlzLmluaXRpYWxpemVJbnRlcmNlcHRvcnMoXG4gICAgICB0aGlzLmNvbmZpZ3VyYXRpb24uZ2V0TG9nZ2VyRmFjdG9yeSgpXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBjb3VudEl0ZW1zKFxuICAgIGluZGV4TmFtZTogc3RyaW5nXG4gICk6IFByb21pc2U8VmVjdG9yQ291bnRJdGVtcy5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUluZGV4TmFtZShpbmRleE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgVmVjdG9yQ291bnRJdGVtcy5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kQ291bnRJdGVtcyhpbmRleE5hbWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kQ291bnRJdGVtcyhcbiAgICBpbmRleE5hbWU6IHN0cmluZ1xuICApOiBQcm9taXNlPFZlY3RvckNvdW50SXRlbXMuUmVzcG9uc2U+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IHZlY3RvcmluZGV4Ll9Db3VudEl0ZW1zUmVxdWVzdCh7XG4gICAgICBpbmRleF9uYW1lOiBpbmRleE5hbWUsXG4gICAgICBhbGw6IG5ldyB2ZWN0b3JpbmRleC5fQ291bnRJdGVtc1JlcXVlc3QuQWxsKCksXG4gICAgfSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50LkNvdW50SXRlbXMoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIHtpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBWZWN0b3JDb3VudEl0ZW1zLlN1Y2Nlc3MocmVzcC5pdGVtX2NvdW50KSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PiBuZXcgVmVjdG9yQ291bnRJdGVtcy5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwc2VydEl0ZW1CYXRjaChcbiAgICBpbmRleE5hbWU6IHN0cmluZyxcbiAgICBpdGVtczogQXJyYXk8VmVjdG9ySW5kZXhJdGVtPlxuICApOiBQcm9taXNlPFZlY3RvclVwc2VydEl0ZW1CYXRjaC5SZXNwb25zZT4ge1xuICAgIGxldCByZXF1ZXN0OiB2ZWN0b3JpbmRleC5fVXBzZXJ0SXRlbUJhdGNoUmVxdWVzdDtcbiAgICB0cnkge1xuICAgICAgdmFsaWRhdGVJbmRleE5hbWUoaW5kZXhOYW1lKTtcblxuICAgICAgLy8gQ3JlYXRlIHRoZSByZXF1ZXN0IGhlcmUgdG8gY2F0Y2ggYW55IG1ldGFkYXRhIHZhbGlkYXRpb24gZXJyb3JzLlxuICAgICAgcmVxdWVzdCA9IFZlY3RvckluZGV4RGF0YUNsaWVudC5idWlsZFVwc2VydEl0ZW1CYXRjaFJlcXVlc3QoXG4gICAgICAgIGluZGV4TmFtZSxcbiAgICAgICAgaXRlbXNcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBWZWN0b3JVcHNlcnRJdGVtQmF0Y2guRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZFVwc2VydEl0ZW1CYXRjaChpbmRleE5hbWUsIHJlcXVlc3QpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYnVpbGRVcHNlcnRJdGVtQmF0Y2hSZXF1ZXN0KFxuICAgIGluZGV4TmFtZTogc3RyaW5nLFxuICAgIGl0ZW1zOiBBcnJheTxWZWN0b3JJbmRleEl0ZW0+XG4gICk6IHZlY3RvcmluZGV4Ll9VcHNlcnRJdGVtQmF0Y2hSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IHZlY3RvcmluZGV4Ll9VcHNlcnRJdGVtQmF0Y2hSZXF1ZXN0KHtcbiAgICAgIGluZGV4X25hbWU6IGluZGV4TmFtZSxcbiAgICAgIGl0ZW1zOiBpdGVtcy5tYXAoaXRlbSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgdmVjdG9yaW5kZXguX0l0ZW0oe1xuICAgICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICAgIHZlY3RvcjogbmV3IHZlY3RvcmluZGV4Ll9WZWN0b3Ioe2VsZW1lbnRzOiBpdGVtLnZlY3Rvcn0pLFxuICAgICAgICAgIG1ldGFkYXRhOlxuICAgICAgICAgICAgVmVjdG9ySW5kZXhEYXRhQ2xpZW50LmNvbnZlcnRJdGVtTWV0YWRhdGFUb1Byb3RvYnVmTWV0YWRhdGEoaXRlbSksXG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBjb252ZXJ0SXRlbU1ldGFkYXRhVG9Qcm90b2J1Zk1ldGFkYXRhKFxuICAgIGl0ZW06IFZlY3RvckluZGV4SXRlbVxuICApOiB2ZWN0b3JpbmRleC5fTWV0YWRhdGFbXSB7XG4gICAgaWYgKGl0ZW0ubWV0YWRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoaXRlbS5tZXRhZGF0YSkubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBuZXcgdmVjdG9yaW5kZXguX01ldGFkYXRhKHtcbiAgICAgICAgICBmaWVsZDoga2V5LFxuICAgICAgICAgIHN0cmluZ192YWx1ZTogdmFsdWUsXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBuZXcgdmVjdG9yaW5kZXguX01ldGFkYXRhKHtcbiAgICAgICAgICAgIGZpZWxkOiBrZXksXG4gICAgICAgICAgICBpbnRlZ2VyX3ZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbmV3IHZlY3RvcmluZGV4Ll9NZXRhZGF0YSh7XG4gICAgICAgICAgICBmaWVsZDoga2V5LFxuICAgICAgICAgICAgZG91YmxlX3ZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gbmV3IHZlY3RvcmluZGV4Ll9NZXRhZGF0YSh7XG4gICAgICAgICAgZmllbGQ6IGtleSxcbiAgICAgICAgICBib29sZWFuX3ZhbHVlOiB2YWx1ZSxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBBcnJheS5pc0FycmF5KHZhbHVlKSAmJlxuICAgICAgICB2YWx1ZS5ldmVyeShpdGVtID0+IHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJylcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gbmV3IHZlY3RvcmluZGV4Ll9NZXRhZGF0YSh7XG4gICAgICAgICAgZmllbGQ6IGtleSxcbiAgICAgICAgICBsaXN0X29mX3N0cmluZ3NfdmFsdWU6IG5ldyB2ZWN0b3JpbmRleC5fTWV0YWRhdGEuX0xpc3RPZlN0cmluZ3Moe1xuICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgYE1ldGFkYXRhIHZhbHVlIGZvciBmaWVsZCAnJHtrZXl9JyBpcyBub3QgYSB2YWxpZCB0eXBlLiBWYWx1ZSBpcyBvZiB0eXBlICcke3R5cGVvZiB2YWx1ZX0gYW5kIGlzIG5vdCBhIHN0cmluZywgbnVtYmVyLCBib29sZWFuLCBvciBhcnJheSBvZiBzdHJpbmdzLidgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRVcHNlcnRJdGVtQmF0Y2goXG4gICAgaW5kZXhOYW1lOiBzdHJpbmcsXG4gICAgcmVxdWVzdDogdmVjdG9yaW5kZXguX1Vwc2VydEl0ZW1CYXRjaFJlcXVlc3RcbiAgKTogUHJvbWlzZTxWZWN0b3JVcHNlcnRJdGVtQmF0Y2guUmVzcG9uc2U+IHtcbiAgICByZXR1cm4gYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5jbGllbnQuVXBzZXJ0SXRlbUJhdGNoKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICB7aW50ZXJjZXB0b3JzOiB0aGlzLmludGVyY2VwdG9yc30sXG4gICAgICAgIChlcnIsIHJlc3ApID0+IHtcbiAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgVmVjdG9yVXBzZXJ0SXRlbUJhdGNoLlN1Y2Nlc3MoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PiBuZXcgVmVjdG9yVXBzZXJ0SXRlbUJhdGNoLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVsZXRlSXRlbUJhdGNoKFxuICAgIGluZGV4TmFtZTogc3RyaW5nLFxuICAgIGlkczogQXJyYXk8c3RyaW5nPlxuICApOiBQcm9taXNlPFZlY3RvckRlbGV0ZUl0ZW1CYXRjaC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUluZGV4TmFtZShpbmRleE5hbWUpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgVmVjdG9yRGVsZXRlSXRlbUJhdGNoLkVycm9yKGVycilcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLnNlbmREZWxldGVJdGVtQmF0Y2goaW5kZXhOYW1lLCBpZHMpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kRGVsZXRlSXRlbUJhdGNoKFxuICAgIGluZGV4TmFtZTogc3RyaW5nLFxuICAgIGlkczogQXJyYXk8c3RyaW5nPlxuICApOiBQcm9taXNlPFZlY3RvckRlbGV0ZUl0ZW1CYXRjaC5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgdmVjdG9yaW5kZXguX0RlbGV0ZUl0ZW1CYXRjaFJlcXVlc3Qoe1xuICAgICAgaW5kZXhfbmFtZTogaW5kZXhOYW1lLFxuICAgICAgaWRzOiBpZHMsXG4gICAgfSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50LkRlbGV0ZUl0ZW1CYXRjaChcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAge2ludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnN9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IFZlY3RvckRlbGV0ZUl0ZW1CYXRjaC5TdWNjZXNzKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJlc29sdmVPclJlamVjdEVycm9yKHtcbiAgICAgICAgICAgICAgZXJyOiBlcnIsXG4gICAgICAgICAgICAgIGVycm9yUmVzcG9uc2VGYWN0b3J5Rm46IGUgPT4gbmV3IFZlY3RvckRlbGV0ZUl0ZW1CYXRjaC5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHNlYXJjaChcbiAgICBpbmRleE5hbWU6IHN0cmluZyxcbiAgICBxdWVyeVZlY3RvcjogQXJyYXk8bnVtYmVyPixcbiAgICBvcHRpb25zPzogU2VhcmNoT3B0aW9uc1xuICApOiBQcm9taXNlPFZlY3RvclNlYXJjaC5SZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZGF0ZUluZGV4TmFtZShpbmRleE5hbWUpO1xuICAgICAgaWYgKG9wdGlvbnM/LnRvcEsgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWxpZGF0ZVRvcEsob3B0aW9ucy50b3BLKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlU2VydmljZUVycm9yTWFwcGVyLnJldHVybk9yVGhyb3dFcnJvcihcbiAgICAgICAgZXJyIGFzIEVycm9yLFxuICAgICAgICBlcnIgPT4gbmV3IFZlY3RvclNlYXJjaC5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kU2VhcmNoKGluZGV4TmFtZSwgcXVlcnlWZWN0b3IsIG9wdGlvbnMpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgYnVpbGRNZXRhZGF0YVJlcXVlc3QoXG4gICAgb3B0aW9ucz86IFNlYXJjaE9wdGlvbnNcbiAgKTogdmVjdG9yaW5kZXguX01ldGFkYXRhUmVxdWVzdCB7XG4gICAgY29uc3QgbWV0YWRhdGFSZXF1ZXN0ID0gbmV3IHZlY3RvcmluZGV4Ll9NZXRhZGF0YVJlcXVlc3QoKTtcbiAgICBpZiAob3B0aW9ucz8ubWV0YWRhdGFGaWVsZHMgPT09IEFMTF9WRUNUT1JfTUVUQURBVEEpIHtcbiAgICAgIG1ldGFkYXRhUmVxdWVzdC5hbGwgPSBuZXcgdmVjdG9yaW5kZXguX01ldGFkYXRhUmVxdWVzdC5BbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWV0YWRhdGFSZXF1ZXN0LnNvbWUgPSBuZXcgdmVjdG9yaW5kZXguX01ldGFkYXRhUmVxdWVzdC5Tb21lKHtcbiAgICAgICAgZmllbGRzOlxuICAgICAgICAgIG9wdGlvbnM/Lm1ldGFkYXRhRmllbGRzID09PSB1bmRlZmluZWQgPyBbXSA6IG9wdGlvbnMubWV0YWRhdGFGaWVsZHMsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG1ldGFkYXRhUmVxdWVzdDtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIGFwcGx5U2NvcmVUaHJlc2hvbGQoXG4gICAgcmVxdWVzdDpcbiAgICAgIHwgdmVjdG9yaW5kZXguX1NlYXJjaFJlcXVlc3RcbiAgICAgIHwgdmVjdG9yaW5kZXguX1NlYXJjaEFuZEZldGNoVmVjdG9yc1JlcXVlc3QsXG4gICAgb3B0aW9ucz86IFNlYXJjaE9wdGlvbnNcbiAgKTogdm9pZCB7XG4gICAgaWYgKG9wdGlvbnM/LnNjb3JlVGhyZXNob2xkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3Quc2NvcmVfdGhyZXNob2xkID0gb3B0aW9ucy5zY29yZVRocmVzaG9sZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdC5ub19zY29yZV90aHJlc2hvbGQgPSBuZXcgdmVjdG9yaW5kZXguX05vU2NvcmVUaHJlc2hvbGQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBidWlsZEZpbHRlckV4cHJlc3Npb24oXG4gICAgZmlsdGVyRXhwcmVzc2lvbj86IEYuVmVjdG9yRmlsdGVyRXhwcmVzc2lvblxuICApOiB2ZWN0b3JpbmRleC5fRmlsdGVyRXhwcmVzc2lvbiB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKGZpbHRlckV4cHJlc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKGZpbHRlckV4cHJlc3Npb24gaW5zdGFuY2VvZiBGLlZlY3RvckZpbHRlckFuZEV4cHJlc3Npb24pIHtcbiAgICAgIHJldHVybiBuZXcgdmVjdG9yaW5kZXguX0ZpbHRlckV4cHJlc3Npb24oe1xuICAgICAgICBhbmRfZXhwcmVzc2lvbjogbmV3IHZlY3RvcmluZGV4Ll9BbmRFeHByZXNzaW9uKHtcbiAgICAgICAgICBmaXJzdF9leHByZXNzaW9uOiBWZWN0b3JJbmRleERhdGFDbGllbnQuYnVpbGRGaWx0ZXJFeHByZXNzaW9uKFxuICAgICAgICAgICAgZmlsdGVyRXhwcmVzc2lvbi5GaXJzdEV4cHJlc3Npb25cbiAgICAgICAgICApLFxuICAgICAgICAgIHNlY29uZF9leHByZXNzaW9uOiBWZWN0b3JJbmRleERhdGFDbGllbnQuYnVpbGRGaWx0ZXJFeHByZXNzaW9uKFxuICAgICAgICAgICAgZmlsdGVyRXhwcmVzc2lvbi5TZWNvbmRFeHByZXNzaW9uXG4gICAgICAgICAgKSxcbiAgICAgICAgfSksXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGZpbHRlckV4cHJlc3Npb24gaW5zdGFuY2VvZiBGLlZlY3RvckZpbHRlck9yRXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIG5ldyB2ZWN0b3JpbmRleC5fRmlsdGVyRXhwcmVzc2lvbih7XG4gICAgICAgIG9yX2V4cHJlc3Npb246IG5ldyB2ZWN0b3JpbmRleC5fT3JFeHByZXNzaW9uKHtcbiAgICAgICAgICBmaXJzdF9leHByZXNzaW9uOiBWZWN0b3JJbmRleERhdGFDbGllbnQuYnVpbGRGaWx0ZXJFeHByZXNzaW9uKFxuICAgICAgICAgICAgZmlsdGVyRXhwcmVzc2lvbi5GaXJzdEV4cHJlc3Npb25cbiAgICAgICAgICApLFxuICAgICAgICAgIHNlY29uZF9leHByZXNzaW9uOiBWZWN0b3JJbmRleERhdGFDbGllbnQuYnVpbGRGaWx0ZXJFeHByZXNzaW9uKFxuICAgICAgICAgICAgZmlsdGVyRXhwcmVzc2lvbi5TZWNvbmRFeHByZXNzaW9uXG4gICAgICAgICAgKSxcbiAgICAgICAgfSksXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGZpbHRlckV4cHJlc3Npb24gaW5zdGFuY2VvZiBGLlZlY3RvckZpbHRlck5vdEV4cHJlc3Npb24pIHtcbiAgICAgIHJldHVybiBuZXcgdmVjdG9yaW5kZXguX0ZpbHRlckV4cHJlc3Npb24oe1xuICAgICAgICBub3RfZXhwcmVzc2lvbjogbmV3IHZlY3RvcmluZGV4Ll9Ob3RFeHByZXNzaW9uKHtcbiAgICAgICAgICBleHByZXNzaW9uX3RvX25lZ2F0ZTogVmVjdG9ySW5kZXhEYXRhQ2xpZW50LmJ1aWxkRmlsdGVyRXhwcmVzc2lvbihcbiAgICAgICAgICAgIGZpbHRlckV4cHJlc3Npb24uRXhwcmVzc2lvblxuICAgICAgICAgICksXG4gICAgICAgIH0pLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChmaWx0ZXJFeHByZXNzaW9uIGluc3RhbmNlb2YgRi5WZWN0b3JGaWx0ZXJFcXVhbHNFeHByZXNzaW9uKSB7XG4gICAgICBpZiAodHlwZW9mIGZpbHRlckV4cHJlc3Npb24uVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBuZXcgdmVjdG9yaW5kZXguX0ZpbHRlckV4cHJlc3Npb24oe1xuICAgICAgICAgIGVxdWFsc19leHByZXNzaW9uOiBuZXcgdmVjdG9yaW5kZXguX0VxdWFsc0V4cHJlc3Npb24oe1xuICAgICAgICAgICAgZmllbGQ6IGZpbHRlckV4cHJlc3Npb24uRmllbGQsXG4gICAgICAgICAgICBzdHJpbmdfdmFsdWU6IGZpbHRlckV4cHJlc3Npb24uVmFsdWUsXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZmlsdGVyRXhwcmVzc2lvbi5WYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIoZmlsdGVyRXhwcmVzc2lvbi5WYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IHZlY3RvcmluZGV4Ll9GaWx0ZXJFeHByZXNzaW9uKHtcbiAgICAgICAgICAgIGVxdWFsc19leHByZXNzaW9uOiBuZXcgdmVjdG9yaW5kZXguX0VxdWFsc0V4cHJlc3Npb24oe1xuICAgICAgICAgICAgICBmaWVsZDogZmlsdGVyRXhwcmVzc2lvbi5GaWVsZCxcbiAgICAgICAgICAgICAgaW50ZWdlcl92YWx1ZTogZmlsdGVyRXhwcmVzc2lvbi5WYWx1ZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBuZXcgdmVjdG9yaW5kZXguX0ZpbHRlckV4cHJlc3Npb24oe1xuICAgICAgICAgICAgZXF1YWxzX2V4cHJlc3Npb246IG5ldyB2ZWN0b3JpbmRleC5fRXF1YWxzRXhwcmVzc2lvbih7XG4gICAgICAgICAgICAgIGZpZWxkOiBmaWx0ZXJFeHByZXNzaW9uLkZpZWxkLFxuICAgICAgICAgICAgICBmbG9hdF92YWx1ZTogZmlsdGVyRXhwcmVzc2lvbi5WYWx1ZSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBmaWx0ZXJFeHByZXNzaW9uLlZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB2ZWN0b3JpbmRleC5fRmlsdGVyRXhwcmVzc2lvbih7XG4gICAgICAgICAgZXF1YWxzX2V4cHJlc3Npb246IG5ldyB2ZWN0b3JpbmRleC5fRXF1YWxzRXhwcmVzc2lvbih7XG4gICAgICAgICAgICBmaWVsZDogZmlsdGVyRXhwcmVzc2lvbi5GaWVsZCxcbiAgICAgICAgICAgIGJvb2xlYW5fdmFsdWU6IGZpbHRlckV4cHJlc3Npb24uVmFsdWUsXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgIGBGaWx0ZXIgdmFsdWUgZm9yIGZpZWxkICcke1xuICAgICAgICAgICAgZmlsdGVyRXhwcmVzc2lvbi5GaWVsZFxuICAgICAgICAgIH0nIGlzIG5vdCBhIHZhbGlkIHR5cGUuIFZhbHVlIGlzIG9mIHR5cGUgJyR7dHlwZW9mIGZpbHRlckV4cHJlc3Npb24uVmFsdWV9IGFuZCBpcyBub3QgYSBzdHJpbmcsIG51bWJlciwgb3IgYm9vbGVhbi4nYFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBmaWx0ZXJFeHByZXNzaW9uIGluc3RhbmNlb2YgRi5WZWN0b3JGaWx0ZXJHcmVhdGVyVGhhbkV4cHJlc3Npb25cbiAgICApIHtcbiAgICAgIGlmICh0eXBlb2YgZmlsdGVyRXhwcmVzc2lvbi5WYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIoZmlsdGVyRXhwcmVzc2lvbi5WYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IHZlY3RvcmluZGV4Ll9GaWx0ZXJFeHByZXNzaW9uKHtcbiAgICAgICAgICAgIGdyZWF0ZXJfdGhhbl9leHByZXNzaW9uOiBuZXcgdmVjdG9yaW5kZXguX0dyZWF0ZXJUaGFuRXhwcmVzc2lvbih7XG4gICAgICAgICAgICAgIGZpZWxkOiBmaWx0ZXJFeHByZXNzaW9uLkZpZWxkLFxuICAgICAgICAgICAgICBpbnRlZ2VyX3ZhbHVlOiBmaWx0ZXJFeHByZXNzaW9uLlZhbHVlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyB2ZWN0b3JpbmRleC5fRmlsdGVyRXhwcmVzc2lvbih7XG4gICAgICAgICAgICBncmVhdGVyX3RoYW5fZXhwcmVzc2lvbjogbmV3IHZlY3RvcmluZGV4Ll9HcmVhdGVyVGhhbkV4cHJlc3Npb24oe1xuICAgICAgICAgICAgICBmaWVsZDogZmlsdGVyRXhwcmVzc2lvbi5GaWVsZCxcbiAgICAgICAgICAgICAgZmxvYXRfdmFsdWU6IGZpbHRlckV4cHJlc3Npb24uVmFsdWUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgIGBGaWx0ZXIgdmFsdWUgZm9yIGZpZWxkICcke1xuICAgICAgICAgICAgZmlsdGVyRXhwcmVzc2lvbi5GaWVsZFxuICAgICAgICAgIH0nIGlzIG5vdCBhIHZhbGlkIHR5cGUuIFZhbHVlIGlzIG9mIHR5cGUgJyR7dHlwZW9mIGZpbHRlckV4cHJlc3Npb24uVmFsdWV9IGFuZCBpcyBub3QgYSBudW1iZXIuJ2BcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgZmlsdGVyRXhwcmVzc2lvbiBpbnN0YW5jZW9mIEYuVmVjdG9yRmlsdGVyR3JlYXRlclRoYW5PckVxdWFsRXhwcmVzc2lvblxuICAgICkge1xuICAgICAgaWYgKHR5cGVvZiBmaWx0ZXJFeHByZXNzaW9uLlZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihmaWx0ZXJFeHByZXNzaW9uLlZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBuZXcgdmVjdG9yaW5kZXguX0ZpbHRlckV4cHJlc3Npb24oe1xuICAgICAgICAgICAgZ3JlYXRlcl90aGFuX29yX2VxdWFsX2V4cHJlc3Npb246XG4gICAgICAgICAgICAgIG5ldyB2ZWN0b3JpbmRleC5fR3JlYXRlclRoYW5PckVxdWFsRXhwcmVzc2lvbih7XG4gICAgICAgICAgICAgICAgZmllbGQ6IGZpbHRlckV4cHJlc3Npb24uRmllbGQsXG4gICAgICAgICAgICAgICAgaW50ZWdlcl92YWx1ZTogZmlsdGVyRXhwcmVzc2lvbi5WYWx1ZSxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyB2ZWN0b3JpbmRleC5fRmlsdGVyRXhwcmVzc2lvbih7XG4gICAgICAgICAgICBncmVhdGVyX3RoYW5fb3JfZXF1YWxfZXhwcmVzc2lvbjpcbiAgICAgICAgICAgICAgbmV3IHZlY3RvcmluZGV4Ll9HcmVhdGVyVGhhbk9yRXF1YWxFeHByZXNzaW9uKHtcbiAgICAgICAgICAgICAgICBmaWVsZDogZmlsdGVyRXhwcmVzc2lvbi5GaWVsZCxcbiAgICAgICAgICAgICAgICBmbG9hdF92YWx1ZTogZmlsdGVyRXhwcmVzc2lvbi5WYWx1ZSxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICBgRmlsdGVyIHZhbHVlIGZvciBmaWVsZCAnJHtcbiAgICAgICAgICAgIGZpbHRlckV4cHJlc3Npb24uRmllbGRcbiAgICAgICAgICB9JyBpcyBub3QgYSB2YWxpZCB0eXBlLiBWYWx1ZSBpcyBvZiB0eXBlICcke3R5cGVvZiBmaWx0ZXJFeHByZXNzaW9uLlZhbHVlfSBhbmQgaXMgbm90IGEgbnVtYmVyLidgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWx0ZXJFeHByZXNzaW9uIGluc3RhbmNlb2YgRi5WZWN0b3JGaWx0ZXJMZXNzVGhhbkV4cHJlc3Npb24pIHtcbiAgICAgIGlmICh0eXBlb2YgZmlsdGVyRXhwcmVzc2lvbi5WYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIoZmlsdGVyRXhwcmVzc2lvbi5WYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IHZlY3RvcmluZGV4Ll9GaWx0ZXJFeHByZXNzaW9uKHtcbiAgICAgICAgICAgIGxlc3NfdGhhbl9leHByZXNzaW9uOiBuZXcgdmVjdG9yaW5kZXguX0xlc3NUaGFuRXhwcmVzc2lvbih7XG4gICAgICAgICAgICAgIGZpZWxkOiBmaWx0ZXJFeHByZXNzaW9uLkZpZWxkLFxuICAgICAgICAgICAgICBpbnRlZ2VyX3ZhbHVlOiBmaWx0ZXJFeHByZXNzaW9uLlZhbHVlLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyB2ZWN0b3JpbmRleC5fRmlsdGVyRXhwcmVzc2lvbih7XG4gICAgICAgICAgICBsZXNzX3RoYW5fZXhwcmVzc2lvbjogbmV3IHZlY3RvcmluZGV4Ll9MZXNzVGhhbkV4cHJlc3Npb24oe1xuICAgICAgICAgICAgICBmaWVsZDogZmlsdGVyRXhwcmVzc2lvbi5GaWVsZCxcbiAgICAgICAgICAgICAgZmxvYXRfdmFsdWU6IGZpbHRlckV4cHJlc3Npb24uVmFsdWUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgIGBGaWx0ZXIgdmFsdWUgZm9yIGZpZWxkICcke1xuICAgICAgICAgICAgZmlsdGVyRXhwcmVzc2lvbi5GaWVsZFxuICAgICAgICAgIH0nIGlzIG5vdCBhIHZhbGlkIHR5cGUuIFZhbHVlIGlzIG9mIHR5cGUgJyR7dHlwZW9mIGZpbHRlckV4cHJlc3Npb24uVmFsdWV9IGFuZCBpcyBub3QgYSBudW1iZXIuJ2BcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgZmlsdGVyRXhwcmVzc2lvbiBpbnN0YW5jZW9mIEYuVmVjdG9yRmlsdGVyTGVzc1RoYW5PckVxdWFsRXhwcmVzc2lvblxuICAgICkge1xuICAgICAgaWYgKHR5cGVvZiBmaWx0ZXJFeHByZXNzaW9uLlZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihmaWx0ZXJFeHByZXNzaW9uLlZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBuZXcgdmVjdG9yaW5kZXguX0ZpbHRlckV4cHJlc3Npb24oe1xuICAgICAgICAgICAgbGVzc190aGFuX29yX2VxdWFsX2V4cHJlc3Npb246XG4gICAgICAgICAgICAgIG5ldyB2ZWN0b3JpbmRleC5fTGVzc1RoYW5PckVxdWFsRXhwcmVzc2lvbih7XG4gICAgICAgICAgICAgICAgZmllbGQ6IGZpbHRlckV4cHJlc3Npb24uRmllbGQsXG4gICAgICAgICAgICAgICAgaW50ZWdlcl92YWx1ZTogZmlsdGVyRXhwcmVzc2lvbi5WYWx1ZSxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyB2ZWN0b3JpbmRleC5fRmlsdGVyRXhwcmVzc2lvbih7XG4gICAgICAgICAgICBsZXNzX3RoYW5fb3JfZXF1YWxfZXhwcmVzc2lvbjpcbiAgICAgICAgICAgICAgbmV3IHZlY3RvcmluZGV4Ll9MZXNzVGhhbk9yRXF1YWxFeHByZXNzaW9uKHtcbiAgICAgICAgICAgICAgICBmaWVsZDogZmlsdGVyRXhwcmVzc2lvbi5GaWVsZCxcbiAgICAgICAgICAgICAgICBmbG9hdF92YWx1ZTogZmlsdGVyRXhwcmVzc2lvbi5WYWx1ZSxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcihcbiAgICAgICAgICBgRmlsdGVyIHZhbHVlIGZvciBmaWVsZCAnJHtcbiAgICAgICAgICAgIGZpbHRlckV4cHJlc3Npb24uRmllbGRcbiAgICAgICAgICB9JyBpcyBub3QgYSB2YWxpZCB0eXBlLiBWYWx1ZSBpcyBvZiB0eXBlICcke3R5cGVvZiBmaWx0ZXJFeHByZXNzaW9uLlZhbHVlfSBhbmQgaXMgbm90IGEgbnVtYmVyLidgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGZpbHRlckV4cHJlc3Npb24gaW5zdGFuY2VvZiBGLlZlY3RvckZpbHRlckxpc3RDb250YWluc0V4cHJlc3Npb25cbiAgICApIHtcbiAgICAgIGlmICh0eXBlb2YgZmlsdGVyRXhwcmVzc2lvbi5WYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB2ZWN0b3JpbmRleC5fRmlsdGVyRXhwcmVzc2lvbih7XG4gICAgICAgICAgbGlzdF9jb250YWluc19leHByZXNzaW9uOiBuZXcgdmVjdG9yaW5kZXguX0xpc3RDb250YWluc0V4cHJlc3Npb24oe1xuICAgICAgICAgICAgZmllbGQ6IGZpbHRlckV4cHJlc3Npb24uRmllbGQsXG4gICAgICAgICAgICBzdHJpbmdfdmFsdWU6IGZpbHRlckV4cHJlc3Npb24uVmFsdWUsXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgIGBGaWx0ZXIgdmFsdWUgZm9yIGZpZWxkICcke1xuICAgICAgICAgICAgZmlsdGVyRXhwcmVzc2lvbi5GaWVsZFxuICAgICAgICAgIH0nIGlzIG5vdCBhIHZhbGlkIHR5cGUuIFZhbHVlIGlzIG9mIHR5cGUgJyR7dHlwZW9mIGZpbHRlckV4cHJlc3Npb24uVmFsdWV9IGFuZCBpcyBub3QgYSBzdHJpbmcuJ2BcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0ZpbHRlciBleHByZXNzaW9uIGlzIG5vdCBhIHZhbGlkIHR5cGUuJyk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBkZXNlcmlhbGl6ZU1ldGFkYXRhKFxuICAgIG1ldGFkYXRhOiB2ZWN0b3JpbmRleC5fTWV0YWRhdGFbXSxcbiAgICBlcnJvckNhbGxiYWNrOiAoKSA9PiB2b2lkXG4gICk6IFZlY3RvckluZGV4TWV0YWRhdGEge1xuICAgIHJldHVybiBtZXRhZGF0YS5yZWR1Y2UoKGFjYywgbWV0YWRhdGEpID0+IHtcbiAgICAgIGNvbnN0IGZpZWxkID0gbWV0YWRhdGEuZmllbGQ7XG4gICAgICBzd2l0Y2ggKG1ldGFkYXRhLnZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ3N0cmluZ192YWx1ZSc6XG4gICAgICAgICAgYWNjW2ZpZWxkXSA9IG1ldGFkYXRhLnN0cmluZ192YWx1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaW50ZWdlcl92YWx1ZSc6XG4gICAgICAgICAgYWNjW2ZpZWxkXSA9IG1ldGFkYXRhLmludGVnZXJfdmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2RvdWJsZV92YWx1ZSc6XG4gICAgICAgICAgYWNjW2ZpZWxkXSA9IG1ldGFkYXRhLmRvdWJsZV92YWx1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYm9vbGVhbl92YWx1ZSc6XG4gICAgICAgICAgYWNjW2ZpZWxkXSA9IG1ldGFkYXRhLmJvb2xlYW5fdmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2xpc3Rfb2Zfc3RyaW5nc192YWx1ZSc6XG4gICAgICAgICAgYWNjW2ZpZWxkXSA9IG1ldGFkYXRhLmxpc3Rfb2Zfc3RyaW5nc192YWx1ZS52YWx1ZXM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZXJyb3JDYWxsYmFjaygpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSBhcyBWZWN0b3JJbmRleE1ldGFkYXRhKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2VuZFNlYXJjaChcbiAgICBpbmRleE5hbWU6IHN0cmluZyxcbiAgICBxdWVyeVZlY3RvcjogQXJyYXk8bnVtYmVyPixcbiAgICBvcHRpb25zPzogU2VhcmNoT3B0aW9uc1xuICApOiBQcm9taXNlPFZlY3RvclNlYXJjaC5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgdmVjdG9yaW5kZXguX1NlYXJjaFJlcXVlc3Qoe1xuICAgICAgaW5kZXhfbmFtZTogaW5kZXhOYW1lLFxuICAgICAgcXVlcnlfdmVjdG9yOiBuZXcgdmVjdG9yaW5kZXguX1ZlY3Rvcih7ZWxlbWVudHM6IHF1ZXJ5VmVjdG9yfSksXG4gICAgICB0b3Bfazogb3B0aW9ucz8udG9wSyA/PyBWRUNUT1JfREVGQVVMVF9UT1BLLFxuICAgICAgbWV0YWRhdGFfZmllbGRzOiBWZWN0b3JJbmRleERhdGFDbGllbnQuYnVpbGRNZXRhZGF0YVJlcXVlc3Qob3B0aW9ucyksXG4gICAgICBmaWx0ZXJfZXhwcmVzc2lvbjogVmVjdG9ySW5kZXhEYXRhQ2xpZW50LmJ1aWxkRmlsdGVyRXhwcmVzc2lvbihcbiAgICAgICAgb3B0aW9ucz8uZmlsdGVyRXhwcmVzc2lvblxuICAgICAgKSxcbiAgICB9KTtcbiAgICBWZWN0b3JJbmRleERhdGFDbGllbnQuYXBwbHlTY29yZVRocmVzaG9sZChyZXF1ZXN0LCBvcHRpb25zKTtcblxuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudC5TZWFyY2goXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIHtpbnRlcmNlcHRvcnM6IHRoaXMuaW50ZXJjZXB0b3JzfSxcbiAgICAgICAgKGVyciwgcmVzcCkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwKSB7XG4gICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICBuZXcgVmVjdG9yU2VhcmNoLlN1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgcmVzcC5oaXRzLm1hcChoaXQgPT4gKHtcbiAgICAgICAgICAgICAgICAgIGlkOiBoaXQuaWQsXG4gICAgICAgICAgICAgICAgICBzY29yZTogaGl0LnNjb3JlLFxuICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6IFZlY3RvckluZGV4RGF0YUNsaWVudC5kZXNlcmlhbGl6ZU1ldGFkYXRhKFxuICAgICAgICAgICAgICAgICAgICBoaXQubWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgICAgICgpID0+XG4gICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3JTZWFyY2guRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBVbmtub3duRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NlYXJjaCByZXNwb25kZWQgd2l0aCBhbiB1bmtub3duIHJlc3VsdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PiBuZXcgVmVjdG9yU2VhcmNoLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2VhcmNoQW5kRmV0Y2hWZWN0b3JzKFxuICAgIGluZGV4TmFtZTogc3RyaW5nLFxuICAgIHF1ZXJ5VmVjdG9yOiBBcnJheTxudW1iZXI+LFxuICAgIG9wdGlvbnM/OiBTZWFyY2hPcHRpb25zXG4gICk6IFByb21pc2U8VmVjdG9yU2VhcmNoQW5kRmV0Y2hWZWN0b3JzLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlSW5kZXhOYW1lKGluZGV4TmFtZSk7XG4gICAgICBpZiAob3B0aW9ucz8udG9wSyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbGlkYXRlVG9wSyhvcHRpb25zLnRvcEspO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmV0dXJuT3JUaHJvd0Vycm9yKFxuICAgICAgICBlcnIgYXMgRXJyb3IsXG4gICAgICAgIGVyciA9PiBuZXcgVmVjdG9yU2VhcmNoQW5kRmV0Y2hWZWN0b3JzLkVycm9yKGVycilcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLnNlbmRTZWFyY2hBbmRGZXRjaFZlY3RvcnMoXG4gICAgICBpbmRleE5hbWUsXG4gICAgICBxdWVyeVZlY3RvcixcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kU2VhcmNoQW5kRmV0Y2hWZWN0b3JzKFxuICAgIGluZGV4TmFtZTogc3RyaW5nLFxuICAgIHF1ZXJ5VmVjdG9yOiBBcnJheTxudW1iZXI+LFxuICAgIG9wdGlvbnM/OiBTZWFyY2hPcHRpb25zXG4gICk6IFByb21pc2U8VmVjdG9yU2VhcmNoQW5kRmV0Y2hWZWN0b3JzLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyB2ZWN0b3JpbmRleC5fU2VhcmNoQW5kRmV0Y2hWZWN0b3JzUmVxdWVzdCh7XG4gICAgICBpbmRleF9uYW1lOiBpbmRleE5hbWUsXG4gICAgICBxdWVyeV92ZWN0b3I6IG5ldyB2ZWN0b3JpbmRleC5fVmVjdG9yKHtlbGVtZW50czogcXVlcnlWZWN0b3J9KSxcbiAgICAgIHRvcF9rOiBvcHRpb25zPy50b3BLID8/IFZFQ1RPUl9ERUZBVUxUX1RPUEssXG4gICAgICBtZXRhZGF0YV9maWVsZHM6IFZlY3RvckluZGV4RGF0YUNsaWVudC5idWlsZE1ldGFkYXRhUmVxdWVzdChvcHRpb25zKSxcbiAgICAgIGZpbHRlcl9leHByZXNzaW9uOiBWZWN0b3JJbmRleERhdGFDbGllbnQuYnVpbGRGaWx0ZXJFeHByZXNzaW9uKFxuICAgICAgICBvcHRpb25zPy5maWx0ZXJFeHByZXNzaW9uXG4gICAgICApLFxuICAgIH0pO1xuICAgIFZlY3RvckluZGV4RGF0YUNsaWVudC5hcHBseVNjb3JlVGhyZXNob2xkKHJlcXVlc3QsIG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50LlNlYXJjaEFuZEZldGNoVmVjdG9ycyhcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAge2ludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnN9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgIG5ldyBWZWN0b3JTZWFyY2hBbmRGZXRjaFZlY3RvcnMuU3VjY2VzcyhcbiAgICAgICAgICAgICAgICByZXNwLmhpdHMubWFwKGhpdCA9PiAoe1xuICAgICAgICAgICAgICAgICAgaWQ6IGhpdC5pZCxcbiAgICAgICAgICAgICAgICAgIHNjb3JlOiBoaXQuc2NvcmUsXG4gICAgICAgICAgICAgICAgICB2ZWN0b3I6IGhpdC52ZWN0b3IuZWxlbWVudHMsXG4gICAgICAgICAgICAgICAgICBtZXRhZGF0YTogVmVjdG9ySW5kZXhEYXRhQ2xpZW50LmRlc2VyaWFsaXplTWV0YWRhdGEoXG4gICAgICAgICAgICAgICAgICAgIGhpdC5tZXRhZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvclNlYXJjaEFuZEZldGNoVmVjdG9ycy5FcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFVua25vd25FcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU2VhcmNoQW5kRmV0Y2hWZWN0b3JzIHJlc3BvbmRlZCB3aXRoIGFuIHVua25vd24gcmVzdWx0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXNvbHZlT3JSZWplY3RFcnJvcih7XG4gICAgICAgICAgICAgIGVycjogZXJyLFxuICAgICAgICAgICAgICBlcnJvclJlc3BvbnNlRmFjdG9yeUZuOiBlID0+XG4gICAgICAgICAgICAgICAgbmV3IFZlY3RvclNlYXJjaEFuZEZldGNoVmVjdG9ycy5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldEl0ZW1CYXRjaChcbiAgICBpbmRleE5hbWU6IHN0cmluZyxcbiAgICBpZHM6IHN0cmluZ1tdXG4gICk6IFByb21pc2U8VmVjdG9yR2V0SXRlbUJhdGNoLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlSW5kZXhOYW1lKGluZGV4TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBWZWN0b3JHZXRJdGVtQmF0Y2guRXJyb3IoZXJyKVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuc2VuZEdldEl0ZW1CYXRjaChpbmRleE5hbWUsIGlkcyk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRHZXRJdGVtQmF0Y2goXG4gICAgaW5kZXhOYW1lOiBzdHJpbmcsXG4gICAgaWRzOiBzdHJpbmdbXVxuICApOiBQcm9taXNlPFZlY3RvckdldEl0ZW1CYXRjaC5SZXNwb25zZT4ge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgdmVjdG9yaW5kZXguX0dldEl0ZW1CYXRjaFJlcXVlc3Qoe1xuICAgICAgaW5kZXhfbmFtZTogaW5kZXhOYW1lLFxuICAgICAgaWRzOiBpZHMsXG4gICAgICBtZXRhZGF0YV9maWVsZHM6IFZlY3RvckluZGV4RGF0YUNsaWVudC5idWlsZE1ldGFkYXRhUmVxdWVzdCh7XG4gICAgICAgIG1ldGFkYXRhRmllbGRzOiBBTExfVkVDVE9SX01FVEFEQVRBLFxuICAgICAgfSksXG4gICAgfSk7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuY2xpZW50LkdldEl0ZW1CYXRjaChcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAge2ludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnN9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgIG5ldyBWZWN0b3JHZXRJdGVtQmF0Y2guU3VjY2VzcyhcbiAgICAgICAgICAgICAgICByZXNwLml0ZW1fcmVzcG9uc2UucmVkdWNlKChhY2MsIGl0ZW1SZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgc3dpdGNoIChpdGVtUmVzcG9uc2UucmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaGl0JzpcbiAgICAgICAgICAgICAgICAgICAgICBhY2NbaXRlbVJlc3BvbnNlLmhpdC5pZF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogaXRlbVJlc3BvbnNlLmhpdC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvcjogaXRlbVJlc3BvbnNlLmhpdC52ZWN0b3IuZWxlbWVudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogVmVjdG9ySW5kZXhEYXRhQ2xpZW50LmRlc2VyaWFsaXplTWV0YWRhdGEoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1SZXNwb25zZS5oaXQubWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICgpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3JHZXRJdGVtQmF0Y2guRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBVbmtub3duRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0dldEl0ZW1CYXRjaCByZXNwb25kZWQgd2l0aCBhbiB1bmtub3duIHJlc3VsdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWlzcyc6XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3JHZXRJdGVtQmF0Y2guRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBVbmtub3duRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0dldEl0ZW1CYXRjaCByZXNwb25kZWQgd2l0aCBhbiB1bmtub3duIHJlc3VsdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgICAgIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIFZlY3RvckluZGV4U3RvcmVkSXRlbT4pXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PiBuZXcgVmVjdG9yR2V0SXRlbUJhdGNoLkVycm9yKGUpLFxuICAgICAgICAgICAgICByZXNvbHZlRm46IHJlc29sdmUsXG4gICAgICAgICAgICAgIHJlamVjdEZuOiByZWplY3QsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZ2V0SXRlbU1ldGFkYXRhQmF0Y2goXG4gICAgaW5kZXhOYW1lOiBzdHJpbmcsXG4gICAgaWRzOiBzdHJpbmdbXVxuICApOiBQcm9taXNlPFZlY3RvckdldEl0ZW1NZXRhZGF0YUJhdGNoLlJlc3BvbnNlPiB7XG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkYXRlSW5kZXhOYW1lKGluZGV4TmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVNlcnZpY2VFcnJvck1hcHBlci5yZXR1cm5PclRocm93RXJyb3IoXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICAgZXJyID0+IG5ldyBWZWN0b3JHZXRJdGVtTWV0YWRhdGFCYXRjaC5FcnJvcihlcnIpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5zZW5kR2V0SXRlbU1ldGFkYXRhQmF0Y2goaW5kZXhOYW1lLCBpZHMpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzZW5kR2V0SXRlbU1ldGFkYXRhQmF0Y2goXG4gICAgaW5kZXhOYW1lOiBzdHJpbmcsXG4gICAgaWRzOiBzdHJpbmdbXVxuICApOiBQcm9taXNlPFZlY3RvckdldEl0ZW1NZXRhZGF0YUJhdGNoLlJlc3BvbnNlPiB7XG4gICAgY29uc3QgcmVxdWVzdCA9IG5ldyB2ZWN0b3JpbmRleC5fR2V0SXRlbU1ldGFkYXRhQmF0Y2hSZXF1ZXN0KHtcbiAgICAgIGluZGV4X25hbWU6IGluZGV4TmFtZSxcbiAgICAgIGlkczogaWRzLFxuICAgICAgbWV0YWRhdGFfZmllbGRzOiBWZWN0b3JJbmRleERhdGFDbGllbnQuYnVpbGRNZXRhZGF0YVJlcXVlc3Qoe1xuICAgICAgICBtZXRhZGF0YUZpZWxkczogQUxMX1ZFQ1RPUl9NRVRBREFUQSxcbiAgICAgIH0pLFxuICAgIH0pO1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudC5HZXRJdGVtTWV0YWRhdGFCYXRjaChcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAge2ludGVyY2VwdG9yczogdGhpcy5pbnRlcmNlcHRvcnN9LFxuICAgICAgICAoZXJyLCByZXNwKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3ApIHtcbiAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgIG5ldyBWZWN0b3JHZXRJdGVtTWV0YWRhdGFCYXRjaC5TdWNjZXNzKFxuICAgICAgICAgICAgICAgIHJlc3AuaXRlbV9tZXRhZGF0YV9yZXNwb25zZS5yZWR1Y2UoKGFjYywgaXRlbVJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKGl0ZW1SZXNwb25zZS5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdoaXQnOlxuICAgICAgICAgICAgICAgICAgICAgIGFjY1tpdGVtUmVzcG9uc2UuaGl0LmlkXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBWZWN0b3JJbmRleERhdGFDbGllbnQuZGVzZXJpYWxpemVNZXRhZGF0YShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVJlc3BvbnNlLmhpdC5tZXRhZGF0YSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3RvckdldEl0ZW1NZXRhZGF0YUJhdGNoLkVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgVW5rbm93bkVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdHZXRJdGVtTWV0YWRhdGFCYXRjaCByZXNwb25kZWQgd2l0aCBhbiB1bmtub3duIHJlc3VsdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21pc3MnOlxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgVmVjdG9yR2V0SXRlbU1ldGFkYXRhQmF0Y2guRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBVbmtub3duRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0dldEl0ZW1NZXRhZGF0YUJhdGNoIHJlc3BvbmRlZCB3aXRoIGFuIHVua25vd24gcmVzdWx0J1xuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICAgICAgfSwge30gYXMgUmVjb3JkPHN0cmluZywgVmVjdG9ySW5kZXhNZXRhZGF0YT4pXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVTZXJ2aWNlRXJyb3JNYXBwZXIucmVzb2x2ZU9yUmVqZWN0RXJyb3Ioe1xuICAgICAgICAgICAgICBlcnI6IGVycixcbiAgICAgICAgICAgICAgZXJyb3JSZXNwb25zZUZhY3RvcnlGbjogZSA9PlxuICAgICAgICAgICAgICAgIG5ldyBWZWN0b3JHZXRJdGVtTWV0YWRhdGFCYXRjaC5FcnJvcihlKSxcbiAgICAgICAgICAgICAgcmVzb2x2ZUZuOiByZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3RGbjogcmVqZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZVJlcXVlc3RUaW1lb3V0KHRpbWVvdXQ/OiBudW1iZXIpIHtcbiAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhgUmVxdWVzdCB0aW1lb3V0IG1zOiAke1N0cmluZyh0aW1lb3V0KX1gKTtcbiAgICBpZiAodGltZW91dCAhPT0gdW5kZWZpbmVkICYmIHRpbWVvdXQgPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAncmVxdWVzdCB0aW1lb3V0IG11c3QgYmUgZ3JlYXRlciB0aGFuIHplcm8uJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVJbnRlcmNlcHRvcnMoXG4gICAgX2xvZ2dlckZhY3Rvcnk6IE1vbWVudG9Mb2dnZXJGYWN0b3J5XG4gICk6IEludGVyY2VwdG9yW10ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBbXG4gICAgICBuZXcgSGVhZGVyKCdBdXRob3JpemF0aW9uJywgdGhpcy5jcmVkZW50aWFsUHJvdmlkZXIuZ2V0QXV0aFRva2VuKCkpLFxuICAgICAgbmV3IEhlYWRlcignQWdlbnQnLCBgbm9kZWpzOiR7dmVyc2lvbn1gKSxcbiAgICBdO1xuICAgIHJldHVybiBbXG4gICAgICBuZXcgSGVhZGVySW50ZXJjZXB0b3JQcm92aWRlcihoZWFkZXJzKS5jcmVhdGVIZWFkZXJzSW50ZXJjZXB0b3IoKSxcbiAgICAgIENsaWVudFRpbWVvdXRJbnRlcmNlcHRvcih0aGlzLnJlcXVlc3RUaW1lb3V0TXMpLFxuICAgIF07XG4gIH1cbn1cbiJdfQ==