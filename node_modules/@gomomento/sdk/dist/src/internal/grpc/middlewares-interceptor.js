"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.middlewaresInterceptor = void 0;
const grpc_js_1 = require("@grpc/grpc-js");
const middleware_1 = require("../../config/middleware/middleware");
function middlewaresInterceptor(loggerFactory, middlewares, middlewareRequestContext) {
    return (options, nextCall) => {
        const middlewareRequestHandlers = middlewares.map(m => m.onNewRequest(middlewareRequestContext));
        // create a copy of the handlers and reverse it, because for the response life cycle actions we should call
        // the middlewares in the opposite order.
        const reversedMiddlewareRequestHandlers = [
            ...middlewareRequestHandlers,
        ].reverse();
        const requester = {
            start: function (metadata, listener, next) {
                const newListener = {
                    onReceiveMetadata: function (metadata, next) {
                        applyMiddlewareHandlers('onResponseMetadata', reversedMiddlewareRequestHandlers, (h) => (m) => h.onResponseMetadata(m), new middleware_1.MiddlewareMetadata(metadata), (metadata) => next(metadata._grpcMetadata));
                    },
                    onReceiveMessage: function (
                    // unfortunately grpc uses `any` in their type defs for these
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    message, 
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    next) {
                        applyMiddlewareHandlers('onResponseBody', reversedMiddlewareRequestHandlers, (h) => (request) => h.onResponseBody(request), new middleware_1.MiddlewareMessage(message), (msg) => next(msg === null || msg === void 0 ? void 0 : msg._grpcMessage));
                    },
                    onReceiveStatus: function (status, next) {
                        applyMiddlewareHandlers('onResponseStatus', reversedMiddlewareRequestHandlers, (h) => (s) => h.onResponseStatus(s), new middleware_1.MiddlewareStatus(status), (s) => next(s._grpcStatus));
                    },
                };
                applyMiddlewareHandlers('onRequestMetadata', middlewareRequestHandlers, (h) => (m) => h.onRequestMetadata(m), new middleware_1.MiddlewareMetadata(metadata), (m) => next(m._grpcMetadata, newListener));
            },
            // unfortunately grpc uses `any` in their type defs for these
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            sendMessage: function (message, next) {
                applyMiddlewareHandlers('onRequestBody', middlewareRequestHandlers, (h) => (request) => h.onRequestBody(request), new middleware_1.MiddlewareMessage(message), (m) => next(m._grpcMessage));
            },
        };
        return new grpc_js_1.InterceptingCall(nextCall(options), requester);
    };
}
exports.middlewaresInterceptor = middlewaresInterceptor;
function applyMiddlewareHandlers(name, handlers, middlewareHandlerReduceFn, originalInput, nextFn) {
    let remainingHandlers = handlers;
    let middlewarePromise = Promise.resolve(originalInput);
    while (remainingHandlers.length > 0) {
        const nextHandler = middlewareHandlerReduceFn(remainingHandlers[0]);
        middlewarePromise = middlewarePromise
            .then(newT => nextHandler(newT))
            .catch(e => {
            throw e;
        });
        remainingHandlers = remainingHandlers.slice(1);
    }
    middlewarePromise
        .then(newT => nextFn(newT))
        .catch(e => {
        throw e;
    });
}
//# sourceMappingURL=data:application/json;base64,