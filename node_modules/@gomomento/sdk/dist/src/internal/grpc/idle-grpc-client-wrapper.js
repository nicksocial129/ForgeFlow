"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdleGrpcClientWrapper = void 0;
/**
 * This wrapper allows us to ensure that a grpc client is not re-used if it has been idle
 * for longer than a specified period of time.  This is important in some environments,
 * such as AWS Lambda, where the runtime may be paused indefinitely between invocations.
 * In such cases we have observed that while the runtime is suspended, the connection
 * may have been closed by the server. (e.g., AWS NLB has an idle timeout of 350s:
 * https://docs.aws.amazon.com/elasticloadbalancing/latest/network/network-load-balancers.html#connection-idle-timeout )
 * When the runtime resumes, it does not recognize that the connection has been closed,
 * and it may continue to attempt to send bytes to it, resulting in client-side timeouts
 * (DEADLINE_EXCEEDED).  Forcefully refreshing the client if it has been idle for too
 * long will prevent this.
 *
 * NOTE: We can't rely on keepalive pings in this scenario, because the lambda runtime
 * may be suspended in such a way that background tasks such as the keepalive pings
 * will not be able to execute.
 */
class IdleGrpcClientWrapper {
    constructor(props) {
        this.logger = props.loggerFactory.getLogger(this);
        this.clientFactoryFn = props.clientFactoryFn;
        this.client = this.clientFactoryFn();
        this.maxIdleMillis = props.maxIdleMillis;
        this.lastAccessTime = Date.now();
    }
    getClient() {
        this.logger.trace(`Checking to see if client has been idle for more than ${this.maxIdleMillis} ms`);
        if (Date.now() - this.lastAccessTime > this.maxIdleMillis) {
            this.logger.info(`Client has been idle for more than ${this.maxIdleMillis} ms; reconnecting.`);
            this.client.close();
            this.client = this.clientFactoryFn();
        }
        this.lastAccessTime = Date.now();
        return this.client;
    }
}
exports.IdleGrpcClientWrapper = IdleGrpcClientWrapper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRsZS1ncnBjLWNsaWVudC13cmFwcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2ludGVybmFsL2dycGMvaWRsZS1ncnBjLWNsaWVudC13cmFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQVNBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILE1BQWEscUJBQXFCO0lBV2hDLFlBQVksS0FBb0M7UUFDOUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUM7UUFDN0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQ2YseURBQXlELElBQUksQ0FBQyxhQUFhLEtBQUssQ0FDakYsQ0FBQztRQUNGLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN6RCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDZCxzQ0FBc0MsSUFBSSxDQUFDLGFBQWEsb0JBQW9CLENBQzdFLENBQUM7WUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQ3RDO1FBQ0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDakMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7Q0FDRjtBQWpDRCxzREFpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Nsb3NlYWJsZUdycGNDbGllbnQsIEdycGNDbGllbnRXcmFwcGVyfSBmcm9tICcuL2dycGMtY2xpZW50LXdyYXBwZXInO1xuaW1wb3J0IHtNb21lbnRvTG9nZ2VyLCBNb21lbnRvTG9nZ2VyRmFjdG9yeX0gZnJvbSAnQGdvbW9tZW50by9zZGstY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWRsZUdycGNDbGllbnRXcmFwcGVyUHJvcHM8VCBleHRlbmRzIENsb3NlYWJsZUdycGNDbGllbnQ+IHtcbiAgY2xpZW50RmFjdG9yeUZuOiAoKSA9PiBUO1xuICBsb2dnZXJGYWN0b3J5OiBNb21lbnRvTG9nZ2VyRmFjdG9yeTtcbiAgbWF4SWRsZU1pbGxpczogbnVtYmVyO1xufVxuXG4vKipcbiAqIFRoaXMgd3JhcHBlciBhbGxvd3MgdXMgdG8gZW5zdXJlIHRoYXQgYSBncnBjIGNsaWVudCBpcyBub3QgcmUtdXNlZCBpZiBpdCBoYXMgYmVlbiBpZGxlXG4gKiBmb3IgbG9uZ2VyIHRoYW4gYSBzcGVjaWZpZWQgcGVyaW9kIG9mIHRpbWUuICBUaGlzIGlzIGltcG9ydGFudCBpbiBzb21lIGVudmlyb25tZW50cyxcbiAqIHN1Y2ggYXMgQVdTIExhbWJkYSwgd2hlcmUgdGhlIHJ1bnRpbWUgbWF5IGJlIHBhdXNlZCBpbmRlZmluaXRlbHkgYmV0d2VlbiBpbnZvY2F0aW9ucy5cbiAqIEluIHN1Y2ggY2FzZXMgd2UgaGF2ZSBvYnNlcnZlZCB0aGF0IHdoaWxlIHRoZSBydW50aW1lIGlzIHN1c3BlbmRlZCwgdGhlIGNvbm5lY3Rpb25cbiAqIG1heSBoYXZlIGJlZW4gY2xvc2VkIGJ5IHRoZSBzZXJ2ZXIuIChlLmcuLCBBV1MgTkxCIGhhcyBhbiBpZGxlIHRpbWVvdXQgb2YgMzUwczpcbiAqIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9lbGFzdGljbG9hZGJhbGFuY2luZy9sYXRlc3QvbmV0d29yay9uZXR3b3JrLWxvYWQtYmFsYW5jZXJzLmh0bWwjY29ubmVjdGlvbi1pZGxlLXRpbWVvdXQgKVxuICogV2hlbiB0aGUgcnVudGltZSByZXN1bWVzLCBpdCBkb2VzIG5vdCByZWNvZ25pemUgdGhhdCB0aGUgY29ubmVjdGlvbiBoYXMgYmVlbiBjbG9zZWQsXG4gKiBhbmQgaXQgbWF5IGNvbnRpbnVlIHRvIGF0dGVtcHQgdG8gc2VuZCBieXRlcyB0byBpdCwgcmVzdWx0aW5nIGluIGNsaWVudC1zaWRlIHRpbWVvdXRzXG4gKiAoREVBRExJTkVfRVhDRUVERUQpLiAgRm9yY2VmdWxseSByZWZyZXNoaW5nIHRoZSBjbGllbnQgaWYgaXQgaGFzIGJlZW4gaWRsZSBmb3IgdG9vXG4gKiBsb25nIHdpbGwgcHJldmVudCB0aGlzLlxuICpcbiAqIE5PVEU6IFdlIGNhbid0IHJlbHkgb24ga2VlcGFsaXZlIHBpbmdzIGluIHRoaXMgc2NlbmFyaW8sIGJlY2F1c2UgdGhlIGxhbWJkYSBydW50aW1lXG4gKiBtYXkgYmUgc3VzcGVuZGVkIGluIHN1Y2ggYSB3YXkgdGhhdCBiYWNrZ3JvdW5kIHRhc2tzIHN1Y2ggYXMgdGhlIGtlZXBhbGl2ZSBwaW5nc1xuICogd2lsbCBub3QgYmUgYWJsZSB0byBleGVjdXRlLlxuICovXG5leHBvcnQgY2xhc3MgSWRsZUdycGNDbGllbnRXcmFwcGVyPFQgZXh0ZW5kcyBDbG9zZWFibGVHcnBjQ2xpZW50PlxuICBpbXBsZW1lbnRzIEdycGNDbGllbnRXcmFwcGVyPFQ+XG57XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyOiBNb21lbnRvTG9nZ2VyO1xuXG4gIHByaXZhdGUgY2xpZW50OiBUO1xuICBwcml2YXRlIHJlYWRvbmx5IGNsaWVudEZhY3RvcnlGbjogKCkgPT4gVDtcblxuICBwcml2YXRlIHJlYWRvbmx5IG1heElkbGVNaWxsaXM6IG51bWJlcjtcbiAgcHJpdmF0ZSBsYXN0QWNjZXNzVGltZTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBJZGxlR3JwY0NsaWVudFdyYXBwZXJQcm9wczxUPikge1xuICAgIHRoaXMubG9nZ2VyID0gcHJvcHMubG9nZ2VyRmFjdG9yeS5nZXRMb2dnZXIodGhpcyk7XG4gICAgdGhpcy5jbGllbnRGYWN0b3J5Rm4gPSBwcm9wcy5jbGllbnRGYWN0b3J5Rm47XG4gICAgdGhpcy5jbGllbnQgPSB0aGlzLmNsaWVudEZhY3RvcnlGbigpO1xuICAgIHRoaXMubWF4SWRsZU1pbGxpcyA9IHByb3BzLm1heElkbGVNaWxsaXM7XG4gICAgdGhpcy5sYXN0QWNjZXNzVGltZSA9IERhdGUubm93KCk7XG4gIH1cblxuICBnZXRDbGllbnQoKTogVCB7XG4gICAgdGhpcy5sb2dnZXIudHJhY2UoXG4gICAgICBgQ2hlY2tpbmcgdG8gc2VlIGlmIGNsaWVudCBoYXMgYmVlbiBpZGxlIGZvciBtb3JlIHRoYW4gJHt0aGlzLm1heElkbGVNaWxsaXN9IG1zYFxuICAgICk7XG4gICAgaWYgKERhdGUubm93KCkgLSB0aGlzLmxhc3RBY2Nlc3NUaW1lID4gdGhpcy5tYXhJZGxlTWlsbGlzKSB7XG4gICAgICB0aGlzLmxvZ2dlci5pbmZvKFxuICAgICAgICBgQ2xpZW50IGhhcyBiZWVuIGlkbGUgZm9yIG1vcmUgdGhhbiAke3RoaXMubWF4SWRsZU1pbGxpc30gbXM7IHJlY29ubmVjdGluZy5gXG4gICAgICApO1xuICAgICAgdGhpcy5jbGllbnQuY2xvc2UoKTtcbiAgICAgIHRoaXMuY2xpZW50ID0gdGhpcy5jbGllbnRGYWN0b3J5Rm4oKTtcbiAgICB9XG4gICAgdGhpcy5sYXN0QWNjZXNzVGltZSA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50O1xuICB9XG59XG4iXX0=