"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StaticTransportStrategy = exports.StaticGrpcConfiguration = void 0;
class StaticGrpcConfiguration {
    constructor(props) {
        this.deadlineMillis = props.deadlineMillis;
        this.maxSessionMemoryMb = props.maxSessionMemoryMb;
        if (props.numClients !== undefined && props.numClients !== null) {
            this.numClients = props.numClients;
        }
        else {
            // This is the previously hardcoded value and a safe default for most environments.
            this.numClients = 6;
        }
    }
    getDeadlineMillis() {
        return this.deadlineMillis;
    }
    getMaxSessionMemoryMb() {
        return this.maxSessionMemoryMb;
    }
    withDeadlineMillis(deadlineMillis) {
        return new StaticGrpcConfiguration({
            deadlineMillis: deadlineMillis,
            maxSessionMemoryMb: this.maxSessionMemoryMb,
            numClients: this.numClients,
        });
    }
    withMaxSessionMemoryMb(maxSessionMemoryMb) {
        return new StaticGrpcConfiguration({
            deadlineMillis: this.deadlineMillis,
            maxSessionMemoryMb: maxSessionMemoryMb,
            numClients: this.numClients,
        });
    }
    getNumClients() {
        return this.numClients;
    }
    withNumClients(numClients) {
        return new StaticGrpcConfiguration({
            deadlineMillis: this.deadlineMillis,
            maxSessionMemoryMb: this.maxSessionMemoryMb,
            numClients: numClients,
        });
    }
}
exports.StaticGrpcConfiguration = StaticGrpcConfiguration;
class StaticTransportStrategy {
    constructor(props) {
        this.grpcConfig = props.grpcConfiguration;
        this.maxIdleMillis = props.maxIdleMillis;
    }
    getGrpcConfig() {
        return this.grpcConfig;
    }
    withGrpcConfig(grpcConfig) {
        return new StaticTransportStrategy({
            grpcConfiguration: grpcConfig,
            maxIdleMillis: this.maxIdleMillis,
        });
    }
    getMaxIdleMillis() {
        return this.maxIdleMillis;
    }
    withMaxIdleMillis(maxIdleMillis) {
        return new StaticTransportStrategy({
            grpcConfiguration: this.grpcConfig,
            maxIdleMillis: maxIdleMillis,
        });
    }
    withClientTimeoutMillis(clientTimeout) {
        return new StaticTransportStrategy({
            grpcConfiguration: this.grpcConfig.withDeadlineMillis(clientTimeout),
            maxIdleMillis: this.maxIdleMillis,
        });
    }
}
exports.StaticTransportStrategy = StaticTransportStrategy;
//# sourceMappingURL=data:application/json;base64,