"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateLeaderboardNumberOfElements = exports.validateLeaderboardCount = exports.validateLeaderboardOffset = exports.validateLeaderboardRanks = exports.validateLeaderboardName = exports.isBase64 = exports.validateDisposableTokenTokenID = exports.validateDisposableTokenExpiry = exports.validateTimeout = exports.validateValidForSeconds = exports.validateTtlMinutes = exports.validateTopK = exports.validateNumDimensions = exports.validateIndexName = exports.validateWebhookName = exports.validateTopicName = exports.validateListSliceStartEnd = exports.validateListName = exports.validateDictionaryName = exports.validateSortedSetCount = exports.validateSortedSetOffset = exports.validateSortedSetScores = exports.validateSortedSetRanks = exports.validateSortedSetName = exports.validateSetName = exports.validateCacheKeyOrPrefix = exports.validateCacheName = void 0;
const errors_1 = require("../../errors");
const string_1 = require("./string");
function validateCacheName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('cache name must not be empty');
    }
}
exports.validateCacheName = validateCacheName;
function validateCacheKeyOrPrefix(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('cache key or key prefix must not be empty');
    }
}
exports.validateCacheKeyOrPrefix = validateCacheKeyOrPrefix;
function validateSetName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('set name must not be empty');
    }
}
exports.validateSetName = validateSetName;
function validateSortedSetName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('sorted set name must not be empty');
    }
}
exports.validateSortedSetName = validateSortedSetName;
function validateSortedSetRanks(start_rank, end_rank) {
    if (end_rank === undefined) {
        return;
    }
    if (start_rank > 0 && end_rank > 0 && start_rank > end_rank) {
        throw new errors_1.InvalidArgumentError('start rank must be less than end rank');
    }
    if (start_rank < 0 && end_rank < 0 && start_rank >= end_rank) {
        throw new errors_1.InvalidArgumentError('negative start rank must be less than negative end rank');
    }
}
exports.validateSortedSetRanks = validateSortedSetRanks;
function validateSortedSetScores(minScore, maxScore) {
    if (minScore === undefined)
        return;
    if (maxScore === undefined)
        return;
    if (minScore > maxScore) {
        throw new errors_1.InvalidArgumentError('minScore must be less than or equal to maxScore');
    }
}
exports.validateSortedSetScores = validateSortedSetScores;
function validateSortedSetOffset(offset) {
    if (offset < 0) {
        throw new errors_1.InvalidArgumentError('offset must be non-negative (>= 0)');
    }
}
exports.validateSortedSetOffset = validateSortedSetOffset;
function validateSortedSetCount(count) {
    if (count < 1) {
        throw new errors_1.InvalidArgumentError('count must be strictly positive (> 0)');
    }
}
exports.validateSortedSetCount = validateSortedSetCount;
function validateDictionaryName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('dictionary name must not be empty');
    }
}
exports.validateDictionaryName = validateDictionaryName;
function validateListName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('list name must not be empty');
    }
}
exports.validateListName = validateListName;
function validateListSliceStartEnd(startIndex, endIndex) {
    if (startIndex === undefined || endIndex === undefined)
        return;
    // can't validate bounds for start and index of either or are negative without list length
    if (startIndex > 0 || endIndex < 0)
        return;
    if (endIndex <= startIndex) {
        throw new errors_1.InvalidArgumentError('endIndex (exclusive) must be larger than startIndex (inclusive)');
    }
}
exports.validateListSliceStartEnd = validateListSliceStartEnd;
function validateTopicName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('topic name must not be empty');
    }
}
exports.validateTopicName = validateTopicName;
function validateWebhookName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('webhook name must not be empty');
    }
}
exports.validateWebhookName = validateWebhookName;
function validateIndexName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('index name must not be empty');
    }
}
exports.validateIndexName = validateIndexName;
function validateNumDimensions(numDimensions) {
    if (numDimensions <= 0) {
        throw new errors_1.InvalidArgumentError('numDimensions must be greater than zero');
    }
}
exports.validateNumDimensions = validateNumDimensions;
function validateTopK(topK) {
    if (topK <= 0) {
        throw new errors_1.InvalidArgumentError('topK must be greater than zero');
    }
}
exports.validateTopK = validateTopK;
function validateTtlMinutes(ttlMinutes) {
    if (ttlMinutes < 0) {
        throw new errors_1.InvalidArgumentError('ttlMinutes must be positive');
    }
}
exports.validateTtlMinutes = validateTtlMinutes;
function validateValidForSeconds(validForSeconds) {
    if (validForSeconds < 0) {
        throw new errors_1.InvalidArgumentError('validForSeconds must be positive');
    }
}
exports.validateValidForSeconds = validateValidForSeconds;
function validateTimeout(timeout) {
    if (timeout < 0) {
        throw new errors_1.InvalidArgumentError('timeout must be positive');
    }
}
exports.validateTimeout = validateTimeout;
function validateDisposableTokenExpiry(expiresIn) {
    if (!expiresIn.doesExpire()) {
        throw new errors_1.InvalidArgumentError('disposable tokens must have an expiry');
    }
    if (expiresIn.seconds() < 0) {
        throw new errors_1.InvalidArgumentError('disposable token expiry must be positive');
    }
    if (expiresIn.seconds() > 60 * 60) {
        // 60 seconds * 60 minutes
        throw new errors_1.InvalidArgumentError('disposable tokens must expire within 1 hour');
    }
}
exports.validateDisposableTokenExpiry = validateDisposableTokenExpiry;
function validateDisposableTokenTokenID(tokenId) {
    if (tokenId.length > 64) {
        throw new errors_1.InvalidArgumentError('TokenID must be less than or equal to 64 characters.');
    }
}
exports.validateDisposableTokenTokenID = validateDisposableTokenTokenID;
function isEmpty(str) {
    return !str.trim();
}
function isBase64(str) {
    try {
        return (0, string_1.encodeToBase64)((0, string_1.decodeFromBase64)(str)) === str;
    }
    catch (e) {
        return false;
    }
}
exports.isBase64 = isBase64;
function validateLeaderboardName(name) {
    if (isEmpty(name)) {
        throw new errors_1.InvalidArgumentError('leaderboard name must not be empty');
    }
}
exports.validateLeaderboardName = validateLeaderboardName;
function validateLeaderboardRanks(start_rank, end_rank) {
    if (start_rank > 0 && end_rank > 0 && start_rank >= end_rank) {
        throw new errors_1.InvalidArgumentError('start rank must be less than end rank');
    }
    if (start_rank < 0 || end_rank < 0) {
        throw new errors_1.InvalidArgumentError('ranks must be positive');
    }
}
exports.validateLeaderboardRanks = validateLeaderboardRanks;
function validateLeaderboardOffset(offset) {
    if (offset < 0) {
        throw new errors_1.InvalidArgumentError('offset must be non-negative (>= 0)');
    }
}
exports.validateLeaderboardOffset = validateLeaderboardOffset;
function validateLeaderboardCount(count) {
    if (count < 1) {
        throw new errors_1.InvalidArgumentError('count must be strictly positive (> 0)');
    }
}
exports.validateLeaderboardCount = validateLeaderboardCount;
function validateLeaderboardNumberOfElements(numElements) {
    if (numElements < 1) {
        throw new errors_1.InvalidArgumentError('must provide at least one element');
    }
}
exports.validateLeaderboardNumberOfElements = validateLeaderboardNumberOfElements;
//# sourceMappingURL=data:application/json;base64,