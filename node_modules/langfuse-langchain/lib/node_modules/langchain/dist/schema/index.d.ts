export function isBaseMessage(messageLike: any): boolean;
export function coerceMessageLikeToMessage(messageLike: any): any;
export function mapStoredMessageToChatMessage(message: any): HumanMessage | AIMessage | SystemMessage | FunctionMessage | ChatMessage;
export const RUN_KEY: "__run";
/**
 * Chunk of a single generation. Used for streaming.
 */
export class GenerationChunk {
    constructor(fields: any);
    text: any;
    generationInfo: any;
    concat(chunk: any): GenerationChunk;
}
/**
 * Base class for all types of messages in a conversation. It includes
 * properties like `content`, `name`, and `additional_kwargs`. It also
 * includes methods like `toDict()` and `_getType()`.
 */
export class BaseMessage extends Serializable {
    constructor(fields: any, kwargs: any);
    /**
     * @deprecated
     * Use {@link BaseMessage.content} instead.
     */
    get text(): any;
    name: any;
    content: any;
    additional_kwargs: any;
    toDict(): {
        type: any;
        data: any;
    };
}
/**
 * Represents a chunk of a message, which can be concatenated with other
 * message chunks. It includes a method `_merge_kwargs_dict()` for merging
 * additional keyword arguments from another `BaseMessageChunk` into this
 * one. It also overrides the `__add__()` method to support concatenation
 * of `BaseMessageChunk` instances.
 */
export class BaseMessageChunk extends BaseMessage {
    static _mergeAdditionalKwargs(left: any, right: any): any;
}
/**
 * Represents a human message in a conversation.
 */
export class HumanMessage extends BaseMessage {
    _getType(): string;
}
/**
 * Represents a chunk of a human message, which can be concatenated with
 * other human message chunks.
 */
export class HumanMessageChunk extends BaseMessageChunk {
    _getType(): string;
    concat(chunk: any): HumanMessageChunk;
}
/**
 * Represents an AI message in a conversation.
 */
export class AIMessage extends BaseMessage {
    _getType(): string;
}
/**
 * Represents a chunk of an AI message, which can be concatenated with
 * other AI message chunks.
 */
export class AIMessageChunk extends BaseMessageChunk {
    _getType(): string;
    concat(chunk: any): AIMessageChunk;
}
/**
 * Represents a system message in a conversation.
 */
export class SystemMessage extends BaseMessage {
    _getType(): string;
}
/**
 * Represents a chunk of a system message, which can be concatenated with
 * other system message chunks.
 */
export class SystemMessageChunk extends BaseMessageChunk {
    _getType(): string;
    concat(chunk: any): SystemMessageChunk;
}
/**
 * @deprecated
 * Use {@link BaseMessage} instead.
 */
export const BaseChatMessage: typeof BaseMessage;
/**
 * @deprecated
 * Use {@link HumanMessage} instead.
 */
export const HumanChatMessage: typeof HumanMessage;
/**
 * @deprecated
 * Use {@link AIMessage} instead.
 */
export const AIChatMessage: typeof AIMessage;
/**
 * @deprecated
 * Use {@link SystemMessage} instead.
 */
export const SystemChatMessage: typeof SystemMessage;
/**
 * Represents a function message in a conversation.
 */
export class FunctionMessage extends BaseMessage {
    _getType(): string;
}
/**
 * Represents a chunk of a function message, which can be concatenated
 * with other function message chunks.
 */
export class FunctionMessageChunk extends BaseMessageChunk {
    _getType(): string;
    concat(chunk: any): FunctionMessageChunk;
}
/**
 * Represents a chat message in a conversation.
 */
export class ChatMessage extends BaseMessage {
    static isInstance(message: any): boolean;
    role: any;
    _getType(): string;
}
/**
 * Represents a chunk of a chat message, which can be concatenated with
 * other chat message chunks.
 */
export class ChatMessageChunk extends BaseMessageChunk {
    role: any;
    _getType(): string;
    concat(chunk: any): ChatMessageChunk;
}
export class ChatGenerationChunk extends GenerationChunk {
    message: any;
    concat(chunk: any): ChatGenerationChunk;
}
/**
 * Base PromptValue class. All prompt values should extend this class.
 */
export class BasePromptValue extends Serializable {
}
/**
 * Base class for all chat message histories. All chat message histories
 * should extend this class.
 */
export class BaseChatMessageHistory extends Serializable {
}
/**
 * Base class for all list chat message histories. All list chat message
 * histories should extend this class.
 */
export class BaseListChatMessageHistory extends Serializable {
    addUserMessage(message: any): any;
    addAIChatMessage(message: any): any;
}
/**
 * Base class for all caches. All caches should extend this class.
 */
export class BaseCache {
}
/**
 * Base class for all file stores. All file stores should extend this
 * class.
 */
export class BaseFileStore extends Serializable {
}
/**
 * Base class for all entity stores. All entity stores should extend this
 * class.
 */
export class BaseEntityStore extends Serializable {
}
/**
 * Abstract class for a document store. All document stores should extend
 * this class.
 */
export class Docstore {
}
import { Serializable } from "../load/serializable.js";
