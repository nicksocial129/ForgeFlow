export function parseCallbackConfigArg(arg: any): any;
export function traceAsGroup(groupOptions: any, enclosedCode: any, ...args: any[]): Promise<any>;
/**
 * Manage callbacks from different components of LangChain.
 */
export class BaseCallbackManager {
    setHandler(handler: any): any;
}
/**
 * Manages callbacks for retriever runs.
 */
export class CallbackManagerForRetrieverRun extends BaseRunManager {
    getChild(tag: any): CallbackManager;
    handleRetrieverEnd(documents: any): Promise<void>;
    handleRetrieverError(err: any): Promise<void>;
}
export class CallbackManagerForLLMRun extends BaseRunManager {
    handleLLMNewToken(token: any, idx: any, _runId: any, _parentRunId: any, _tags: any, fields: any): Promise<void>;
    handleLLMError(err: any): Promise<void>;
    handleLLMEnd(output: any): Promise<void>;
}
export class CallbackManagerForChainRun extends BaseRunManager {
    getChild(tag: any): CallbackManager;
    handleChainError(err: any, _runId: any, _parentRunId: any, _tags: any, kwargs: any): Promise<void>;
    handleChainEnd(output: any, _runId: any, _parentRunId: any, _tags: any, kwargs: any): Promise<void>;
    handleAgentAction(action: any): Promise<void>;
    handleAgentEnd(action: any): Promise<void>;
}
export class CallbackManagerForToolRun extends BaseRunManager {
    getChild(tag: any): CallbackManager;
    handleToolError(err: any): Promise<void>;
    handleToolEnd(output: any): Promise<void>;
}
export class CallbackManager extends BaseCallbackManager {
    static fromHandlers(handlers: any): CallbackManager;
    static configure(inheritableHandlers: any, localHandlers: any, inheritableTags: any, localTags: any, inheritableMetadata: any, localMetadata: any, options: any): Promise<any>;
    constructor(parentRunId: any);
    handlers: any[];
    inheritableHandlers: any[];
    _parentRunId: any;
    handleLLMStart(llm: any, prompts: any, _runId?: undefined, _parentRunId?: undefined, extraParams?: undefined): Promise<any[]>;
    handleChatModelStart(llm: any, messages: any, _runId?: undefined, _parentRunId?: undefined, extraParams?: undefined): Promise<any[]>;
    handleChainStart(chain: any, inputs: any, runId?: string, runType?: undefined): Promise<CallbackManagerForChainRun>;
    handleToolStart(tool: any, input: any, runId?: string): Promise<CallbackManagerForToolRun>;
    handleRetrieverStart(retriever: any, query: any, runId?: string, _parentRunId?: undefined): Promise<CallbackManagerForRetrieverRun>;
    addHandler(handler: any, inherit?: boolean): void;
    removeHandler(handler: any): void;
    setHandlers(handlers: any, inherit?: boolean): void;
    addTags(tags: any, inherit?: boolean): void;
    removeTags(tags: any): void;
    tags: any;
    inheritableTags: any;
    addMetadata(metadata: any, inherit?: boolean): void;
    metadata: any;
    inheritableMetadata: any;
    removeMetadata(metadata: any): void;
    copy(additionalHandlers?: any[], inherit?: boolean): CallbackManager;
}
export class TraceGroup {
    constructor(groupName: any, options: any);
    getTraceGroupCallbackManager(group_name: any, inputs: any, options: any): Promise<any>;
    start(inputs: any): Promise<any>;
    runManager: any;
    error(err: any): Promise<void>;
    end(output: any): Promise<void>;
}
/**
 * Base class for run manager in LangChain.
 */
declare class BaseRunManager {
    constructor(runId: any, handlers: any, inheritableHandlers: any, tags: any, inheritableTags: any, metadata: any, inheritableMetadata: any, _parentRunId: any);
    handleText(text: any): Promise<void>;
}
export {};
