export class BaseTracer extends BaseCallbackHandler {
    constructor(_fields: any, ...args: any[]);
    copy(): this;
    _addChildRun(parentRun: any, childRun: any): void;
    _startTrace(run: any): Promise<void>;
    _endTrace(run: any): Promise<void>;
    _getExecutionOrder(parentRunId: any): any;
    handleLLMStart(llm: any, prompts: any, runId: any, parentRunId: any, extraParams: any, tags: any, metadata: any, name: any): Promise<{
        id: any;
        name: any;
        parent_run_id: any;
        start_time: number;
        serialized: any;
        events: {
            name: string;
            time: string;
        }[];
        inputs: {
            prompts: any;
        };
        execution_order: any;
        child_runs: never[];
        child_execution_order: any;
        run_type: string;
        extra: any;
        tags: any;
    }>;
    handleChatModelStart(llm: any, messages: any, runId: any, parentRunId: any, extraParams: any, tags: any, metadata: any, name: any): Promise<{
        id: any;
        name: any;
        parent_run_id: any;
        start_time: number;
        serialized: any;
        events: {
            name: string;
            time: string;
        }[];
        inputs: {
            messages: any;
        };
        execution_order: any;
        child_runs: never[];
        child_execution_order: any;
        run_type: string;
        extra: any;
        tags: any;
    }>;
    handleLLMEnd(output: any, runId: any): Promise<any>;
    handleLLMError(error: any, runId: any): Promise<any>;
    handleChainStart(chain: any, inputs: any, runId: any, parentRunId: any, tags: any, metadata: any, runType: any, name: any): Promise<{
        id: any;
        name: any;
        parent_run_id: any;
        start_time: number;
        serialized: any;
        events: {
            name: string;
            time: string;
        }[];
        inputs: any;
        execution_order: any;
        child_execution_order: any;
        run_type: any;
        child_runs: never[];
        extra: {
            metadata: any;
        } | {
            metadata?: undefined;
        };
        tags: any;
    }>;
    handleChainEnd(outputs: any, runId: any, _parentRunId: any, _tags: any, kwargs: any): Promise<any>;
    handleChainError(error: any, runId: any, _parentRunId: any, _tags: any, kwargs: any): Promise<any>;
    handleToolStart(tool: any, input: any, runId: any, parentRunId: any, tags: any, metadata: any, name: any): Promise<{
        id: any;
        name: any;
        parent_run_id: any;
        start_time: number;
        serialized: any;
        events: {
            name: string;
            time: string;
        }[];
        inputs: {
            input: any;
        };
        execution_order: any;
        child_execution_order: any;
        run_type: string;
        child_runs: never[];
        extra: {
            metadata: any;
        } | {
            metadata?: undefined;
        };
        tags: any;
    }>;
    handleToolEnd(output: any, runId: any): Promise<any>;
    handleToolError(error: any, runId: any): Promise<any>;
    handleAgentAction(action: any, runId: any): Promise<void>;
    handleAgentEnd(action: any, runId: any): Promise<void>;
    handleRetrieverStart(retriever: any, query: any, runId: any, parentRunId: any, tags: any, metadata: any, name: any): Promise<{
        id: any;
        name: any;
        parent_run_id: any;
        start_time: number;
        serialized: any;
        events: {
            name: string;
            time: string;
        }[];
        inputs: {
            query: any;
        };
        execution_order: any;
        child_execution_order: any;
        run_type: string;
        child_runs: never[];
        extra: {
            metadata: any;
        } | {
            metadata?: undefined;
        };
        tags: any;
    }>;
    handleRetrieverEnd(documents: any, runId: any): Promise<any>;
    handleRetrieverError(error: any, runId: any): Promise<any>;
    handleText(text: any, runId: any): Promise<void>;
    handleLLMNewToken(token: any, idx: any, runId: any, _parentRunId: any, _tags: any, fields: any): Promise<any>;
}
import { BaseCallbackHandler } from "../base.js";
