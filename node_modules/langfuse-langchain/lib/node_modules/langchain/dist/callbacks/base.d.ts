/**
 * Abstract base class for creating callback handlers in the LangChain
 * framework. It provides a set of optional methods that can be overridden
 * in derived classes to handle various events during the execution of a
 * LangChain application.
 */
export class BaseCallbackHandler extends BaseCallbackHandlerMethodsClass {
    /**
     * The name of the serializable. Override to provide an alias or
     * to preserve the serialized module name in minified environments.
     *
     * Implemented as a static method to support loading logic.
     */
    static lc_name(): string;
    static fromMethods(methods: any): {
        readonly lc_namespace: any[];
        readonly lc_secrets: undefined;
        readonly lc_attributes: undefined;
        readonly lc_aliases: undefined;
        /**
         * The final serialized identifier for the module.
         */
        readonly lc_id: any[];
        lc_kwargs: any;
        ignoreLLM: any;
        ignoreChain: any;
        ignoreAgent: any;
        ignoreRetriever: any;
        copy(): any;
        toJSON(): import("../load/serializable.js").Serialized;
        toJSONNotImplemented(): import("../load/serializable.js").SerializedNotImplemented;
    };
    constructor(input: any);
    get lc_namespace(): any[];
    get lc_secrets(): undefined;
    get lc_attributes(): undefined;
    get lc_aliases(): undefined;
    /**
     * The final serialized identifier for the module.
     */
    get lc_id(): any[];
    lc_kwargs: any;
    ignoreLLM: any;
    ignoreChain: any;
    ignoreAgent: any;
    ignoreRetriever: any;
    copy(): any;
    toJSON(): import("../load/serializable.js").Serialized;
    toJSONNotImplemented(): import("../load/serializable.js").SerializedNotImplemented;
}
/**
 * Abstract class that provides a set of optional methods that can be
 * overridden in derived classes to handle various events during the
 * execution of a LangChain application.
 */
declare class BaseCallbackHandlerMethodsClass {
}
export {};
