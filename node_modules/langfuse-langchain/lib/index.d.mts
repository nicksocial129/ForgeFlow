import { Langfuse, LangfuseOptions } from 'langfuse';
export { Langfuse } from 'langfuse';
import { BaseCallbackHandler } from 'langchain/callbacks';
import { Serialized } from 'langchain/load/serializable';
import { ChainValues, AgentAction, AgentFinish, BaseMessage, LLMResult } from 'langchain/schema';
import { Document } from 'langchain/document';
import { LangfuseTraceClient, LangfuseSpanClient } from 'langfuse-core';

type RootParams = {
    root: LangfuseTraceClient | LangfuseSpanClient;
};
type KeyParams = {
    publicKey: string;
    secretKey: string;
} & LangfuseOptions;
type ConstructorParams = (RootParams | KeyParams) & {
    userId?: string;
    version?: string;
};
declare class CallbackHandler extends BaseCallbackHandler {
    name: string;
    langfuse: Langfuse;
    traceId?: string;
    observationId?: string;
    rootObservationId?: string;
    topLevelObservationId?: string;
    userId?: string;
    version?: string;
    constructor(params: ConstructorParams);
    flushAsync(): Promise<any>;
    shutdownAsync(): Promise<any>;
    debug(enabled?: boolean): void;
    handleNewToken(token: string, runId: string): Promise<void>;
    getTraceId(): string | undefined;
    getTraceUrl(): string | undefined;
    getLangchainRunId(): string | undefined;
    handleRetrieverError(err: any, runId: string, parentRunId?: string | undefined): Promise<void>;
    handleChainStart(chain: Serialized, inputs: ChainValues, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): Promise<void>;
    handleAgentAction(action: AgentAction, runId?: string, parentRunId?: string): Promise<void>;
    handleAgentEnd?(action: AgentFinish, runId: string, parentRunId?: string): Promise<void>;
    handleChainError(err: any, runId: string, parentRunId?: string | undefined): Promise<void>;
    generateTrace(serialized: Serialized, runId: string, parentRunId: string | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): void;
    handleGenerationStart(llm: Serialized, messages: BaseMessage[][] | string[], runId: string, parentRunId?: string | undefined, extraParams?: Record<string, unknown> | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): Promise<void>;
    handleChatModelStart(llm: Serialized, messages: BaseMessage[][], runId: string, parentRunId?: string | undefined, extraParams?: Record<string, unknown> | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): Promise<void>;
    handleChainEnd(outputs: ChainValues, runId: string, parentRunId?: string | undefined): Promise<void>;
    handleLLMStart(llm: Serialized, prompts: string[], runId: string, parentRunId?: string | undefined, extraParams?: Record<string, unknown> | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): Promise<void>;
    handleToolStart(tool: Serialized, input: string, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): Promise<void>;
    handleRetrieverStart(retriever: Serialized, query: string, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): Promise<void>;
    handleRetrieverEnd(documents: Document<Record<string, any>>[], runId: string, parentRunId?: string | undefined): Promise<void>;
    handleToolEnd(output: string, runId: string, parentRunId?: string | undefined): Promise<void>;
    handleToolError(err: any, runId: string, parentRunId?: string | undefined): Promise<void>;
    handleLLMEnd(output: LLMResult, runId: string, parentRunId?: string | undefined): Promise<void>;
    handleLLMError(err: any, runId: string, parentRunId?: string | undefined): Promise<void>;
    joinTagsAndMetaData(tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): Record<string, unknown>;
}

export { CallbackHandler, CallbackHandler as default };
