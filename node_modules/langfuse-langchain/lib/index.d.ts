import { BaseCallbackHandler } from 'langchain/callbacks';
import { Serialized } from 'langchain/load/serializable';
import { ChainValues, AgentAction, AgentFinish, BaseMessage, LLMResult } from 'langchain/schema';
import { Document } from 'langchain/document';

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
/** OneOf type helpers */
type Without<T, U> = {
    [P in Exclude<keyof T, keyof U>]?: never;
};
type XOR<T, U> = T | U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;
interface paths {
    "/api/public/dataset-items": {
        /** @description Create a dataset item, upserts on id */
        post: operations["datasetItems_create"];
    };
    "/api/public/dataset-items/{id}": {
        /** @description Get a specific dataset item */
        get: operations["datasetItems_get"];
    };
    "/api/public/dataset-run-items": {
        /** @description Create a dataset run item */
        post: operations["datasetRunItems_create"];
    };
    "/api/public/datasets/{datasetName}": {
        /** @description Get a dataset and its items */
        get: operations["datasets_get"];
    };
    "/api/public/datasets": {
        /** @description Create a dataset */
        post: operations["datasets_create"];
    };
    "/api/public/datasets/{datasetName}/runs/{runName}": {
        /** @description Get a dataset run and its items */
        get: operations["datasets_getRuns"];
    };
    "/api/public/events": {
        /** @description Add an event to the database */
        post: operations["event_create"];
    };
    "/api/public/generations": {
        post: operations["generations_log"];
        patch: operations["generations_update"];
    };
    "/api/public/health": {
        /** @description Check health of API and database */
        get: operations["health_health"];
    };
    "/api/public/ingestion": {
        /** @description Ingest multiple events to Langfuse */
        post: operations["ingestion_batch"];
    };
    "/api/public/observations/{observationId}": {
        /** @description Get a specific observation */
        get: operations["observations_get"];
    };
    "/api/public/observations": {
        /** @description Get a list of observations */
        get: operations["observations_getMany"];
    };
    "/api/public/projects": {
        get: operations["projects_get"];
    };
    "/api/public/scores": {
        /** @description Get scores */
        get: operations["score_get"];
        /** @description Add a score to the database, upserts on id */
        post: operations["score_create"];
    };
    "/api/public/sessions/{sessionId}": {
        /** @description Get a session */
        get: operations["sessions_get"];
    };
    "/api/public/spans": {
        /** @description Add a span to the database */
        post: operations["span_create"];
        /** @description Update a span to the database */
        patch: operations["span_update"];
    };
    "/api/public/traces": {
        /** @description Get list of traces */
        get: operations["trace_list"];
        /** @description Add a trace to the database */
        post: operations["trace_create"];
    };
    "/api/public/traces/{traceId}": {
        /** @description Get a specific trace */
        get: operations["trace_get"];
    };
}
interface components {
    schemas: {
        /** CreateEventRequest */
        CreateEventRequest: {
            id?: string | null;
            traceId?: string | null;
            name?: string | null;
            /** Format: date-time */
            startTime?: string | null;
            metadata?: Record<string, unknown> | null;
            input?: Record<string, unknown> | null;
            output?: Record<string, unknown> | null;
            level?: components["schemas"]["ObservationLevel"];
            statusMessage?: string | null;
            parentObservationId?: string | null;
            version?: string | null;
        };
        /** CreateSpanRequest */
        CreateSpanRequest: {
            /** Format: date-time */
            endTime?: string | null;
        } & components["schemas"]["CreateEventRequest"];
        /** CreateGenerationRequest */
        CreateGenerationRequest: {
            /** Format: date-time */
            completionStartTime?: string | null;
            model?: string | null;
            modelParameters?: {
                [key: string]: components["schemas"]["MapValue"] | undefined;
            } | null;
            prompt?: Record<string, unknown> | null;
            completion?: Record<string, unknown> | null;
            usage?: components["schemas"]["LLMUsage"];
        } & components["schemas"]["CreateSpanRequest"];
        /** Trace */
        Trace: {
            /** @description The unique identifier of a trace */
            id: string;
            /** Format: date-time */
            timestamp: string;
            name?: string | null;
            input?: Record<string, unknown> | null;
            output?: Record<string, unknown> | null;
            sessionId?: string | null;
            release?: string | null;
            version?: string | null;
            userId?: string | null;
            metadata?: Record<string, unknown> | null;
            /** @description Public traces are accessible via url without login */
            public?: boolean | null;
        };
        /** TraceWithDetails */
        TraceWithDetails: WithRequired<{
            /** @description List of observation ids */
            observations: string[];
            /** @description List of score ids */
            scores: string[];
        } & components["schemas"]["Trace"], "observations" | "scores">;
        /** TraceWithFullDetails */
        TraceWithFullDetails: WithRequired<{
            observations: components["schemas"]["Observation"][];
            scores: components["schemas"]["Score"][];
        } & components["schemas"]["Trace"], "observations" | "scores">;
        /** Session */
        Session: {
            id: string;
            /** Format: date-time */
            createdAt: string;
            projectId: string;
        };
        /** SessionWithTraces */
        SessionWithTraces: WithRequired<{
            traces: components["schemas"]["Trace"][];
        } & components["schemas"]["Session"], "traces">;
        /** Observation */
        Observation: {
            id: string;
            traceId?: string | null;
            type: string;
            name?: string | null;
            /** Format: date-time */
            startTime: string;
            /** Format: date-time */
            endTime?: string | null;
            /** Format: date-time */
            completionStartTime?: string | null;
            model?: string | null;
            modelParameters?: {
                [key: string]: components["schemas"]["MapValue"] | undefined;
            } | null;
            input?: Record<string, unknown> | null;
            version?: string | null;
            metadata?: Record<string, unknown> | null;
            output?: Record<string, unknown> | null;
            promptTokens: number;
            completionTokens: number;
            totalTokens: number;
            level: components["schemas"]["ObservationLevel"];
            statusMessage?: string | null;
            parentObservationId?: string | null;
        };
        /** Score */
        Score: {
            id: string;
            traceId: string;
            name: string;
            /** Format: double */
            value: number;
            observationId?: string | null;
            /** Format: date-time */
            timestamp: string;
            comment?: string | null;
        };
        /** Dataset */
        Dataset: {
            id: string;
            name: string;
            status: components["schemas"]["DatasetStatus"];
            projectId: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            items: components["schemas"]["DatasetItem"][];
            runs: string[];
        };
        /** DatasetItem */
        DatasetItem: {
            id: string;
            status: components["schemas"]["DatasetStatus"];
            input: unknown;
            expectedOutput?: Record<string, unknown> | null;
            sourceObservationId?: string | null;
            datasetId: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** DatasetRunItem */
        DatasetRunItem: {
            id: string;
            datasetRunId: string;
            datasetItemId: string;
            observationId: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** DatasetRun */
        DatasetRun: {
            id: string;
            name: string;
            datasetId: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            datasetRunItems: components["schemas"]["DatasetRunItem"][];
        };
        /**
         * ObservationLevel
         * @enum {string}
         */
        ObservationLevel: "DEBUG" | "DEFAULT" | "WARNING" | "ERROR";
        /** MapValue */
        MapValue: (string | null) | (number | null) | (boolean | null);
        /** LLMUsage */
        LLMUsage: {
            promptTokens?: number | null;
            completionTokens?: number | null;
            totalTokens?: number | null;
        };
        /**
         * DatasetStatus
         * @enum {string}
         */
        DatasetStatus: "ACTIVE" | "ARCHIVED";
        /** CreateDatasetItemRequest */
        CreateDatasetItemRequest: {
            datasetName: string;
            input: unknown;
            expectedOutput?: Record<string, unknown> | null;
            id?: string | null;
        };
        /** CreateDatasetRunItemRequest */
        CreateDatasetRunItemRequest: {
            runName: string;
            datasetItemId: string;
            observationId: string;
        };
        /** CreateDatasetRequest */
        CreateDatasetRequest: {
            name: string;
        };
        /** UpdateGenerationRequest */
        UpdateGenerationRequest: {
            generationId: string;
            traceId?: string | null;
            name?: string | null;
            /** Format: date-time */
            startTime?: string | null;
            /** Format: date-time */
            endTime?: string | null;
            /** Format: date-time */
            completionStartTime?: string | null;
            model?: string | null;
            modelParameters?: {
                [key: string]: components["schemas"]["MapValue"] | undefined;
            } | null;
            prompt?: Record<string, unknown> | null;
            version?: string | null;
            metadata?: Record<string, unknown> | null;
            completion?: Record<string, unknown> | null;
            usage?: components["schemas"]["LLMUsage"];
            level?: components["schemas"]["ObservationLevel"];
            statusMessage?: string | null;
        };
        /** IngestionEvent */
        IngestionEvent: OneOf<[
            WithRequired<{
                /** @enum {string} */
                type?: "trace-create";
            } & components["schemas"]["TraceEvent"], "type">,
            WithRequired<{
                /** @enum {string} */
                type?: "score-create";
            } & components["schemas"]["ScoreEvent"], "type">,
            WithRequired<{
                /** @enum {string} */
                type?: "observation-create";
            } & components["schemas"]["ObservationCreateEvent"], "type">,
            WithRequired<{
                /** @enum {string} */
                type?: "observation-update";
            } & components["schemas"]["ObservationUpdateEvent"], "type">
        ]>;
        /** TraceEvent */
        TraceEvent: {
            id: string;
            timestamp: string;
            body: components["schemas"]["Trace"];
        };
        /** ObservationCreateEvent */
        ObservationCreateEvent: {
            id: string;
            timestamp: string;
            body: components["schemas"]["Observation"];
        };
        /** ObservationUpdateEvent */
        ObservationUpdateEvent: {
            id: string;
            timestamp: string;
            body: components["schemas"]["Observation"];
        };
        /** ScoreEvent */
        ScoreEvent: {
            id: string;
            timestamp: string;
            body: components["schemas"]["Score"];
        };
        /** Observations */
        Observations: {
            data: components["schemas"]["Observation"][];
            meta: components["schemas"]["utilsMetaResponse"];
        };
        /** Projects */
        Projects: {
            data: components["schemas"]["Project"][];
        };
        /** Project */
        Project: {
            id: string;
            name: string;
        };
        /** CreateScoreRequest */
        CreateScoreRequest: {
            id?: string | null;
            traceId: string;
            name: string;
            /** Format: double */
            value: number;
            observationId?: string | null;
            comment?: string | null;
        };
        /** Scores */
        Scores: {
            data: components["schemas"]["Score"][];
            meta: components["schemas"]["utilsMetaResponse"];
        };
        /** UpdateSpanRequest */
        UpdateSpanRequest: {
            spanId: string;
            traceId?: string | null;
            /** Format: date-time */
            startTime?: string | null;
            /** Format: date-time */
            endTime?: string | null;
            name?: string | null;
            metadata?: Record<string, unknown> | null;
            input?: Record<string, unknown> | null;
            output?: Record<string, unknown> | null;
            level?: components["schemas"]["ObservationLevel"];
            version?: string | null;
            statusMessage?: string | null;
        };
        /** CreateTraceRequest */
        CreateTraceRequest: {
            id?: string | null;
            name?: string | null;
            userId?: string | null;
            externalId?: string | null;
            input?: Record<string, unknown> | null;
            output?: Record<string, unknown> | null;
            sessionId?: string | null;
            release?: string | null;
            version?: string | null;
            metadata?: Record<string, unknown> | null;
            /** @description Make trace publicly accessible via url */
            public?: boolean | null;
        };
        /** Traces */
        Traces: {
            data: components["schemas"]["TraceWithDetails"][];
            meta: components["schemas"]["utilsMetaResponse"];
        };
        /** utilsMetaResponse */
        utilsMetaResponse: {
            /** @description current page number */
            page: number;
            /** @description number of items per page */
            limit: number;
            /** @description number of total items given the current filters/selection (if any) */
            totalItems: number;
            /** @description number of total pages given the current limit */
            totalPages: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
interface operations {
    /** @description Create a dataset item, upserts on id */
    datasetItems_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDatasetItemRequest"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["DatasetItem"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Get a specific dataset item */
    datasetItems_get: {
        parameters: {
            path: {
                id: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["DatasetItem"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Create a dataset run item */
    datasetRunItems_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDatasetRunItemRequest"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["DatasetRunItem"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Get a dataset and its items */
    datasets_get: {
        parameters: {
            path: {
                datasetName: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Dataset"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Create a dataset */
    datasets_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDatasetRequest"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Dataset"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Get a dataset run and its items */
    datasets_getRuns: {
        parameters: {
            path: {
                datasetName: string;
                runName: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["DatasetRun"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Add an event to the database */
    event_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEventRequest"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Observation"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    generations_log: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGenerationRequest"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Observation"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    generations_update: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGenerationRequest"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Observation"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Check health of API and database */
    health_health: {
        responses: {
            204: {
                content: never;
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
            503: {
                content: never;
            };
        };
    };
    /** @description Ingest multiple events to Langfuse */
    ingestion_batch: {
        requestBody: {
            content: {
                "application/json": {
                    batch: components["schemas"]["IngestionEvent"][];
                };
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Score"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Get a specific observation */
    observations_get: {
        parameters: {
            path: {
                /** @description The unique langfuse identifier of an observation, can be an event, span or generation */
                observationId: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Observation"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Get a list of observations */
    observations_getMany: {
        parameters: {
            query?: {
                page?: number | null;
                limit?: number | null;
                name?: string | null;
                userId?: string | null;
                type?: string | null;
                traceId?: string | null;
                parentObservationId?: string | null;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Observations"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    projects_get: {
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Projects"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Get scores */
    score_get: {
        parameters: {
            query?: {
                page?: number | null;
                limit?: number | null;
                userId?: string | null;
                name?: string | null;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Scores"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Add a score to the database, upserts on id */
    score_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateScoreRequest"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Score"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Get a session */
    sessions_get: {
        parameters: {
            path: {
                /** @description The unique id of a session */
                sessionId: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["SessionWithTraces"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Add a span to the database */
    span_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSpanRequest"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Observation"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Update a span to the database */
    span_update: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSpanRequest"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Observation"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Get list of traces */
    trace_list: {
        parameters: {
            query?: {
                page?: number | null;
                limit?: number | null;
                userId?: string | null;
                name?: string | null;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Traces"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Add a trace to the database */
    trace_create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTraceRequest"];
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["Trace"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    /** @description Get a specific trace */
    trace_get: {
        parameters: {
            path: {
                /** @description The unique langfuse identifier of a trace */
                traceId: string;
            };
        };
        responses: {
            200: {
                content: {
                    "application/json": components["schemas"]["TraceWithFullDetails"];
                };
            };
            400: {
                content: {
                    "application/json": unknown;
                };
            };
            401: {
                content: {
                    "application/json": unknown;
                };
            };
            403: {
                content: {
                    "application/json": unknown;
                };
            };
            404: {
                content: {
                    "application/json": unknown;
                };
            };
            405: {
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}

type LangfuseCoreOptions = {
    baseUrl?: string;
    flushAt?: number;
    flushInterval?: number;
    fetchRetryCount?: number;
    fetchRetryDelay?: number;
    requestTimeout?: number;
    release?: string;
};
declare enum LangfusePersistedProperty {
    Props = "props",
    Queue = "queue",
    OptedOut = "opted_out"
}
type LangfuseFetchOptions = {
    method: "GET" | "POST" | "PUT" | "PATCH";
    headers: {
        [key: string]: string;
    };
    body?: string;
    signal?: AbortSignal;
};
type LangfuseFetchResponse<T = any> = {
    status: number;
    text: () => Promise<string>;
    json: () => Promise<T>;
};
type CreateLangfuseTraceBody = FixTypes<paths["/api/public/traces"]["post"]["requestBody"]["content"]["application/json"]>;
type CreateLangfuseEventBody = FixTypes<paths["/api/public/events"]["post"]["requestBody"]["content"]["application/json"]>;
type CreateLangfuseSpanBody = FixTypes<paths["/api/public/spans"]["post"]["requestBody"]["content"]["application/json"]>;
type CreateLangfuseGenerationBody = Omit<FixTypes<paths["/api/public/generations"]["post"]["requestBody"]["content"]["application/json"]>, "input" | "output">;
type CreateLangfuseScoreBody = FixTypes<paths["/api/public/scores"]["post"]["requestBody"]["content"]["application/json"]>;
type UpdateLangfuseSpanBody = FixTypes<paths["/api/public/spans"]["patch"]["requestBody"]["content"]["application/json"]>;
type UpdateLangfuseGenerationBody = FixTypes<paths["/api/public/generations"]["patch"]["requestBody"]["content"]["application/json"]>;
type LangfuseObject = "createTrace" | "createEvent" | "createSpan" | "createGeneration" | "createScore" | "updateSpan" | "updateGeneration";
type GetLangfuseDatasetParams = FixTypes<paths["/api/public/datasets/{datasetName}"]["get"]["parameters"]["path"]>;
type GetLangfuseDatasetResponse = FixTypes<paths["/api/public/datasets/{datasetName}"]["get"]["responses"]["200"]["content"]["application/json"]>;
type CreateLangfuseDatasetRunItemBody = FixTypes<paths["/api/public/dataset-run-items"]["post"]["requestBody"]["content"]["application/json"]>;
type CreateLangfuseDatasetRunItemResponse = FixTypes<paths["/api/public/dataset-run-items"]["post"]["responses"]["200"]["content"]["application/json"]>;
type CreateLangfuseDatasetResponse = FixTypes<paths["/api/public/datasets"]["post"]["responses"]["200"]["content"]["application/json"]>;
type CreateLangfuseDatasetItemBody = FixTypes<paths["/api/public/dataset-items"]["post"]["requestBody"]["content"]["application/json"]>;
type CreateLangfuseDatasetItemResponse = FixTypes<paths["/api/public/dataset-items"]["post"]["responses"]["200"]["content"]["application/json"]>;
type GetLangfuseDatasetRunParams = FixTypes<paths["/api/public/datasets/{datasetName}/runs/{runName}"]["get"]["parameters"]["path"]>;
type GetLangfuseDatasetRunResponse = FixTypes<paths["/api/public/datasets/{datasetName}/runs/{runName}"]["get"]["responses"]["200"]["content"]["application/json"]>;
type OptionalTypes<T> = T extends null | undefined ? T : never;
type FixTypes<T> = Omit<{
    [P in keyof T]: P extends "startTime" | "endTime" | "timestamp" | "completionStartTime" | "createdAt" | "updatedAt" ? // Dates instead of strings
    Date | OptionalTypes<T[P]> : P extends "metadata" | "input" | "output" | "prompt" | "completion" | "expectedOutput" ? // JSON instead of strings
    any | OptionalTypes<T[P]> : T[P];
}, "externalId" | "traceIdType">;

interface RetriableOptions {
    retryCount?: number;
    retryDelay?: number;
    retryCheck?: (err: any) => boolean;
}

declare class SimpleEventEmitter {
    events: {
        [key: string]: ((...args: any[]) => void)[];
    };
    constructor();
    on(event: string, listener: (...args: any[]) => void): () => void;
    emit(event: string, payload: any): void;
}

declare abstract class LangfuseCoreStateless {
    private secretKey;
    private publicKey;
    baseUrl: string;
    private flushAt;
    private flushInterval;
    private requestTimeout;
    private removeDebugCallback?;
    private debugMode;
    private pendingPromises;
    private release;
    protected _events: SimpleEventEmitter;
    protected _flushTimer?: any;
    protected _retryOptions: RetriableOptions;
    abstract fetch(url: string, options: LangfuseFetchOptions): Promise<LangfuseFetchResponse>;
    abstract getLibraryId(): string;
    abstract getLibraryVersion(): string;
    abstract getPersistedProperty<T>(key: LangfusePersistedProperty): T | undefined;
    abstract setPersistedProperty<T>(key: LangfusePersistedProperty, value: T | null): void;
    constructor(params: {
        publicKey: string;
        secretKey?: string;
    } & LangfuseCoreOptions);
    protected getCommonEventProperties(): any;
    on(event: string, cb: (...args: any[]) => void): () => void;
    debug(enabled?: boolean): void;
    /***
     *** Handlers for each object type
     ***/
    protected traceStateless(body: CreateLangfuseTraceBody): string;
    protected eventStateless(body: CreateLangfuseEventBody): string;
    protected spanStateless(body: CreateLangfuseSpanBody): string;
    protected generationStateless(body: CreateLangfuseGenerationBody): string;
    protected scoreStateless(body: CreateLangfuseScoreBody): string;
    protected updateSpanStateless(body: UpdateLangfuseSpanBody): string;
    protected updateGenerationStateless(body: UpdateLangfuseGenerationBody): string;
    protected _getDataset(name: GetLangfuseDatasetParams["datasetName"]): Promise<GetLangfuseDatasetResponse>;
    getDatasetRun(params: GetLangfuseDatasetRunParams): Promise<GetLangfuseDatasetRunResponse>;
    createDatasetRunItem(body: CreateLangfuseDatasetRunItemBody): Promise<CreateLangfuseDatasetRunItemResponse>;
    createDataset(name: string): Promise<CreateLangfuseDatasetResponse>;
    /**
     * Creates a dataset item. Upserts the item if it already exists.
     * @param body The body of the dataset item to be created.
     * @returns A promise that resolves to the response of the create operation.
     */
    createDatasetItem(body: CreateLangfuseDatasetItemBody): Promise<CreateLangfuseDatasetItemResponse>;
    getDatasetItem(id: string): Promise<CreateLangfuseDatasetItemResponse>;
    protected _parsePayload(response: any): any;
    /***
     *** QUEUEING AND FLUSHING
     ***/
    protected enqueue(type: LangfuseObject, body: any): void;
    flushAsync(): Promise<any>;
    flush(): Promise<LangfuseFetchResponse>[];
    private getFetchOptions;
    private constructAuthorizationHeader;
    private fetchWithRetry;
    shutdownAsync(): Promise<void>;
    shutdown(): void;
    protected awaitAllQueuedAndPendingRequests(): Promise<void>;
}
declare abstract class LangfuseCore extends LangfuseCoreStateless {
    constructor(params: {
        publicKey: string;
        secretKey: string;
    } & LangfuseCoreOptions);
    trace(body?: CreateLangfuseTraceBody): LangfuseTraceClient;
    span(body: CreateLangfuseSpanBody): LangfuseSpanClient;
    generation(body: CreateLangfuseGenerationBody): LangfuseGenerationClient;
    event(body: CreateLangfuseEventBody): LangfuseEventClient;
    score(body: CreateLangfuseScoreBody): this;
    getDataset(name: string): Promise<{
        id: string;
        name: string;
        projectId: string;
        items: Array<{
            id: string;
            input: any;
            expectedOutput?: any;
            sourceObservationId?: string | null;
            link: (obj: LangfuseObservationClient, runName: string) => Promise<{
                id: string;
            }>;
        }>;
    }>;
    _updateSpan(body: UpdateLangfuseSpanBody): this;
    _updateGeneration(body: UpdateLangfuseGenerationBody): this;
}
declare abstract class LangfuseObjectClient {
    readonly client: LangfuseCore;
    readonly id: string;
    readonly traceId: string;
    readonly observationId: string | null;
    constructor({ client, id, traceId, observationId, }: {
        client: LangfuseCore;
        id: string;
        traceId: string;
        observationId: string | null;
    });
    event(body: Omit<CreateLangfuseEventBody, "traceId" | "parentObservationId">): LangfuseEventClient;
    span(body: Omit<CreateLangfuseSpanBody, "traceId" | "parentObservationId">): LangfuseSpanClient;
    generation(body: Omit<CreateLangfuseGenerationBody, "traceId" | "parentObservationId">): LangfuseGenerationClient;
    score(body: Omit<CreateLangfuseScoreBody, "traceId" | "parentObservationId">): this;
    getTraceUrl(): string;
}
declare class LangfuseTraceClient extends LangfuseObjectClient {
    constructor(client: LangfuseCore, traceId: string);
    update(body: Omit<CreateLangfuseTraceBody, "id">): this;
}
declare abstract class LangfuseObservationClient extends LangfuseObjectClient {
    constructor(client: LangfuseCore, id: string, traceId: string);
}
declare class LangfuseSpanClient extends LangfuseObservationClient {
    constructor(client: LangfuseCore, id: string, traceId: string);
    update(body: Omit<UpdateLangfuseSpanBody, "spanId" | "traceId">): this;
    end(body?: Omit<UpdateLangfuseSpanBody, "spanId" | "endTime" | "traceId">): this;
}
declare class LangfuseGenerationClient extends LangfuseObservationClient {
    constructor(client: LangfuseCore, id: string, traceId: string);
    update(body: Omit<UpdateLangfuseGenerationBody, "generationId" | "traceId">): this;
    end(body?: Omit<UpdateLangfuseGenerationBody, "generationId" | "traceId" | "endTime">): this;
}
declare class LangfuseEventClient extends LangfuseObservationClient {
    constructor(client: LangfuseCore, id: string, traceId: string);
}

type LangfuseOptions = {
    persistence?: "localStorage" | "sessionStorage" | "cookie" | "memory";
    persistence_name?: string;
} & LangfuseCoreOptions;

declare class Langfuse extends LangfuseCore {
    private _storage;
    private _storageCache;
    private _storageKey;
    constructor(params: {
        publicKey: string;
        secretKey: string;
    } & LangfuseOptions);
    getPersistedProperty<T>(key: LangfusePersistedProperty): T | undefined;
    setPersistedProperty<T>(key: LangfusePersistedProperty, value: T | null): void;
    fetch(url: string, options: LangfuseFetchOptions): Promise<LangfuseFetchResponse>;
    getLibraryId(): string;
    getLibraryVersion(): string;
    getCustomUserAgent(): void;
}

type RootParams = {
    root: LangfuseTraceClient | LangfuseSpanClient;
};
type KeyParams = {
    publicKey: string;
    secretKey: string;
} & LangfuseOptions;
type ConstructorParams = (RootParams | KeyParams) & {
    userId?: string;
    version?: string;
};
declare class CallbackHandler extends BaseCallbackHandler {
    name: string;
    langfuse: Langfuse;
    traceId?: string;
    observationId?: string;
    rootObservationId?: string;
    topLevelObservationId?: string;
    userId?: string;
    version?: string;
    constructor(params: ConstructorParams);
    flushAsync(): Promise<any>;
    shutdownAsync(): Promise<any>;
    debug(enabled?: boolean): void;
    handleNewToken(token: string, runId: string): Promise<void>;
    getTraceId(): string | undefined;
    getTraceUrl(): string | undefined;
    getLangchainRunId(): string | undefined;
    handleRetrieverError(err: any, runId: string, parentRunId?: string | undefined): Promise<void>;
    handleChainStart(chain: Serialized, inputs: ChainValues, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): Promise<void>;
    handleAgentAction(action: AgentAction, runId?: string, parentRunId?: string): Promise<void>;
    handleAgentEnd?(action: AgentFinish, runId: string, parentRunId?: string): Promise<void>;
    handleChainError(err: any, runId: string, parentRunId?: string | undefined): Promise<void>;
    generateTrace(serialized: Serialized, runId: string, parentRunId: string | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): void;
    handleGenerationStart(llm: Serialized, messages: BaseMessage[][] | string[], runId: string, parentRunId?: string | undefined, extraParams?: Record<string, unknown> | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): Promise<void>;
    handleChatModelStart(llm: Serialized, messages: BaseMessage[][], runId: string, parentRunId?: string | undefined, extraParams?: Record<string, unknown> | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): Promise<void>;
    handleChainEnd(outputs: ChainValues, runId: string, parentRunId?: string | undefined): Promise<void>;
    handleLLMStart(llm: Serialized, prompts: string[], runId: string, parentRunId?: string | undefined, extraParams?: Record<string, unknown> | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): Promise<void>;
    handleToolStart(tool: Serialized, input: string, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): Promise<void>;
    handleRetrieverStart(retriever: Serialized, query: string, runId: string, parentRunId?: string | undefined, tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): Promise<void>;
    handleRetrieverEnd(documents: Document<Record<string, any>>[], runId: string, parentRunId?: string | undefined): Promise<void>;
    handleToolEnd(output: string, runId: string, parentRunId?: string | undefined): Promise<void>;
    handleToolError(err: any, runId: string, parentRunId?: string | undefined): Promise<void>;
    handleLLMEnd(output: LLMResult, runId: string, parentRunId?: string | undefined): Promise<void>;
    handleLLMError(err: any, runId: string, parentRunId?: string | undefined): Promise<void>;
    joinTagsAndMetaData(tags?: string[] | undefined, metadata?: Record<string, unknown> | undefined): Record<string, unknown>;
}

export { CallbackHandler, Langfuse, CallbackHandler as default };
