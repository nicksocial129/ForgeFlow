import { LangfuseCore, LangfuseWebStateless, type LangfuseFetchOptions, type LangfuseFetchResponse, type LangfusePersistedProperty } from "../../langfuse-core/src";
import { type LangfuseOptions } from "./types";
export { type LangfuseTraceClient, type LangfuseSpanClient, type LangfuseEventClient, type LangfuseGenerationClient, } from "../../langfuse-core/src";
export declare class Langfuse extends LangfuseCore {
    private _storage;
    private _storageCache;
    private _storageKey;
    constructor(params: {
        publicKey: string;
        secretKey: string;
    } & LangfuseOptions);
    getPersistedProperty<T>(key: LangfusePersistedProperty): T | undefined;
    setPersistedProperty<T>(key: LangfusePersistedProperty, value: T | null): void;
    fetch(url: string, options: LangfuseFetchOptions): Promise<LangfuseFetchResponse>;
    getLibraryId(): string;
    getLibraryVersion(): string;
    getCustomUserAgent(): void;
}
export declare class LangfuseWeb extends LangfuseWebStateless {
    private _storage;
    private _storageCache;
    private _storageKey;
    constructor(params: {
        publicKey: string;
    } & LangfuseOptions);
    getPersistedProperty<T>(key: LangfusePersistedProperty): T | undefined;
    setPersistedProperty<T>(key: LangfusePersistedProperty, value: T | null): void;
    fetch(url: string, options: LangfuseFetchOptions): Promise<LangfuseFetchResponse>;
    getLibraryId(): string;
    getLibraryVersion(): string;
    getCustomUserAgent(): void;
}
